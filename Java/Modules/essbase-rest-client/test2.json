{
  "swagger": "2.0",
  "info": {
    "description": "The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.",
    "version": "1.0",
    "title": "sometitle"
  },
  "basePath": "/essbase/rest/v1",
  "tags": [
    {
      "name": "Roles"
    },
    {
      "name": "Files"
    },
    {
      "name": "Application Configuration"
    },
    {
      "name": "Application Connections"
    },
    {
      "name": "Global Connections"
    },
    {
      "name": "Application Data Sources"
    },
    {
      "name": "Global Data Sources"
    },
    {
      "name": "Drill Through Reports"
    },
    {
      "name": "Email"
    },
    {
      "name": "Workbook Utilities"
    },
    {
      "name": "Filters"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "Location aliases"
    },
    {
      "name": "Locks"
    },
    {
      "name": "Application logs"
    },
    {
      "name": "About Essbase"
    },
    {
      "name": "Applications"
    },
    {
      "name": "Audit Trail"
    },
    {
      "name": "Batch Outline Editing"
    },
    {
      "name": "Database Size Statistics"
    },
    {
      "name": "Dimensions"
    },
    {
      "name": "URLs"
    },
    {
      "name": "File Scanner"
    },
    {
      "name": "User Session"
    },
    {
      "name": "Templates and Utilities"
    },
    {
      "name": "ASO Load buffers"
    },
    {
      "name": "Grid Preferences"
    },
    {
      "name": "Grid"
    },
    {
      "name": "Performance Analyzer"
    },
    {
      "name": "Layouts"
    },
    {
      "name": "Execute MDX"
    },
    {
      "name": "Named Queries"
    },
    {
      "name": "Database Settings and Statistics"
    },
    {
      "name": "Application Settings and Statistics"
    },
    {
      "name": "Outline Viewer"
    },
    {
      "name": "Partitions"
    },
    {
      "name": "Preferences"
    },
    {
      "name": "Properties"
    },
    {
      "name": "Group Provisioning Report"
    },
    {
      "name": "Application Role Provisioning"
    },
    {
      "name": "Service Role Provisioning"
    },
    {
      "name": "User Provisioning Report"
    },
    {
      "name": "Rules"
    },
    {
      "name": "Sandbox Dimension"
    },
    {
      "name": "Scenarios"
    },
    {
      "name": "Scripts"
    },
    {
      "name": "Sessions"
    },
    {
      "name": "Streaming Data Load"
    },
    {
      "name": "Streaming Dimension Build"
    },
    {
      "name": "Users"
    },
    {
      "name": "Server Variables"
    },
    {
      "name": "Variables"
    },
    {
      "name": "Platform Service Settings"
    }
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Essbase Roles",
        "description": "<p>Returns the roles available in Essbase. Valid type values are <code>application</code> and <code>server</code>. If type is empty, then both <code>application</code> and <code>server</code> roles are returned.</p>",
        "operationId": "Roles.getRoles",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "<p>Valid type values are <code>application</code> and <code>server</code>.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><Strong>OK</strong><p>Returns roles for the specified type.</p>",
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          }
        }
      }
    },
    "/files/actions/copy": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Copy File",
        "description": "Copy a file from source to destination.",
        "operationId": "Files.copyResource",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>File path details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilePathDetail"
            }
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>Overwrite existing file.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>File copied successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/files/{path}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List or Download Files",
        "description": "<p>Returns a list of files, or downloads the specified file. To list files, use <code>Accept='application/json'</code> for the Accept header. To download, use <code>Accept='application/octet-stream'</code> for the Accept header.</p>",
        "operationId": "Files.listFiles",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "<p>Catalog path. If listing files, this is the folder path. If downloading files, this is the file path.</p>",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.</p>",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of files to return. Applicable only for listing files.</p>",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "<p>List files by type. If type is not specified, returns all files. Applicable only for listing files.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  <code>action=validateUpload</code> and <code>Accept='application/json'</code> or <code>Accept='application/xml'</code> . Default value is false.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "action",
            "in": "query",
            "description": "<p>Validates the upload. Supported action values are <code>validateUpload</code> and <code>'Accept=application/json'</code> or <code>'Accept=application/xml'</code>.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileSize",
            "in": "query",
            "description": "<p>Validates whether enough free space is available. Applicable only with query parameters <code>action='validateUpload'</code> and <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>.</p>",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "<p>Filter the list of files.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "<p>Recursive param to get search result as recursive.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p> Response type can be either JSON/XML or stream, depending on the Accept header. If <code>Accept=application/json</code> or <code>Accept=application/xml</code>, the response lists files and current folder details. If <code>Accept=application/octet-stream</code>, the response is returned as a stream. If query parameters include <code>action=validateUpload</code> and <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>, the response is empty.</p>",
            "schema": {
              "$ref": "#/definitions/CollectionResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions, or the file may already exist when query parameters include <code>action=validateUpload</code> and <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Upload File or Create Folder",
        "description": "<p>Uploads a file to Essbase.</p><p>Supported file types include text files, rules files, calculation script files, and MaxL script files.</p>. <p>If there is no content type, and a folder name is specified in the URL, a folder is created.</p>",
        "operationId": "Files.addFile",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "<p>Catalog path. If <code>Content-Type=application/octet-stream</code>, this is a file name. Otherwise, it is a folder name.</p>",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>Applicable only for adding a file. Overwriting folders is not supported.</p>",
            "required": true,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The file uploaded successfully (if Content-Type is <code>application/octet-stream</code>), or the folder was created successfully (if there is no Content-Type).",
            "schema": {
              "$ref": "#/definitions/GenericEntity"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions, or the file or folder may already exist.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete File or Folder",
        "description": "<p>Delete the file or folder specified in the path.</p>",
        "operationId": "Files.deleteFile",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Path of file/folder to delete",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The file or folder was removed successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List Root Folders",
        "description": "<p>List catalog root folders.</p>",
        "operationId": "Files.listRootFolders",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "<p>Filter the list of files.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "<p>Recursive param to get search result as recursive.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Folder list.</p>",
            "schema": {
              "$ref": "#/definitions/CollectionResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Invalid path.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/files/homepath": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get Home Path",
        "description": "<p>Get user home path.</p>",
        "operationId": "Files.getUserHomePath",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>User home path.</p>",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/files/sharedpath": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get Shared Path",
        "description": "<p>Get user shared path.</p>",
        "operationId": "Files.getSharedPath",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The shared path was returned successfully.</p>",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/files/actions/move": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Move or Rename File",
        "description": "<p>Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.</p>",
        "operationId": "Files.moveResource",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>File path details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilePathDetail"
            }
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>Overwrite existing file. Only applicable for moving or renaming a file.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The file operation completed successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/files/actions/extract": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Extract the zip file.",
        "description": "<p>Extract a zip file on same location. Applications, Users and Shared folders are supported to extract zip.</p>",
        "operationId": "Files.extract",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Zip file path details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZipFileDetails"
            }
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>Overwrite existing file. Not applicable for folder.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The file operation completed successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Contains an invalid special character.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/configurations/{configId}": {
      "get": {
        "tags": [
          "Application Configuration"
        ],
        "summary": "Get Application Configuration Property",
        "description": "<p>Returns configuration (based on configuration property name) from the specified application.</p>",
        "operationId": "ApplicationConfiguration.getConfiguration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "configId",
            "in": "path",
            "description": "<p>Configuration property name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The configuration was retrieved successfully. Returns the configuration details and the links to get, edit, or delete the configuration.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationConfigEntry"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the configuration information. The application name or configuration property is invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Application Configuration"
        ],
        "summary": "Update Application Configuration",
        "description": "<p>Updates the application configuration and returns the updated configuration details.</p>",
        "operationId": "ApplicationConfiguration.setConfiguration",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "configId",
            "in": "path",
            "description": "<p>Configuration property name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Configuration property value entry.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationConfigEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The configuration was updated successfully. Returns the configuration details and the links to get, edit, or delete the configuration.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationConfigEntry"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the configuration. The application name or configuration property is invalid, or the specified configuration property has not been added to the application.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Application Configuration"
        ],
        "summary": "Delete Application Configuration",
        "description": "<p>Deletes the specified configuration property from the specified application.</p>",
        "operationId": "ApplicationConfiguration.deleteConfiguration",
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "configId",
            "in": "path",
            "description": "<p>Configuration property name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The configuration was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete the configuration. The application name or configuration property is invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/configurationkeys": {
      "get": {
        "tags": [
          "Application Configuration"
        ],
        "summary": "Get Application Configuration (Filtered)",
        "description": "<p>Returns all the configuration properties currently set for the specified application, with option to filter by configured value.</p>",
        "operationId": "ApplicationConfiguration.getConfigurationKeys",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "<p>Filter key to refine the configuration property results.</p>",
            "required": false,
            "type": "string",
            "default": "*"
          },
          {
            "name": "configured",
            "in": "query",
            "description": "<p>Specify <code>all</code> to return all configured properties. Specify <code>true</code> to return enabled configuration properties. Specify <code>false</code> to return configuration properties that are turned off.</p>",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The configuration properties were retrieved successfully.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationConfigList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the configuration properties. The application name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/configurations": {
      "get": {
        "tags": [
          "Application Configuration"
        ],
        "summary": "Get Application Configuration",
        "description": "<p>Returns all the configuration properties currently set for the specified application.</p>",
        "operationId": "ApplicationConfiguration.getConfigurations",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Configuration properties retrieved successfully. Returns all the configuration properties which are set for the application, and the links to get, edit, or delete each property.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationConfigList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the configuration properties. The application name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Application Configuration"
        ],
        "summary": "Add Application Configuration",
        "description": "<p>Adds the configuration property to the application and returns the added configuration property name.</p>",
        "operationId": "ApplicationConfiguration.addConfiguration",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Configuration property entry.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationConfigEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Configuration property added successfully. Returns the configuration details and the links to get, edit, or delete the configuration.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationConfigEntry"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to add the configuration property. The application name or the configuration property JSON could be incorrect, or the configuration property might already have been added to the application.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Application Configuration"
        ],
        "summary": "Updates Application Configurations",
        "description": "<p>Updates the application configurations and returns the updated configuration details.</p>",
        "operationId": "ApplicationConfiguration.setConfigurations",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Configuration property value entries.</p>",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationConfigEntry"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Configurations were updated successfully. Returns the configuration details and the links to get, edit, or delete the configurations.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationConfigList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the configurations. The application name or configuration entries is invalid, or the given configuration property has not been added to the application.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/connections/{connectionName}/actions/test": {
      "post": {
        "tags": [
          "Application Connections"
        ],
        "summary": "Test Saved Application Connection",
        "description": "<p>Tests the saved application-level connection with the specified name.</p>",
        "operationId": "ApplicationConnections.testConnectionExisting",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Saved connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The connection tested successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Error occurred while testing connection.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/connections/actions/test": {
      "post": {
        "tags": [
          "Application Connections"
        ],
        "summary": "Test New Application Connection",
        "description": "<p>Tests a new or updated application connection, using specified inputs, without saving it.</p>",
        "operationId": "ApplicationConnections.testConnection",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Connection details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The connection tested successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Error occurred while testing connection.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/connections/{connectionName}": {
      "get": {
        "tags": [
          "Application Connections"
        ],
        "summary": "Get Application Connection",
        "description": "<p>Returns details about the specified application-level connection.</p>",
        "operationId": "ApplicationConnections.getConnectionDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "<p>If set to true, the encrypted password is returned in the result.</p>",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Connection details returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get connection details.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Application Connections"
        ],
        "summary": "Update Application Connection",
        "description": "<p>Update the named application connection. If successful, returns details of the updated connection. <code>type</code> is a required input for all connections. Other required inputs differ, depending on the type of the connection.</p>",
        "operationId": "ApplicationConnections.updateConnection",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Connection details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Connection updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to update connection.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Application Connections"
        ],
        "summary": "Delete Application Connection",
        "description": "<p>Delete a saved application connection by name.</p>",
        "operationId": "ApplicationConnections.deleteConnection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The connection was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to delete connection.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/connections": {
      "get": {
        "tags": [
          "Application Connections"
        ],
        "summary": "List Application Connections",
        "description": "<p>Returns a list of connections for the application, including details such as name, description, and type.</p>",
        "operationId": "ApplicationConnections.getConnections",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of connections to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of connections to return. Default is 50.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of connections returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ConnectionsList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to list connections.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Application Connections"
        ],
        "summary": "Create Application Connection",
        "description": "<p>Creates an application-level connection based on specified inputs. <code>name</code> and <code>type</code> are required inputs for all types of connections. Other required inputs differ based on the type of the connection.</p>",
        "operationId": "ApplicationConnections.createConnection",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Connection details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Connection created successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to create connection.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/connections/{connectionName}/wallet": {
      "put": {
        "tags": [
          "Application Connections"
        ],
        "summary": "Upload a connection wallet file",
        "description": "Upload a connection wallet file.",
        "operationId": "ApplicationConnections.wallets",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Return the wallet file location in catalog.</p>",
            "schema": {
              "$ref": "#/definitions/WalletLocation"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Unable to process wallet file.</p>"
          }
        }
      }
    },
    "/connections/{connectionName}/actions/test": {
      "post": {
        "tags": [
          "Global Connections"
        ],
        "summary": "Test Saved Connection",
        "description": "<p>Tests a saved global connection by name.</p>",
        "operationId": "GlobalConnections.testConnectionExisting",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The connection tested successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Error occurred while testing connection.</p>"
          }
        }
      }
    },
    "/connections/actions/test": {
      "post": {
        "tags": [
          "Global Connections"
        ],
        "summary": "Test New Connection",
        "description": "<p>Tests a new or updated global connection, using specified inputs, without saving it.</p>",
        "operationId": "GlobalConnections.testConnection",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Connection details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The connection tested successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Error occurred while testing connection.</p>"
          }
        }
      }
    },
    "/connections/{connectionName}": {
      "get": {
        "tags": [
          "Global Connections"
        ],
        "summary": "Get Connection",
        "description": "<p>Returns details about the specified global connection.</p>",
        "operationId": "GlobalConnections.getConnectionDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "<p>If set to true, the encrypted password is returned in the result.</p>",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Connection details returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get connection details.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Global Connections"
        ],
        "summary": "Update Connection",
        "description": "<p>Update the named global connection. If the update is successful, returns details about the updated connection. <code>type</code> is a required input for all types of connections. Other required inputs differ based on the type of the connection.</p>",
        "operationId": "GlobalConnections.updateConnection",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Connection details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Connection updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to update connection.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Global Connections"
        ],
        "summary": "Delete Connection",
        "description": "<p>Deletes a named global connection.</p>",
        "operationId": "GlobalConnections.deleteConnection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The connection was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete the connection.</p>"
          }
        }
      }
    },
    "/connections": {
      "get": {
        "tags": [
          "Global Connections"
        ],
        "summary": "List Connections",
        "description": "<p>Returns global connections list, including details such as name, description, and type.</p>",
        "operationId": "GlobalConnections.getConnections",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of connections to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of connections to return. Default is 50.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of connections returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ConnectionsList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to list connections.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Global Connections"
        ],
        "summary": "Create Connection",
        "description": "<p>Creates a connection based on specified inputs. <code>name</code> and <code>type</code> are required inputs for all types of connections. Other required inputs differ based on the type of connection.</p>",
        "operationId": "GlobalConnections.createConnection",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Connection details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Connection created successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to create connection.</p>"
          }
        }
      }
    },
    "/connections/{connectionName}/wallet": {
      "put": {
        "tags": [
          "Global Connections"
        ],
        "summary": "Upload a connection wallet file",
        "description": "Upload a connection wallet file",
        "operationId": "GlobalConnections.wallets",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "connectionName",
            "in": "path",
            "description": "<p>Connection name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Return the wallet file location in catalog.</p>",
            "schema": {
              "$ref": "#/definitions/WalletLocation"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Unable to process wallet file.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/datasources": {
      "get": {
        "tags": [
          "Application Data Sources"
        ],
        "summary": "Get Application Data Sources",
        "description": "<p>Returns a list of application-level data sources, including details such as name, description, connection, and type.</p>",
        "operationId": "ApplicationDatasources.getDatasources",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of data sources to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of data sources to return. Default is 50.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of data sources returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DatasourcesList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get data sources.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Application Data Sources"
        ],
        "summary": "Create Application Data Source",
        "description": "<p>Creates an application-level data source based on specified inputs. <code>name</code>, <code>connection</code>, and <code>type</code> are required inputs for all types of data sources. Other required inputs differ based on the type of data source.</p>",
        "operationId": "ApplicationDatasources.createDatasource",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Data source details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data source created successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to create data source.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/datasources/{datasouceName}": {
      "get": {
        "tags": [
          "Application Data Sources"
        ],
        "summary": "Get Application Data Source",
        "description": "<p>Returns details about the specified application-level data source.</p>",
        "operationId": "ApplicationDatasources.getDatasourceDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "datasouceName",
            "in": "path",
            "description": "<p>Data source name</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data source details returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get data source details.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Application Data Sources"
        ],
        "summary": "Update Application Data Source",
        "description": "<p>Update the named application-level data source. If the update is successful, returns details about the updated data source. <code>type</code> and <code>connection</code> are required inputs for all types of data sources. Other required inputs differ based on the type of the data source.</p>",
        "operationId": "ApplicationDatasources.updateDatasource",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "datasouceName",
            "in": "path",
            "description": "<p>Data source name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Updated data source details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data source was updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to update the data source.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/datasources/{datasourceName}": {
      "delete": {
        "tags": [
          "Application Data Sources"
        ],
        "summary": "Delete Application Data Source",
        "description": "<p>Deletes the named application-level data source.</p>",
        "operationId": "ApplicationDatasources.deleteDatasource",
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "datasourceName",
            "in": "path",
            "description": "<p>Data source name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Data source was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to delete data source.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/datasources/query/stream": {
      "post": {
        "tags": [
          "Application Data Sources"
        ],
        "summary": "Get Streamed Data Source Results",
        "description": "<p>Returns results in stream from a application-level data source</p>",
        "operationId": "ApplicationDatasources.getDataStream",
        "produces": [
          "application/json",
          "text/plain",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "includeHeaders",
            "in": "query",
            "description": "<p>Include headers.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Query information.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DatasourceQueryInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Results fetched successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to stream results.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/datasources": {
      "get": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Get Global Data Sources",
        "description": "<p>Returns a list of global-level data sources, including details such as name, description, connection, and type.</p>",
        "operationId": "GlobalDatasources.getDatasources",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of data sources to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of data sources to return. Default is 50.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of data sources returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DatasourcesList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get data sources.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Create Global Data Source",
        "description": "<p>Creates a global-level data source based on specified inputs. <code>name</code>, <code>connection</code>, and <code>type</code> are required inputs for all types of data sources. Other required inputs differ based on the type of data source.</p>",
        "operationId": "GlobalDatasources.createDatasource",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Data source details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data source created successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to create data source.</p>"
          }
        }
      }
    },
    "/datasources/{datasouceName}": {
      "get": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Get Global Data Source",
        "description": "<p>Returns details about the specified global data source.</p>",
        "operationId": "GlobalDatasources.getDatasourceDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "datasouceName",
            "in": "path",
            "description": "<p>Data source name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data source details returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get data source details.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Update Global Data Source",
        "description": "<p>Update the named global-level data source. If the update is successful, returns details about the updated data source. <code>type</code> and <code>connection</code> are required inputs for all types of data sources. Other required inputs differ based on the type of the data source.</p>",
        "operationId": "GlobalDatasources.updateDatasource",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "datasouceName",
            "in": "path",
            "description": "<p>Data source name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Updated data source details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data source was updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Datasource"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to update the data source.</p>"
          }
        }
      }
    },
    "/datasources/{datasourceName}": {
      "delete": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Delete Global Data Source",
        "description": "<p>Deletes the named global-level data source.</p>",
        "operationId": "GlobalDatasources.deleteDatasource",
        "parameters": [
          {
            "name": "datasourceName",
            "in": "path",
            "description": "<p>Data source name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Data source was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to delete data source.</p>"
          }
        }
      }
    },
    "/datasources/query/stream": {
      "post": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Get Streamed Data Source Results",
        "description": "<p>Returns results in stream from a global-level data source.</p>",
        "operationId": "GlobalDatasources.getDataStream",
        "produces": [
          "application/json",
          "text/plain",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "includeHeaders",
            "in": "query",
            "description": "<p>Include headers.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Query information.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DatasourceQueryInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Results fetched successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to stream results.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/datasources/query/data/{streamId}": {
      "get": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Get Streamed Data Source Results",
        "description": "<p>Returns results from a global-level data source associated with the specified stream id.</p>",
        "operationId": "GlobalDatasources.getData",
        "produces": [
          "application/json",
          "text/plain",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "streamId",
            "in": "path",
            "description": "<p>Stream id.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Results fetched successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to stream results.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/datasources/query": {
      "post": {
        "tags": [
          "Global Data Sources"
        ],
        "summary": "Stream Data Source Results",
        "description": "<p>Returns column headers of the data source, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.</p>",
        "operationId": "GlobalDatasources.getResults",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Query information.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DatasourceQueryInfo"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "<p>Number of records to return. If not passed, all records are returned.</p>",
            "required": false,
            "type": "integer",
            "default": -1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Streaming information returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ResultBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get streaming information.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/reports": {
      "get": {
        "tags": [
          "Drill Through Reports"
        ],
        "summary": "Get Drill Through Reports",
        "description": "<p>Returns all the drill through reports from the specified application and database.</p>",
        "operationId": "DrillThroughReports.getReports",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The drill through reports were retrieved successfully. Returns the links to get, edit, or delete the reports.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the drill through reports. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Drill Through Reports"
        ],
        "summary": "Create Drill Through Report",
        "description": "<p>Creates a drill through report in the specified application and database, and returns details about the report.</p>",
        "operationId": "DrillThroughReports.create",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Drill through report details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrillthroughBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The drill through report was created successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DrillthroughBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to create the drill through report. The application or database name may be incorrect, or the report may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/reports/{name}": {
      "get": {
        "tags": [
          "Drill Through Reports"
        ],
        "summary": "Get Drill Through Report",
        "description": "<p>Returns the specified drill through report from the specified application and database.<p>",
        "operationId": "DrillThroughReports.getReport",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "<p>Drill through report name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The drill through report was retrieved successfully. Returns the links to get, edit, or delete the report.</p>",
            "schema": {
              "$ref": "#/definitions/DrillthroughBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the report. The application name, database name, or report name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Drill Through Reports"
        ],
        "summary": "Update Drill Through Reoprt",
        "description": "<p>Updates the drill through report in the specified application and database, and returns details of the updated report.</p>",
        "operationId": "DrillThroughReports.updateReport",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "<p>Drill through report name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Drill through report details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrillthroughBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The drill through report was updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DrillthroughBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the report. The application name, database name, or report name may be incorrect, or the specified report name may not exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Drill Through Reports"
        ],
        "summary": "Delete Drill Through Report",
        "description": "<p>Deletes the specified drill through report from the specified application and database.</p>",
        "operationId": "DrillThroughReports.delete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "<p>Drill through report name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The drill through report was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete the drill through report. The report name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/email/smtp": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get SMTP Configuration",
        "description": "<p>Returns SMTP server configuration details. SMTP is the protocol Essbase uses for sending e-mails related to scenario management workflow and approval.</p>",
        "operationId": "Email.getSMTPServerDetail",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The e-mail configuration was retrieved successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user must be a service administrator to execute this request.</p>"
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>The e-mail configuration is not present.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Add SMTP Configuration",
        "description": "<p>Configure SMTP e-mail server information. SMTP is the protocol Essbase uses for sending e-mails related to scenario management workflow and approval.</p>",
        "operationId": "Email.addSMTPDetails",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>SMTP server configuration details. Provide the host name, port, user e-mail address, and encoded password.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The e-mail configuration was updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ListLinkResponseObject"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user must be a service administrator to execute this request.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Delete SMTP Configuration",
        "description": "<p>Deletes the SMTP server configuration details. SMTP is the protocol Essbase uses to send e-mails related to scenario management workflow and approval.</p>",
        "operationId": "Email.deleteSMTPDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The e-mail configuration was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user must be a service administrator to execute this request.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/email/imap": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get IMAP Configuration",
        "description": "<p>Returns IMAP server configuration details. IMAP is the protocol used for receiving e-mails related to scenario management workflow and approval.</p>",
        "operationId": "Email.getIMAPServerDetail",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The e-mail configuration was retrieved successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user must be a service administrator to execute this request.</p>"
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>The e-mail configuration is not present.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Add IMAP Configuration",
        "description": "<p>Configure IMAP e-mail server information. IMAP is the protocol used for receiving e-mails related to scenario management workflow and approval.</p>",
        "operationId": "Email.addIMAPDetails",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>IMAP server configuration details. Provide the host name, port, user e-mail address, and encoded password.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The e-mail configuration was updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ListLinkResponseObject"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user must be a service administrator to execute this request.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Delete IMAP Configuration",
        "description": "<p>Deletes the IMAP server configuration details. IMAP is the protocol used for receiving e-mails related to scenario management workflow and approval.</p>",
        "operationId": "Email.deleteIMAPDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The e-mail configuration was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user must be a service administrator to execute this request.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/email": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get E-mail Configuration",
        "description": "<p>Returns a URL to access the saved SMTP and IMAP server details. SMTP is the protocol Essbase uses for sending e-mails related to scenario management. IMAP is the protocol for receiving e-mails.</p>",
        "operationId": "Email.getEmailLinks",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The e-mail configuration was retrieved successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ListLinkResponseObject"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user must be a service administrator to execute this request.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/excel/utils/dataformat": {
      "get": {
        "tags": [
          "Workbook Utilities"
        ],
        "summary": "Get Workbook Format",
        "description": "<p>Returns details about the application workbook: application name, cube name, and whether the workbook's format is structured or unstructured (tabular).</p>",
        "operationId": "ExcelUtilities.analyzeDataFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "<p>Catalog path of the workbook file.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The workbook information was retrieved successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the workbook details. The file path may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters": {
      "get": {
        "tags": [
          "Filters"
        ],
        "summary": "Get Filters",
        "description": "<p>Returns all the filters from the specified application and database.</p>",
        "operationId": "Filters.listFilters",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Filters were retrieved successfully. Returns filter details and links to get, edit, or delete the filters, and to get the filter rows.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get filters. The application name or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Filters"
        ],
        "summary": "Create Filter",
        "description": "<p>Creates the filter in the specified application and database and returns the created filter</p>",
        "operationId": "Filters.createFilter",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Filter details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Filter was created successfully. Returns filter details and links to get, edit, or delete the filter, and to get the filter rows.</p>",
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to create filter. The application name or database name may be incorrect, or the filter may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters/filterops/copy": {
      "post": {
        "tags": [
          "Filters"
        ],
        "summary": "Copy Filter",
        "description": "<p>Copies a filter in the specified application and database and returns the new filter.</p>",
        "operationId": "Filters.copyFilter",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Filter copy details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterCopy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The filter was copied successfully. Returns filter details and links to get, edit, or delete the filter, and to get the filter rows.</p>",
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to copy the filter. The application name, database name, or filter name may be incorrect, or a filter with the specified name already exists.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters/{filterName}": {
      "get": {
        "tags": [
          "Filters"
        ],
        "summary": "Get Filter",
        "description": "<p>Returns the named filter from the specified application and database.<p>",
        "operationId": "Filters.getFilter",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The filter was retrieved successfully, with links to get, edit, or delete the filter, and to get the filter rows.</p>",
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the filter. The application name, database name, or filter name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Filters"
        ],
        "summary": "Update Filter",
        "description": "<p>Updates the named filter in the specified application and database, and returns the updated filter.</p>",
        "operationId": "Filters.editFilter",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Filter details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The filter was updated successfully, with links to get, edit, or delete the filter, and to get the filter rows.</p>",
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the filter. The application name, database name, or filter name may be incorrect, or the named filter may not exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Filters"
        ],
        "summary": "Delete Filter",
        "description": "<p>Deletes the named filter in the specified application and database.</p>",
        "operationId": "Filters.deleteFilter",
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The filter was deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete the filter. The application name, database name, or filter name may be incorrect, or the named filter may not exist.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters/{filterName}/permissions": {
      "get": {
        "tags": [
          "Filters"
        ],
        "summary": "Get Permissions",
        "description": "<p>Retrieves permissions associated with the named filter.</p>",
        "operationId": "Filters.getFilterPermissions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The filter permissions were retrieved successfully.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroupProvisionInfoList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the filter permissions. The application name, database name, or filter name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Filters"
        ],
        "summary": "Add Permissions",
        "description": "<p>Adds permissions, in the named filter, for the named user or group.</p>",
        "operationId": "Filters.addFilterPermission",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>User or group details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The filter permissions were added successfully.</p>",
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to add the filter permissions. The application name, database name, filter name, or user or group name may be incorrect, or the specified user or group may not have enough privileges.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Filters"
        ],
        "summary": "Edit Permissions",
        "description": "<p>Replaces all the users and groups assigned to the filter with a new list of users and groups.</p>",
        "operationId": "Filters.replaceFilterPermission",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>User or group details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfoList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The filter permissions were edited successfully.</p>",
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to modify the filter permissions. The application name, database name, filter name, or user or group name may be incorrect, or the specified user or group may not have enough privileges.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters/{filterName}/permissions/{userGroupId}": {
      "delete": {
        "tags": [
          "Filters"
        ],
        "summary": "Delete Permission",
        "description": "<p>Removes permissions from a filter for the specified user or group.</p>",
        "operationId": "Filters.removeFilterPermission",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "<p>User or group ID.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "<p>True if the userGroupId refers to a group; false if it refers to a user.</p>",
            "required": true,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>The permission was removed successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to remove permission from the filter. An input parameter may have been specified incorrectly.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters/filterops/rename": {
      "post": {
        "tags": [
          "Filters"
        ],
        "summary": "Rename Filter",
        "description": "Renames the filter in the specified application and database and returns the created filter",
        "operationId": "Filters.renameFilter",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Filter rename details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterCopy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Filter was renamed successfully. Returns filter details and links to get, edit, or delete the filter, and to get the filter rows.</p>",
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to rename filter. The application name or database name may be incorrect, or a filter with that name may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters/filterops/validate": {
      "post": {
        "tags": [
          "Filters"
        ],
        "summary": "Validate Filter",
        "description": "<p>Validates the filter in the specified application and database.</p>",
        "operationId": "Filters.validateFilter",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Filter details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The filter was validated successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to validate the filter. The application name or database name may be incorrect, or the filter rows may be incomplete."
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/filters/{filterName}/rows": {
      "get": {
        "tags": [
          "Filters"
        ],
        "summary": "Get Filter Rows",
        "description": "<p>Returns the access definition rows from the specified filter.</p>",
        "operationId": "Filters.getFilterRows",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "<p>Filter name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Filter rows were retrieved successfully.</p>",
            "schema": {
              "$ref": "#/definitions/FilterRowList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get filter rows. The application name, database name, or filter name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{id}/members/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get groups of group",
        "description": "Get group members of a group",
        "operationId": "Groups.getGroupMembersOfGroup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>ID of group.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of group members of a group",
            "schema": {
              "$ref": "#/definitions/Groups"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add groups to group",
        "description": "Add multiple group members to a group",
        "operationId": "Groups.addGroupMembersToGroup",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>ID of group.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Array of group ID</p>",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Group updated successfully. Returns link to get group members of a group</p>",
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{id}/members/users": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get users of group",
        "description": "Get user members of a group",
        "operationId": "Groups.getUserMembersOfGroup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>ID of group.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of user members of a group",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add users to group",
        "description": "Add multiple user members to a group",
        "operationId": "Groups.addUserMembersToGroup",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>ID of group.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Array of user ID</p>",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Group updated successfully. Returns link to get user members of a group</p>",
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/actions/delete": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete the groups specified in the text file",
        "description": "Delete the groups specified in the text file",
        "operationId": "Users.deleteGroups",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          "400": {
            "description": "Validation fails. For example, logged in user doesn't have appropriate service role"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group",
        "description": "<p>Get group details.</p>",
        "operationId": "Groups.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>Group ID.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p>Group details</p>",
            "schema": {
              "$ref": "#/definitions/GroupBean"
            }
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>The group with that ID does not exist.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Update a group.",
        "operationId": "Groups.edit",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>ID of group.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Group details to update.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Group updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/GroupBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Delete a group.",
        "operationId": "Groups.delete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of group.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>No Content</strong></p><p>Group deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Search or Export Groups",
        "description": "<p>Get a list of groups based on search results, or export groups as CSV file.</p>",
        "operationId": "Groups.search",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "<p>Group ID wildcard pattern. Filter by name of groups if header <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of groups to return, if header <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>.</p>",
            "required": false,
            "type": "integer",
            "default": -1,
            "format": "int32"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Value can be <code>all</code> or <code>none</code>. Default value is <code>all</code>, meaning service role and parent groups are returned for each group. If <code>none</code> is specified, service role and parent groups are not returned.</p>",
            "required": false,
            "type": "string",
            "default": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of groups matching search criteria. Response type can be either JSON, XML, or CSV stream, depending on the Accept header. If <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>, the search result is returned in the response. If <code>Accept='application/octet-stream'</code>, search result is returned as stream (not shown due to a Swagger limitation).</p>",
            "schema": {
              "$ref": "#/definitions/Groups"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add or Import Group(s)",
        "description": "Add/Import group(s)",
        "operationId": "Groups.add",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Group details to add group if header Content-Type='application/json' or 'application/xml' else CSV file to import group(s) if header Content-Type='application/octet-stream'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group added successfully. If Content-Type='application/json' or 'application/xml', then result will be returned in group added successfully as shown below else in case of Content-Type='application/octet-stream', result will be returned as group imported successfully, which is not shown due to a Swagger limitation.",
            "schema": {
              "$ref": "#/definitions/GroupBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Logged in user may not have appropriate permissions.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{id}/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Group members",
        "description": "List links to get user and group members of a group",
        "operationId": "Groups.getMembers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>ID of group.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return links to get user and group members of a group",
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get Job",
        "description": "Returns the job information for job ID passed. Informations like job status, job type, job input info, job output info are returned",
        "operationId": "Jobs.getJobInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns complete job information for the job id specified.",
            "schema": {
              "$ref": "#/definitions/JobRecordBean"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          },
          "503": {
            "description": "<p><strong>Service Unavailable</strong></p><p>Naming exception or server exception.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Rerun Job",
        "description": "Rerun the job and returns the job information with new job ID currently executing",
        "operationId": "Jobs.executeByJobId",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the information for newly created Job ID",
            "schema": {
              "$ref": "#/definitions/JobRecordBean"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          },
          "503": {
            "description": "<p><strong>Service Unavailable</strong></p><p>Naming exception or server exception. Job ID is incorrect or invalid.</p>"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get Job List",
        "description": "Returns the list of jobs for the query parameters provided. Informations like job status, job type, job input info, job output info are returned",
        "operationId": "Jobs.getAllJobRecords",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "description": "keyword to filter job records on ID, Script, database or user",
            "required": false,
            "type": "string"
          },
          {
            "name": "fullAppName",
            "in": "query",
            "description": "application name for which job records to retrieved",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order By",
            "required": false,
            "type": "string",
            "default": "job_ID:desc"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of jobs to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of jobs to fetch. Default is 20.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int64"
          },
          {
            "name": "systemjobs",
            "in": "query",
            "description": "<p>Include backup jobs in jobs records.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p>Returns the job records for specified query parameter provided. If no query parameter is specified, returns a list of all the jobs.</p>",
            "schema": {
              "$ref": "#/definitions/JobRecordPaginatedResultWrapper"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          },
          "503": {
            "description": "<p><strong>Service Unavailable</strong></p><p>Naming exception or server exception.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Execute Job",
        "description": "<p>Execute the job and return the record containing job information, such as job ID, status, inputs, and output information for the current job.</p>",
        "operationId": "Jobs.executeJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "parameter provided as json string in the request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobsInputBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request for job exceution submitted successfully and job started successfully. Returns job information in response.",
            "schema": {
              "$ref": "#/definitions/JobRecordBean"
            }
          },
          "400": {
            "description": "1. Application does not exits. If the 'application' parameter value is wrong.<p>2. Database does not exist. If 'db' parameter value is wrong.</p><p>3. NULL argument (3) passed to ESSAPI function EssGetObjectInfo</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          },
          "503": {
            "description": "<p><strong>Service Unavailable</strong></p><p>Naming exception or server exception.</p>"
          }
        }
      }
    },
    "/jobs/statistics/{userId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get Job Statistics",
        "description": "Returns the jobs statistics with the userid (logged in). Informations like below <p>1. no of error jobs.</p><p>2. no of successful jobs.</p><p>3. no of jobs with warnings.</p><p>4. no of running jobs</p>",
        "operationId": "Jobs.getJobStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id of the logged in user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns jobs statistics.",
            "schema": {
              "$ref": "#/definitions/JobStatisticsBean"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          },
          "503": {
            "description": "Naming Exception or Server Exception"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locationaliases": {
      "get": {
        "tags": [
          "Location aliases"
        ],
        "summary": "Get location alias details",
        "description": "Get location alias details",
        "operationId": "LocationAliases.getLocationAliases",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to skip before starting to collect the result set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of location aliases to be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "Location alias target server name",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Location alias target application name",
            "required": false,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "query",
            "description": "Location alias target database name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns location alias details successfully",
            "schema": {
              "$ref": "#/definitions/LocationAliasList"
            }
          },
          "400": {
            "description": "Failed to get location alias details"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Location aliases"
        ],
        "summary": "Create location alias",
        "description": "Creates new location alias in the given application and database",
        "operationId": "LocationAliases.create",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Location alias details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationAliasBean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location alias created successfully"
          },
          "400": {
            "description": "Failed to create location alias"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}": {
      "get": {
        "tags": [
          "Location aliases"
        ],
        "summary": "Get location alias details",
        "description": "Returns the details of the given location alias name",
        "operationId": "LocationAliases.getLocationAlias",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "name": "aliasName",
            "in": "path",
            "description": "Location alias name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns location alias details successfully",
            "schema": {
              "$ref": "#/definitions/LocationAliasBean"
            }
          },
          "400": {
            "description": "Failed to get location alias details"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Location aliases"
        ],
        "summary": "Deletes location alias",
        "description": "Deletes the location alias with the given name from the application and database",
        "operationId": "LocationAliases.delete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "name": "aliasName",
            "in": "path",
            "description": "Location alias name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted location alias successfully"
          },
          "400": {
            "description": "Failed to delete location alias"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Location aliases"
        ],
        "summary": "Update location alias",
        "description": "Updates location alias with new application and database. Not suupported when location alias is defined across essbase instances",
        "operationId": "LocationAliases.update",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "name": "aliasName",
            "in": "path",
            "description": "Location alias name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Location alias details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationAliasBean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Updated location alias successfully"
          },
          "400": {
            "description": "Failed to update location alias"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locks/objects": {
      "get": {
        "tags": [
          "Locks"
        ],
        "summary": "List Locked Objects",
        "description": "Returns all the locked objects from the specified application and database.",
        "operationId": "Locks.getLockedObjects",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of items to omit from the start of the result set. Default value is 0.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of objects to return. Default is 50.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Locked objects retrieved successfully. Gives the details of locked objects along with the links to lock/unlock the object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockObjectList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the locked objects. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locks": {
      "get": {
        "tags": [
          "Locks"
        ],
        "summary": "List Locks",
        "description": "Returns links for locked objects and locked blocks from the specified application and database.",
        "operationId": "Locks.getLocks",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p>Locks listed successfully, including links to unlock.</p>",
            "schema": {
              "$ref": "#/definitions/LockObject"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locks/objects/unlock": {
      "post": {
        "tags": [
          "Locks"
        ],
        "summary": "Unlock Object",
        "description": "Unlocks the object in the specified application and database",
        "operationId": "Locks.unLockObject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Details about object to be unlocked.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LockObject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Object unlocked successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to unlock the object. The application, database, or object name may be incorrect, or the object type may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locks/blocks": {
      "get": {
        "tags": [
          "Locks"
        ],
        "summary": "List Locked Blocks",
        "description": "Returns all the locked blocks from the specified application and database.",
        "operationId": "Locks.getLockedBlocks",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of items to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of blocks to return. Default is 50.",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p>Locked blocks returned successfully, including details of locked blocks and links to unlock the objects.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockBlockList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the locked blocks. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locks/blocks/unlock": {
      "post": {
        "tags": [
          "Locks"
        ],
        "summary": "Unlock Block",
        "description": "Unlocks the locked block in the specified application and database.",
        "operationId": "Locks.unLockBlock",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Block details to be unlocked",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LockBlock"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Block is unlocked successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the settings. The application or database name may be incorrect, or the JSON for the username in the block details may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/locks/objects/lock": {
      "post": {
        "tags": [
          "Locks"
        ],
        "summary": "Lock Object",
        "description": "Locks the object in the specified application and database and returns the details of the locked object",
        "operationId": "Locks.lockObject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Object details to be locked",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LockObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object is locked successfully. Gives the details of locked object along with the links to lock/unlock the object",
            "schema": {
              "$ref": "#/definitions/LockObject"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to lock the object. The application, database, or object name may be incorrect, or the object type may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/logs/all": {
      "get": {
        "tags": [
          "Application logs"
        ],
        "summary": "Download All Logs",
        "description": "Returns or download zip file which contains all log files for the specific application",
        "operationId": "ApplicationLogs.downloadAllLogFiles",
        "produces": [
          "application/zip",
          "application/octet-stream",
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Name of the application",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Logs returned successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to return logs.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/logs/latest": {
      "get": {
        "tags": [
          "Application logs"
        ],
        "summary": "Download Latest Log",
        "description": "<p>Downloads the latest application log file as a text file.</p>",
        "operationId": "ApplicationLogs.downloadLatestLogFile",
        "produces": [
          "application/octet-stream",
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Name of the application.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Log file returned successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to return log file.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/logs": {
      "get": {
        "tags": [
          "Application logs"
        ],
        "summary": "Download Logs",
        "description": "<p>Returns links to download all log files as a zip file, and to download the latest log file.</p>",
        "operationId": "ApplicationLogs.downloadAppLogFiles",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Name of the application.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of URI links returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to return downloadable log files.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/about": {
      "get": {
        "tags": [
          "About Essbase"
        ],
        "summary": "About Essbase",
        "description": "<p>Returns description, build, and version of Essbase.</p>",
        "operationId": "About.getAbout",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/About"
            }
          }
        }
      }
    },
    "/about/instance": {
      "get": {
        "tags": [
          "About Essbase"
        ],
        "operationId": "getInstanceDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/applications/actions/copy": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Copy Application",
        "description": "Copies application. User need to provide source and destination application name.",
        "operationId": "Applications.copyApplication",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Source and destination application information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyRenameBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application copied successfully."
          },
          "400": {
            "description": "Failed to copy application."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/actions/copy": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Copy Database",
        "description": "Copies database. User need to provide source and destination application and database name.",
        "operationId": "Applications.copyDatabase",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Source application name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Source and destination database information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CubeCopy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Database copied successfully."
          },
          "400": {
            "description": "Failed to copy database."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/actions/rename": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Rename application",
        "description": "Renames application. User need to provide source and destination application name.",
        "operationId": "Applications.renameApplication",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Source and destination application information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyRenameBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application renamed successfully."
          },
          "400": {
            "description": "Fails to rename application."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/actions/rename": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Rename database",
        "description": "Renames database. User need to provide source and destination database name. Destination application name is not required",
        "operationId": "Applications.renameDatabase",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Source application name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Source and destination database information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyRenameBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Database renamed successfully."
          },
          "400": {
            "description": "Fails to rename database."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/calculationFunctions": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Calculation Functions",
        "description": "Return list of common and database specific calculation functions",
        "operationId": "Databases.getCalculationFunctions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return XML or JSON string containing list of calculation functions",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/mdxFunctions": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get MDX Functions",
        "description": "Return list of MDX functions",
        "operationId": "Databases.getMdxFunctions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return XML or JSON string containing list of MDX functions",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Database",
        "description": "Returns details of database with specified database name and application name.",
        "operationId": "Applications.getCube",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns database details.",
            "schema": {
              "$ref": "#/definitions/Cube"
            }
          },
          "400": {
            "description": "Failed to get database."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Start or Stop Database",
        "description": "Performs specified action on specified application and database. Valid actions are 'Start' and 'Stop'",
        "operationId": "Applications.performDbOperation",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Action performed successfully."
          },
          "400": {
            "description": "Failed to perform action."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete Database",
        "description": "Delete database with specified name.",
        "operationId": "Applications.deleteDatabase",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p>Database deleted successfully.</p>"
          },
          "400": {
            "description": "<p>Failed to delete database.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Databases",
        "description": "Returns the list of databases. Connection name and application name to list databases are optional parameters.  If user provides connection, connection created at specified application will be used to fetch databases.",
        "operationId": "Applications.getCubes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectionName",
            "in": "query",
            "description": "<p>Connection name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationNameForConnection",
            "in": "query",
            "description": "Application name to list databases",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns databases list.",
            "schema": {
              "$ref": "#/definitions/CubeList"
            }
          },
          "400": {
            "description": "Failed to get databases."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application",
        "description": "Returns details of application with specified name.",
        "operationId": "Applications.getApplication",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "description": "<p>Role.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns application details.",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "400": {
            "description": "Failed to get application."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Start or Stop Application",
        "description": "Performs specified action on specified application. Valid actions are 'Start' and 'Stop'",
        "operationId": "Applications.performOperation",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Action performed successfully."
          },
          "400": {
            "description": "Failed to perform action."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete Application",
        "description": "Delete application with specified name.",
        "operationId": "Applications.deleteApplication",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p>Application deleted successfully.</p>"
          },
          "400": {
            "description": "<p>Failed to delete application.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/provisionReport": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Application Provisioning Report",
        "description": "Gets provisioning report at specified application for all the users and groups having at least one application role(direct/inherited through groups)",
        "operationId": "Applications.getApplicationProvisionReport",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Provisioning report as excel stream  at specified application for all the users and groups having at least one application role(direct/inherited through groups). Logged in user should have at least 'Database Manager' role for specified application to invoke this API. Application roles will be included only when logged in user has 'Application Manager' role for specified application."
          },
          "400": {
            "description": "Validation fails. For example, logged in user doesn't have appropriate application role"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Applications",
        "description": "<p>Returns the list of Essbase applications. Connection name and  application name for connection are optional parameters.</p> <p>If you provide only a connection name with no application name, this API fetches all applications using that named connection.</p> <p>If you provide a connection name and application name, this API fetches the specified applications using the specified connection.</p> <p>Use the <code>fields</code> parameter to return only required fields.</p> <p>Limitation: If application status is required in response, limit must be <= 100.</p>",
        "operationId": "Applications.getApplications",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "*"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of applications to omit from the start of the result set. Default value is 0.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of applications to return. Default is 50.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          },
          {
            "name": "connectionName",
            "in": "query",
            "description": "<p>Connection name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationNameForConnection",
            "in": "query",
            "description": "Application name for connection",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to be returned in response fields. This query parameter is used to specify what fields should be returned. If not field is provided, it will return all fields.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns applications list. ",
            "schema": {
              "$ref": "#/definitions/ApplicationList"
            }
          },
          "400": {
            "description": "Failed to get applications."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Application",
        "description": "Create application with specified details.",
        "operationId": "Applications.createApplications",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Application details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApplication"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application created successfully."
          },
          "400": {
            "description": "Failed to create application."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/formulaFunctions": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get functions list for formula editor",
        "description": "Return list of MDX functions for ASO cube and Calculation functions for BSO cube",
        "operationId": "Databases.formulaFunctions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return XML or JSON string containing list of MDX functions or Calculation functions",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/applications/actions/tree": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get the list of applications and databases in a tree view",
        "description": "Get the list of applications and databases in a tree view",
        "operationId": "Applications.getApplicationsTree",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK, Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/aliases/setActiveAlias": {
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "List Aliases",
        "description": "<p>Returns alias tables associated with the specified application and database.</p>",
        "operationId": "Applications.setAliases",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "aliasTableName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns aliases.",
            "schema": {
              "$ref": "#/definitions/StringCollectionResponse"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/aliases/getActiveAlias": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Aliases",
        "description": "<p>Returns alias tables associated with the specified application and database.</p>",
        "operationId": "Applications.getActiveAlias",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns aliases.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/aliases": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Aliases",
        "description": "<p>Returns alias tables associated with the specified application and database.</p>",
        "operationId": "Applications.getAliases",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns aliases.",
            "schema": {
              "$ref": "#/definitions/StringCollectionResponse"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/audittrail/data": {
      "get": {
        "tags": [
          "Audit Trail"
        ],
        "summary": "Get Audit Data",
        "description": "<p>Returns audit trail data in CSV string format if <code>Accept='text/csv'</code> or <code>Accept='text/plain'</code>. If <code>Accept='application/octet-stream'</code>, returns audit data as a CSV stream to download. If <code>Accept='application/json'</code>, returns the audit data list in JSON format.<p>",
        "operationId": "AuditTrail.getDataAudit",
        "produces": [
          "text/plain",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Audit trail data returned successfully.</p>",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to return audit data.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Audit Trail"
        ],
        "summary": "Delete Audit Data",
        "description": "<p>Deletes audit trail data older than the specified time.</p>",
        "operationId": "AuditTrail.purge",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "olderthan",
            "in": "query",
            "description": "<p>Time in milliseconds.</p>",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>OK</strong></p><p>Audit data deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to delete audit data.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/audittrail/metadata": {
      "get": {
        "tags": [
          "Audit Trail"
        ],
        "summary": "Get Audit Metadata",
        "description": "<p>Returns audit metadata in CSV string format if <code>Accept='text/csv'</code> or <code>Accept='text/plain'</code>. If <code>Accept='application/octet-stream'</code>, returns audit metadata as a CSV stream to download. If <code>Accept='application/json'</code>, returns the audit metadata list in JSON format.</p>",
        "operationId": "AuditTrail.getMetadataAudit",
        "produces": [
          "text/plain",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Audit trail metadata returned successfully.</p>",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to return audit metadata.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Audit Trail"
        ],
        "summary": "Delete Audit Metadata",
        "description": "<p>Deletes audit trail metadata older than the specified time.</p>",
        "operationId": "AuditTrail.purgeMetadataAudit",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "olderthan",
            "in": "query",
            "description": "<p>Time in milliseconds.</p>",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>OK</strong></p><p>Audit metadata deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to delete audit metadata.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/boe": {
      "post": {
        "tags": [
          "Batch Outline Editing"
        ],
        "summary": "Run Batch Outline Edit",
        "description": "<p>Executes batch outline editing process. Based on the XML or JSON body, adds or removes members from the outline in the active cube.</p>",
        "operationId": "BatchOutlineEditing.execute",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Batch outline JSON/XML",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OtlEditMain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>The batch outline edit completed successfully.</p>",
            "schema": {
              "$ref": "#/definitions/BOEOutput"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to complete batch outline editing. The output may be invalid, the sequence of metadata operations may be incorrect, or saving the outline may have failed.</p>"
          }
        }
      }
    },
    "/databasesizestatistics": {
      "get": {
        "tags": [
          "Database Size Statistics"
        ],
        "summary": "Get Database Size Statistics",
        "description": "<p>Returns a list of databases and their page and index sizes.</p>",
        "operationId": "DatabaseSizeStatistics.getDBSizes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Database size statistics returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DBSizeList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get database size statistics.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimensions": {
      "get": {
        "tags": [
          "Dimensions"
        ],
        "summary": "List Dimensions",
        "description": "Returns all the dimensions from the specified application and database",
        "operationId": "Dimensions.listDimensions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Dimensions are retrieved successfully. Gives the dimension details along with the links to get the generations and levels of each dimension",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DimensionList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the dimensions. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations": {
      "get": {
        "tags": [
          "Dimensions"
        ],
        "summary": "List Generations",
        "description": "Returns all the generations of a dimension from the specified application and database",
        "operationId": "Dimensions.listDimGenerations",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "dimensionName",
            "in": "path",
            "description": "<p>Dimension name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Generations are retrieved successfully. Gives all generation details of a dimension along with the links to get/edit each generation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenerationLevelList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the generations. The application, database, or dimension name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels": {
      "get": {
        "tags": [
          "Dimensions"
        ],
        "summary": "List Levels",
        "description": "Returns all the levels of a dimension from the specified application and database",
        "operationId": "Dimensions.listDimLevels",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "dimensionName",
            "in": "path",
            "description": "<p>Dimension name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Levels are retrieved successfully. Gives all level details of a dimension along with the links to get/edit each level",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenerationLevelList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the levels. The application, database, or dimension name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations/{generationNumber}": {
      "get": {
        "tags": [
          "Dimensions"
        ],
        "summary": "Get Generation",
        "description": "<p>Returns generation details of a dimension, based on the specified generation number, application, and database.</p>",
        "operationId": "Dimensions.getDimGenerations",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "dimensionName",
            "in": "path",
            "description": "<p>Dimension name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "generationNumber",
            "in": "path",
            "description": "<p>Generation number.</p>",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Generation details returned successfully, including links to get or edit the generation.</p>",
            "schema": {
              "$ref": "#/definitions/GenerationLevel"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get generation. The application name, database name, dimension name, or generation number may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Dimensions"
        ],
        "summary": "Update Generation",
        "description": "<p>Updates and returns generation details of a dimension, based on the specified generation number, application, and database.</p>",
        "operationId": "Dimensions.editDimGenerations",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "dimensionName",
            "in": "path",
            "description": "<p>Dimension name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "generationNumber",
            "in": "path",
            "description": "<p>Generation number.</p>",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Generation details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenerationLevel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Generation details updated successfully, including links to get or edit the generation.</p>",
            "schema": {
              "$ref": "#/definitions/GenerationLevel"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the generation. The application name, database name, dimension name, or generation number may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels/{levelNumber}": {
      "get": {
        "tags": [
          "Dimensions"
        ],
        "summary": "Get Level",
        "description": "<p>Returns level details of a dimension, based on the specified level number, application, and database.</p>",
        "operationId": "Dimensions.getDimLevels",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "dimensionName",
            "in": "path",
            "description": "<p>Dimension name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "levelNumber",
            "in": "path",
            "description": "<p>Level number.</p>",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Level details returned successfully, including links to get or edit the level.</p>",
            "schema": {
              "$ref": "#/definitions/GenerationLevel"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get level. The application name, database name, dimension name, or level number may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Dimensions"
        ],
        "summary": "Update Level",
        "description": "<p>Updates and returns level details of a dimension, based on the specified level number, application, and database.</p>",
        "operationId": "Dimensions.editDimLevels",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "dimensionName",
            "in": "path",
            "description": "<p>Dimension name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "levelNumber",
            "in": "path",
            "description": "<p>Level number.</p>",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Level details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenerationLevel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Level details updated successfully, including links to get or edit the level.</p>",
            "schema": {
              "$ref": "#/definitions/GenerationLevel"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the level. The application name, database name, dimension name, or level  number may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/urls": {
      "get": {
        "tags": [
          "URLs"
        ],
        "summary": "Get Essbase URLs",
        "description": "Returns the list of available Essbase URLs",
        "operationId": "URLs.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Preference"
            }
          }
        }
      }
    },
    "/filescanner/actions/validate": {
      "post": {
        "tags": [
          "File Scanner"
        ],
        "summary": "Validate Antivirus",
        "description": "Validate the antivirus details",
        "operationId": "FileScanner.validate",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Anti virus details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AVClientInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Failed to validate the antivirus details"
          }
        }
      }
    },
    "/filescanner": {
      "get": {
        "tags": [
          "File Scanner"
        ],
        "summary": "Get Antivirus",
        "description": "Returns the current antivirus details",
        "operationId": "FileScanner.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/AVClientInfo"
            }
          },
          "400": {
            "description": "Failed to get the antivirus details"
          }
        }
      },
      "put": {
        "tags": [
          "File Scanner"
        ],
        "summary": "Set Antivirus",
        "description": "Set the antivirus details for scanning files",
        "operationId": "FileScanner.set",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Antivirus details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AVClientInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/AVClientInfo"
            }
          },
          "400": {
            "description": "Failed to set the antivirus details"
          }
        }
      },
      "delete": {
        "tags": [
          "File Scanner"
        ],
        "summary": "Delete Antivirus",
        "description": "Removes the antivirus details for scanning files",
        "operationId": "FileScanner.delete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/AVClientInfo"
            }
          },
          "400": {
            "description": "Failed to detete the antivirus details"
          }
        }
      }
    },
    "/session/password": {
      "put": {
        "tags": [
          "User Session"
        ],
        "summary": "Reset Password.",
        "description": "Reset the password.",
        "operationId": "UserSession.resetPassword",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset password is successful."
          },
          "400": {
            "description": "Reset password failed."
          }
        }
      }
    },
    "/session": {
      "get": {
        "tags": [
          "User Session"
        ],
        "summary": "Get Session",
        "description": "Returns logged in user information.",
        "operationId": "UserSession.getSession",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns logged in user information.",
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          },
          "400": {
            "description": "Fails to get user information."
          }
        }
      },
      "delete": {
        "tags": [
          "User Session"
        ],
        "summary": "Logout Session",
        "description": "Deactivates current session.",
        "operationId": "UserSession.signoff",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Session deactivation is successful."
          },
          "400": {
            "description": "Session deactivation Failed."
          }
        }
      }
    },
    "/utilities": {
      "get": {
        "tags": [
          "Templates and Utilities"
        ],
        "summary": "List Utilities",
        "description": "Returns available utilities. For example: Export Utility, Smart View for Essbase.",
        "operationId": "Resources.getUtilities",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns available utilities.",
            "schema": {
              "$ref": "#/definitions/ResourceList"
            }
          },
          "400": {
            "description": "Failed to get utilities."
          }
        }
      }
    },
    "/utilities/{id}": {
      "get": {
        "tags": [
          "Templates and Utilities"
        ],
        "summary": "Download Utility",
        "description": "Returns utility with specified id as stream.",
        "operationId": "Resources.downloadUtility",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the utility",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Utility with specified id found."
          },
          "400": {
            "description": "Failed to download utility with specified id."
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/asodataload/buffers": {
      "get": {
        "tags": [
          "ASO Load buffers"
        ],
        "summary": "List Buffers",
        "description": "<p>Lists existing load buffers. This would return an error when called on a BSO database.</p>",
        "operationId": "ASOLoadBuffers.listBuffers",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns load buffers list. ",
            "schema": {
              "$ref": "#/definitions/LoadBuffersList"
            }
          },
          "400": {
            "description": "Failed to get load buffers."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "ASO Load buffers"
        ],
        "summary": "Create buffer",
        "description": "<p>Creates ASO load buffer with specified options.</p>",
        "operationId": "ASOLoadBuffers.createBuffer",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataLoadBuffer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Load buffer created successfully. "
          },
          "400": {
            "description": "Failed to create load buffer."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/asodataload/actions/merge": {
      "post": {
        "tags": [
          "ASO Load buffers"
        ],
        "summary": " Merges ASO database data.",
        "description": "<p>Merges ASO database data. Merges incremental slices with the main slice.</p>",
        "operationId": "ASOLoadBuffers.merge",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeSilceOption"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data merged created successfully. "
          },
          "400": {
            "description": "Failed to merge data."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/preferences/grid": {
      "get": {
        "tags": [
          "Grid Preferences"
        ],
        "summary": "Get Grid Preferences",
        "description": "Api returns the grid preference from session.",
        "operationId": "GridPreferences.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Grid Preferences",
            "schema": {
              "$ref": "#/definitions/Preferences"
            }
          },
          "400": {
            "description": "Validation failed. For example, Invalid session."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Grid Preferences"
        ],
        "summary": "Set Grid Preferences",
        "description": "Api store the preferences in current session.",
        "operationId": "GridPreferences.set",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Preference to be store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Preferences"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "Validation failed. For example, Invalid session."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/grid/mdx": {
      "post": {
        "tags": [
          "Grid"
        ],
        "summary": "Execute MDX Query",
        "description": "Returns an output grid from the specified MDX query.",
        "operationId": "Grid.executeMDX",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name for grid.",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database/Cube name for grid.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "MDX query for grid",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MDXOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resultant Grid",
            "schema": {
              "$ref": "#/definitions/Grid"
            }
          },
          "400": {
            "description": "Validation failed. For example, database name not present or applicaion name not present."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/grid/layout": {
      "post": {
        "tags": [
          "Grid"
        ],
        "summary": "Get Layout Grid",
        "description": "Returns the layout grid for the current grid to be saved as layout for the specified cube.",
        "operationId": "Grid.getLayoutGrid",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name for default grid",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database/Cube name for default grid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The current grid displayed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Grid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Layout Grid",
            "schema": {
              "$ref": "#/definitions/Grid"
            }
          },
          "400": {
            "description": "Validation failed. For example, database name not present or applicaion name not present."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dvgrid": {
      "post": {
        "tags": [
          "Grid"
        ],
        "summary": "Execute Grid Operation",
        "description": "<p>Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).</p>",
        "operationId": "Grid.executeDV",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name for grid",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database/Cube name for grid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Grid Operation to be performed.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DVGrid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resultant Grid",
            "schema": {
              "$ref": "#/definitions/Grid"
            }
          },
          "400": {
            "description": "Validation failed. For example, database name not present or applicaion name not present."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/grid/layout/{layout}": {
      "get": {
        "tags": [
          "Grid"
        ],
        "summary": "Execute Layout Grid",
        "description": "Returns the grid for the specified layout.",
        "operationId": "Grid.executeLayout",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name for layout grid",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database/Cube name for layout grid",
            "required": true,
            "type": "string"
          },
          {
            "name": "layout",
            "in": "path",
            "description": "Layout name to be executed",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "query",
            "description": "Owner of the layout",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Layout Grid",
            "schema": {
              "$ref": "#/definitions/Grid"
            }
          },
          "400": {
            "description": "Validation failed. For example, database name not present or applicaion name not present."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/grid": {
      "get": {
        "tags": [
          "Grid"
        ],
        "summary": "Get Default Grid",
        "description": "Returns the default grid from Essbase for the specified cube.",
        "operationId": "Grid.getDefault",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name for default grid",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database/Cube name for default grid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Grid",
            "schema": {
              "$ref": "#/definitions/Grid"
            }
          },
          "400": {
            "description": "Validation failed. For example, database name not present or applicaion name not present."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Grid"
        ],
        "summary": "Execute Grid Operation",
        "description": "<p>Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).</p>",
        "operationId": "Grid.execute",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name for grid",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database/Cube name for grid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Grid Operation to be performed.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GridOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resultant Grid",
            "schema": {
              "$ref": "#/definitions/Grid"
            }
          },
          "400": {
            "description": "Validation failed. For example, database name not present or applicaion name not present."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/performance/settings": {
      "get": {
        "tags": [
          "Performance Analyzer"
        ],
        "summary": "Get the performance analyzer settings",
        "description": "Get the performance analyzer settings",
        "operationId": "Performance.getConfig",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPA"
            }
          },
          "400": {
            "description": "Bad Request. Failed to return performacne analyzer settings."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "Performance Analyzer"
        ],
        "summary": "Set the performance analyzer settings",
        "description": "Set the performance analyzer settings",
        "operationId": "Performance.setConfig",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Config parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HPA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPA"
            }
          },
          "400": {
            "description": "Bad Request. Failed to store performacne analyzer settings."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/performance/files": {
      "get": {
        "tags": [
          "Performance Analyzer"
        ],
        "summary": "Get the performance analyzer files",
        "description": "Get the performance analyzer files",
        "operationId": "Performance.getFiles",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PerformanceFiles"
            }
          },
          "400": {
            "description": "Bad Request. Failed to get the performacne analyzer files."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "tags": [
          "Performance Analyzer"
        ],
        "summary": "Delete all the performance analyzer files.",
        "description": "Delete all the performance analyzer files.",
        "operationId": "Performance.deleteall",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          "400": {
            "description": "Bad Request. Failed to delete performance analyzer files."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/performance/files/{file}": {
      "get": {
        "tags": [
          "Performance Analyzer"
        ],
        "summary": "Get the specified performance analyzer file.",
        "description": "Get the specified performance analyzer file.",
        "operationId": "Performance.download",
        "produces": [
          "application/octet-stream",
          "text/html"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "path",
            "description": "File",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          "400": {
            "description": "Bad Request. Failed to store performance analyzer file."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/performance/files/actions/download": {
      "get": {
        "tags": [
          "Performance Analyzer"
        ],
        "summary": "Get all the performance analyzer files as a compressed file.",
        "description": "Get all the performance analyzer files as a compressed file.",
        "operationId": "Performance.download2",
        "produces": [
          "application/octet-stream",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          "400": {
            "description": "Bad Request. Failed to get performance analyzer files."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/layouts/{layout}/actions/markDefault": {
      "post": {
        "tags": [
          "Layouts"
        ],
        "summary": "Mark layout as default",
        "description": "Mark layout as user default or database default",
        "operationId": "markDefaultLayout",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "layout",
            "in": "path",
            "description": "Layout Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User default or database default details",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DefaultLayoutBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Layout marked as default successfully.</p><p><strong>OK</strong></p>",
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "400": {
            "description": "<p><strong>OK</strong></p><p>Failed to mark layout as user default or database default.</p><p><strong>OK</strong></p>"
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/layouts": {
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "List Layouts",
        "description": "List the available layouts. For admin user, list all the layouts including the ones created by normal users",
        "operationId": "getLayouts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of layouts returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Layouts"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get layouts.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Layouts"
        ],
        "summary": "Save layout",
        "description": "Save the layout for specified cube",
        "operationId": "saveLayout",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Grid to be saved as layout",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Layout saved successfully.</p><p><strong>OK</strong></p>",
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "400": {
            "description": "<p><strong>OK</strong></p><p>Failed to save layout.</p><p><strong>OK</strong></p>"
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/layouts/{layout}": {
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "Get layout details",
        "description": "Get the details for the specified layout",
        "operationId": "getLayoutDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "name": "layout",
            "in": "path",
            "description": "Layout name",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Layout details returned successfully.</p><p><strong>OK</strong></p>",
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get layout details.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Layouts"
        ],
        "summary": "Update layout",
        "description": "Update the layout with provided details in spcified cube",
        "operationId": "editLayout",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "layout",
            "in": "path",
            "description": "Layout Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "layout details to be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Layout updated successfully.</p><p><strong>OK</strong></p>",
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "400": {
            "description": "<p><strong>OK</strong></p><p>Failed to update layout.</p><p><strong>OK</strong></p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Layouts"
        ],
        "summary": "Delete layout",
        "description": "Deletes the layout in specified cube",
        "operationId": "deleteLayout",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "layout",
            "in": "path",
            "description": "Layout Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>OK</strong></p><p>Layout deleted successfully.</p><p><strong>OK</strong></p>"
          },
          "400": {
            "description": "<p><strong>OK</strong></p><p>Failed to delete layout.</p><p><strong>OK</strong></p>"
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/mdx": {
      "post": {
        "tags": [
          "Execute MDX"
        ],
        "summary": "Gets the mdx response in various formats.",
        "description": "Gets the mdx response in various formats like JSON,HTML,EXCEL and CSV",
        "operationId": "MDX.executeMDX",
        "produces": [
          "application/octet-stream",
          "text/html"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Cube Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Result Format",
            "required": false,
            "type": "string",
            "default": "JSON",
            "enum": [
              "XLSX",
              "CSV",
              "HTML",
              "JSON"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "Query and Preferences",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MDXInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros",
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          "400": {
            "description": "Bad Request. Failed to get the data in required format."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/mdx/{name}": {
      "get": {
        "tags": [
          "Execute MDX"
        ],
        "summary": "Gets the named mdx result in various formats.",
        "description": "GGets the named mdx result in various formats. like JSON,HTML,EXCEL and CSV",
        "operationId": "MDX.executenq",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Cube Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Result Format",
            "required": false,
            "type": "string",
            "default": "JSON",
            "enum": [
              "XLSX",
              "CSV",
              "HTML",
              "JSON"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros",
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          "400": {
            "description": "Bad Request. Failed to get the data in required format."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/queries": {
      "get": {
        "tags": [
          "Named Queries"
        ],
        "summary": "List Named Queries",
        "description": "List all the saved named queries for specified cube.",
        "operationId": "getNamedQueries",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of named queries returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Queries"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get named queries.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Named Queries"
        ],
        "summary": "Save named query",
        "description": "Save named query for the specified cube",
        "operationId": "saveNamedQuery",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details of query to be saved",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NamedQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Named query saved successfully.</p><p><strong>OK</strong></p>",
            "schema": {
              "$ref": "#/definitions/NamedQuery"
            }
          },
          "400": {
            "description": "<p><strong>OK</strong></p><p>Failed to save named query.</p><p><strong>OK</strong></p>"
          }
        }
      }
    },
    "/applications/{application}/databases/{database}/queries/{query}": {
      "get": {
        "tags": [
          "Named Queries"
        ],
        "summary": "Get named query details",
        "description": "Get the details for the specified named query",
        "operationId": "getNamedQueryDetails",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "path",
            "description": "Query Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Named query details returned successfully.</p><p><strong>OK</strong></p>",
            "schema": {
              "$ref": "#/definitions/NamedQuery"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to get named query details.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Named Queries"
        ],
        "summary": "Update named query",
        "description": "Update the named query for specified cube",
        "operationId": "editNamedQuery",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "path",
            "description": "Query Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details of query to be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Named query updated successfully.</p><p><strong>OK</strong></p>",
            "schema": {
              "$ref": "#/definitions/NamedQuery"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to update named query.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Named Queries"
        ],
        "summary": "Delete named query",
        "description": "Delete the named query for specified cube",
        "operationId": "deleteNamedQuery",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "Application Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "database",
            "in": "path",
            "description": "Database Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "path",
            "description": "Query Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>OK</strong></p><p>Named query deleted successfully.</p><p><strong>OK</strong></p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p></p><p>Failed to delete named query.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get General Settings",
        "description": "<p>Returns general settings of the specified database. Additional settings can be retrieved using the <code>expand</code>  parameter.</p>",
        "operationId": "DatabaseSettingsStatistics.getSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Use <code>none</code> to show only general settings (this is the default). Other options available: <code>startup</code>, <code>calculation</code>, <code>buffers</code>, <code>caches</code>, <code>transactions</code>, <code>compression</code>, and <code>all</code>.</p>",
            "required": false,
            "type": "string",
            "default": "none",
            "enum": [
              "none",
              "startup",
              "calculation",
              "buffers",
              "caches",
              "transactions",
              "compression",
              "all"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>General database settings returned successfully, with links to get expanded settings.</p>",
            "schema": {
              "$ref": "#/definitions/SettingsList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get database settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "patch": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Update Settings",
        "description": "Updates the settings of the specified database.",
        "operationId": "DatabaseSettingsStatistics.updateSettings",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Database settings patch list.</p>",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchElement"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Settings updated successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the settings. The application or database name may be incorrect, or the JSON for the settings may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/startup": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Startup Settings",
        "description": "<p>Returns startup settings of the specified database.</p>",
        "operationId": "DatabaseSettingsStatistics.getStartupSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Startup settings returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/StartupSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong><p>Failed to return the startup settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/statistics/storage": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Storage Statistics",
        "description": "Returns storage statistics of the specified database",
        "operationId": "DatabaseSettingsStatistics.getStorageStats",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Storage statistics are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/StorageStatistics"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the storage statistics. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/statistics/runtime": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Runtime Statistics",
        "description": "Returns runtime statistics of the specified database",
        "operationId": "DatabaseSettingsStatistics.getRuntimeStats",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Runtime statistics are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/RuntimeStatistics"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the runtime statistics. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/calculation": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Calculation Settings",
        "description": "Returns calculation settings of the specified database",
        "operationId": "DatabaseSettingsStatistics.getCalculationSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Calculation settings are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/CalculationSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the calculation settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/buffers": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Buffer Settings",
        "description": "Returns buffer settings of the specified database",
        "operationId": "DatabaseSettingsStatistics.getBuffersSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Buffer settings are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/BufferSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the buffer settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/compression": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Compression Settings",
        "description": "Returns compression settings of the specified database",
        "operationId": "DatabaseSettingsStatistics.getCompressSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Compression settings are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/CompressionSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the compression settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/caches": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Cache Settings",
        "description": "Returns cache settings of the specified database",
        "operationId": "DatabaseSettingsStatistics.getCachesSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Cache settings returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/CacheSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the cache settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/transactions": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Transaction Settings",
        "description": "Returns transaction settings of the specified database",
        "operationId": "DatabaseSettingsStatistics.getTransSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction settings are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/TransactionSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the transaction settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/outline/attributes": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Attribute Settings",
        "description": "Returns attribute settings of the outline from specified database",
        "operationId": "DatabaseSettingsStatistics.getOutlineAttributesSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute settings are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/AttributeOutlineSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the attribute settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/outline": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Outline Settings",
        "description": "<p>Returns outline settings of the specified database. Additional settings can be retrieved using the <code>expand</code> parameter.</p>",
        "operationId": "DatabaseSettingsStatistics.getOutlineSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Use <code>none</code> to show only general outline settings (this is the default). Other options available are  <code>attribute</code> and <code>all</code>.",
            "required": false,
            "type": "string",
            "default": "none",
            "enum": [
              "none",
              "attributes",
              "all"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Database outline settings returned successfully, with links to get expanded settings.</p>",
            "schema": {
              "$ref": "#/definitions/OutlineSettingsList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the settings. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "patch": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Update Outline Settings",
        "description": "Updates the outline settings of the specified database",
        "operationId": "DatabaseSettingsStatistics.updateOutlineSettings",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Outline settings patch list",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchElement"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Outline settings updated successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the settings. The application or database name may be incorrect, or the JSON for the settings may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/outline/dateformats": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get Date Formats",
        "description": "Returns date formats of the outline from specified database",
        "operationId": "DatabaseSettingsStatistics.getOutlineSettingsDateFormats",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Date formats are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/OutlineDateFormat"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the date formats. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/querytracking/export": {
      "post": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Export Query Tracking",
        "description": "Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.",
        "operationId": "DatabaseSettingsStatistics.exportQueryData",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "File Name",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryTrackingInputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Query data exported successfully."
          },
          "400": {
            "description": "Fails to export query data."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/settings/querytracking/import": {
      "post": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Import Query Tracking",
        "description": "Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.",
        "operationId": "DatabaseSettingsStatistics.importQueryData",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "File Name",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryTrackingInputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Query data imported successfully."
          },
          "400": {
            "description": "Fails to import query data."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/statistics": {
      "get": {
        "tags": [
          "Database Settings and Statistics"
        ],
        "summary": "Get General Statistics",
        "description": "<p>Returns general statistics of the specified database. Additional statistics can be retrieved using the <code>expand</code>  parameter.</p>",
        "operationId": "DatabaseSettingsStatistics.getStatistics",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Use <code>none</code> to show only general statistics (this is the default). Other options available: <code>storage</code>, <code>runtime</code>, and <code>all</code>.",
            "required": false,
            "type": "string",
            "default": "none",
            "enum": [
              "none",
              "storage",
              "runtime",
              "all"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>General database statistics returned successfully, with links to get expanded statistics.</p>",
            "schema": {
              "$ref": "#/definitions/StatisticsList"
            }
          },
          "400": {
            "description": "<p>Failed to get the statistics. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/settings": {
      "get": {
        "tags": [
          "Application Settings and Statistics"
        ],
        "summary": "Get Application General Settings",
        "description": "Returns general settings of the specified application. Additional settings can be retrieved using the <code>expand</code> parameter.",
        "operationId": "ApplicationSettingsStatistics.getSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Use <code>none</code> to show only general settings (this is the default). Other options available: <code>startup</code>, <code>security</code>, and <code>all</code>.</p>",
            "required": false,
            "type": "string",
            "default": "none",
            "enum": [
              "none",
              "startup",
              "security",
              "all"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>General application settings returned successfully, with links to get expanded settings and to edit settings.</p>",
            "schema": {
              "$ref": "#/definitions/AppSettingsList"
            }
          },
          "400": {
            "description": "<p>Failed to get the settings. The application name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "patch": {
        "tags": [
          "Application Settings and Statistics"
        ],
        "summary": "Update Application Settings",
        "description": "Updates the settings of the specified application.",
        "operationId": "ApplicationSettingsStatistics.updateSettings",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Application settings patch list",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchElement"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Settings are updated successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the settings. The application name may be incorrect, or the JSON for the settings may be incorrect.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/settings/startup": {
      "get": {
        "tags": [
          "Application Settings and Statistics"
        ],
        "summary": "Get Application Startup Settings",
        "description": "Returns all the startup settings of the specified application.",
        "operationId": "ApplicationSettingsStatistics.getStartupSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Startup settings retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/AppStartupSettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the startup settings. The application name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/settings/security": {
      "get": {
        "tags": [
          "Application Settings and Statistics"
        ],
        "summary": "Get Application Security Settings",
        "description": "Returns the security settings of the specified application.",
        "operationId": "ApplicationSettingsStatistics.getSecuritySettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Security settings are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/AppSecuritySettings"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the security settings. The application name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/statistics": {
      "get": {
        "tags": [
          "Application Settings and Statistics"
        ],
        "summary": "Get Application Statistics",
        "description": "Returns the statistics of the specified application.",
        "operationId": "ApplicationSettingsStatistics.getStatistics",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ApplicationStatistics"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the statistics. The application name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/outline/{app}/{cube}/xml": {
      "post": {
        "tags": [
          "Outline Viewer"
        ],
        "summary": "Export the outline to XML.",
        "description": "Export the outline to XML. If tree is true then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided then only alias values of the members for specified alias table will be exported",
        "operationId": "Outline.getOutlineXML",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cube",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExportOptions"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/outline/{app}/{cube}/descendantsCount/{memberUniqueName}": {
      "get": {
        "tags": [
          "Outline Viewer"
        ],
        "summary": "Get Descendants Count",
        "description": "Returns descendants count for the requested member",
        "operationId": "Outline.getDescendantsCount",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "cube",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberUniqueName",
            "in": "path",
            "description": "Member unique name (Fully qualified name)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully returned descendants count",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          "400": {
            "description": "Failed to get descendants count"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/outline/{app}/{cube}/{memberUniqueName}": {
      "get": {
        "tags": [
          "Outline Viewer"
        ],
        "summary": "Get Member Info",
        "description": "Returns either all or requested member properties",
        "operationId": "Outline.getMemberInfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "cube",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberUniqueName",
            "in": "path",
            "description": "Member unique name (Fully qualified name)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of member properties to fetch",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns member information",
            "schema": {
              "$ref": "#/definitions/MemberBean"
            }
          },
          "400": {
            "description": "Failed to get member information"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/outline/{app}/{cube}/ancestors/{memberUniqueName}": {
      "get": {
        "tags": [
          "Outline Viewer"
        ],
        "summary": "Get Member Ancestors",
        "description": "Returns all ancestors of the requested member",
        "operationId": "Outline.getAncestorsMemberInfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "cube",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberUniqueName",
            "in": "path",
            "description": "Member unique name (Fully qualified name)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of member properties to fetch",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of Ancestors",
            "schema": {
              "$ref": "#/definitions/MemberBean"
            }
          },
          "400": {
            "description": "Failed to get ancestors"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/outline/{app}/{cube}/settings/smartlist": {
      "get": {
        "tags": [
          "Outline Viewer"
        ],
        "operationId": "getAllSmartList",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cube",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accept",
            "in": "header",
            "required": false,
            "type": "string",
            "default": "application/json"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/outline/{app}/{cube}": {
      "get": {
        "tags": [
          "Outline Viewer"
        ],
        "summary": "Get Dimensions, Children, or Search",
        "description": "<p>Returns a list of dimensions when no parameters are provided. Returns a list of child members when <i>parent</i> or <i>parentUniqueName</i> parameters are provided. Returns search results when a search keyword parameter is used.</p>",
        "operationId": "Outline.getMembers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "cube",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "<p>Keyword to search for member.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "matchWholeWord",
            "in": "query",
            "description": "<p>Match member name with keyword.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "parent",
            "in": "query",
            "description": "<p>Parent name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentUniqueName",
            "in": "query",
            "description": "<p>Parent unique name (fully qualified).</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "isMbrId",
            "in": "query",
            "description": "Parent ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "<p>Comma-separated list of member properties to fetch.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of members to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of members to return.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns either list of dimensions or children or search results.",
            "schema": {
              "$ref": "#/definitions/RestCollectionResponse"
            }
          },
          "400": {
            "description": "Failed to get members or search results"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/partitions/lock": {
      "post": {
        "tags": [
          "Partitions"
        ],
        "summary": "Lock Partition",
        "description": "Lock partition object. For non federated partition, both source and target partition objects will be locked<p>a) FEDERATED partition - Partition type, datasource name, measures dimension name and optional application level datasource are required</p><p>b) TRANSPARENT/REPLICATED/LAZY_TRANSPARENT Others - partition type, source server,source application and source database are required</p>",
        "operationId": "Partition.lockPartition",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Partition type",
            "required": true,
            "type": "string",
            "enum": [
              "TRANSPARENT",
              "REPLICATED",
              "FEDERATED",
              "LAZY_TRANSPARENT"
            ]
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "Partition source server name",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Partition source application name",
            "required": false,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "query",
            "description": "Partition source database name",
            "required": false,
            "type": "string"
          },
          {
            "name": "datasourceName",
            "in": "query",
            "description": "<p>Data source name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "measuresDimensionName",
            "in": "query",
            "description": "<p>Measures dimension name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationLevelDatasource",
            "in": "query",
            "description": "Specify whether the datasource is defined at application level",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Lock successful"
          },
          "400": {
            "description": "Failed to lock partition"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/partitions/unlock": {
      "post": {
        "tags": [
          "Partitions"
        ],
        "summary": "Unlock Partition",
        "description": "Unlock partition object. For non federated partition, both source and target partition objects will be unlocked<p>a) FEDERATED partition - Partition type, datasource name, measures dimension name and optional application level datasource are required</p><p>b) TRANSPARENT/REPLICATED/LAZY_TRANSPARENT Others - partition type, source server,source application and source database are required</p>",
        "operationId": "Partition.unlockPartition",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Partition type",
            "required": true,
            "type": "string",
            "enum": [
              "TRANSPARENT",
              "REPLICATED",
              "FEDERATED",
              "LAZY_TRANSPARENT"
            ]
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "Partition source server name",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Partition source application name",
            "required": false,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "query",
            "description": "Partition source database name",
            "required": false,
            "type": "string"
          },
          {
            "name": "datasourceName",
            "in": "query",
            "description": "<p>Data source name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "measuresDimensionName",
            "in": "query",
            "description": "<p>Measures dimension name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationLevelDatasource",
            "in": "query",
            "description": "Specify whether the datasource is defined at application level",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Unlock successful"
          },
          "400": {
            "description": "Failed to unlock partition"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/partitions/replicatedata": {
      "post": {
        "tags": [
          "Partitions"
        ],
        "summary": "Replicate Data",
        "description": "Replicate data from source for a replicated partition",
        "operationId": "Partition.replicateDataFromSource",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "Partition source server name",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Partition source application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "query",
            "description": "Partition source database name",
            "required": true,
            "type": "string"
          },
          {
            "name": "replicateOption",
            "in": "query",
            "description": "Replicate data options",
            "required": false,
            "type": "string",
            "default": "UPDATED_CELLS",
            "allowEmptyValue": true,
            "enum": [
              "UPDATED_CELLS",
              "ALL_CELLS"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Replicate data successful"
          },
          "400": {
            "description": "Either unsupported partition type or failed to replicate data from source"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/partitions": {
      "get": {
        "tags": [
          "Partitions"
        ],
        "summary": "Get Partitions",
        "description": "<p>Returns a list of partitions defined on the database, or a specific partition.</p> <ul><li>With no parameters: Returns all available partitions.</li><li>With <code>type</code> parameter: Returns filtered partitions list.</li><li>With partition type, source server, source application, and source database parameters: Returns existing TRANSPARENT/REPLICATED/LAZY_TRANSPARENT partition</li></ul>",
        "operationId": "Partition.getPartitions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Partition type. Multiple types can be added with a comma separator.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TRANSPARENT",
                "REPLICATED",
                "FEDERATED",
                "LAZY_TRANSPARENT"
              ]
            },
            "collectionFormat": "multi",
            "allowEmptyValue": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of partitions to omit from the start of the result set.</p>",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of partitions to return.</p>",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "Partition source server name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Partition source application name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "query",
            "description": "Partition source database name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "datasourceName",
            "in": "query",
            "description": "Datasource name",
            "required": false,
            "type": "string"
          },
          {
            "name": "measuresDimensionName",
            "in": "query",
            "description": "Measures dimension name",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationLevelDatasource",
            "in": "query",
            "description": "Specify whether the datasource is defined at application level",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns either a list of partitions or specific partition details.",
            "schema": {
              "$ref": "#/definitions/PartitionList"
            }
          },
          "400": {
            "description": "Failed to get partitions"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Partitions"
        ],
        "summary": "Create Partition",
        "description": "Create a new partition<p>\t For partitions across instances, connectionName must be provided.</p><p>\t If the connection is defined at application level then, the property 'applicationLevelConnection' as true must be specified</p><p>\t If the datasource is defined at application level then, the property 'applicationLevelDatasource' as true must be specified</p><p> Example (with minimum required properties)</p><p>\ta)TRANSPARENT/REPLICATED/LAZY_TRANSPARENT - (change type appropriately)</p><p>{'type':'TRANSPARENT','isNew':true,'sourceInfo':{'applicationName':'Sample_2','databaseName':'Basic'},'areas':[{'sourceArea':'Jan','targetArea':'Jan','slices':[]}],'mappings':[]}</p><p>\tb)FEDERATED - <p>{'type':'FEDERATED','isNew':true,'sourceInfo':{'datasourceName':'federatedDatasourceExcel1','measuresDimensionName':'Measures','essbaseToColumnMap':{'arr':[{'essbaseName':'Caffeinated','columnName':''},{'essbaseName':'Ounces','columnName':''},{'essbaseName':'Pkg Type','columnName':''},{'essbaseName':'Population','columnName':''},{'essbaseName':'Intro Date','columnName':''}]}},'areas':[{'sourceArea':'Jan','targetArea':'Jan','slices':[]}]}</p>",
        "operationId": "Partition.createPartition",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partition information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartitionBean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Partition created successful"
          },
          "400": {
            "description": "Failed to create partition"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Partitions"
        ],
        "summary": "Delete Partition",
        "description": "Delete a partition based on appropriate query parameters<p>a) To delete TRANSPARENT/REPLICATED/LAZY_TRANSPARENT partition, partition type, source server,source application and source database are required</p><p>b) To delete FEDERATED partition, partition type, datasource name, measures dimension name and optional application level datasource are required</p>",
        "operationId": "Partition.deletePartition",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Partition type",
            "required": true,
            "type": "string",
            "enum": [
              "TRANSPARENT",
              "REPLICATED",
              "FEDERATED",
              "LAZY_TRANSPARENT"
            ]
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "Partition source server name",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Partition source application name",
            "required": false,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "query",
            "description": "Partition source database name",
            "required": false,
            "type": "string"
          },
          {
            "name": "datasourceName",
            "in": "query",
            "description": "<p>Data source name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "measuresDimensionName",
            "in": "query",
            "description": "<p>Measures dimension name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationLevelDatasource",
            "in": "query",
            "description": "Specify whether the datasource is defined at application level",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful"
          },
          "400": {
            "description": "Failed to delete partition"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "patch": {
        "tags": [
          "Partitions"
        ],
        "summary": "Update Partition",
        "description": "Updates an existing partition",
        "operationId": "Partition.updatePartition",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partition information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartitionBean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Update successful"
          },
          "400": {
            "description": "Failed to update partition"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/partitions/cellcount": {
      "post": {
        "tags": [
          "Partitions"
        ],
        "summary": "Get Partition Cell Count",
        "description": "Get source and target cell counts for all the area definitions.",
        "operationId": "Partition.getPartitionCellCount",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partition information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartitionBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/PartitionBean"
            }
          },
          "400": {
            "description": "Failed to get cell count"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/partitions/validate": {
      "post": {
        "tags": [
          "Partitions"
        ],
        "summary": "Validate Partition",
        "description": "Validate either new or existing partition",
        "operationId": "Partition.validatePartition",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partition information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartitionBean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "validation successful"
          },
          "400": {
            "description": "Failed to validate partition"
          },
          "422": {
            "description": "Partition validated with warnings"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/preferences": {
      "get": {
        "tags": [
          "Preferences"
        ],
        "summary": "Get User Preferences",
        "description": "Returns the user preferences. This api returns the links to various preferences available in this release.",
        "operationId": "Preferences.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Preference"
            }
          }
        }
      }
    },
    "/properties/{propertyName}": {
      "get": {
        "tags": [
          "Properties"
        ],
        "summary": "Get Server Property",
        "description": "Returns property based on name from the server",
        "operationId": "Properties.getProperty",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "propertyName",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Property retrieved successfully. Returns property name and value from the server and links to get/edit the property",
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          },
          "400": {
            "description": "Failed to get the property."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Properties"
        ],
        "summary": "Update Server Property",
        "description": "Updates the property in the server and returns the updated property",
        "operationId": "Properties.setProperty",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "propertyName",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Property entry",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Property is updated successfully. Returns the property details and the links to get/edit the property",
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the property. The JSON for the property may be incorrect, or the specified property name may not have been added to the server.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Properties"
        ],
        "summary": "Deletes a property in the server",
        "description": "Deletes a property in the server",
        "operationId": "Properties.deleteProperty",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "propertyName",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          },
          "204": {
            "description": "Property is deleted successfully. Returns the property details and the links to get/edit the property",
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          },
          "400": {
            "description": "Fails to delete a property. This happens when the property json is incorrect or when the given property name already added to the server"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/properties": {
      "get": {
        "tags": [
          "Properties"
        ],
        "summary": "Get Server Properties",
        "description": "Returns all the properties from the server",
        "operationId": "Properties.getProperties",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Properties are retrieved successfully. Returns all the properties from server and the links to get/edit each property",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PropertyList"
              }
            }
          },
          "400": {
            "description": "Failed to get the properties."
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Properties"
        ],
        "summary": "Creates the property in the server",
        "description": "Creates the property in the server and returns the created property",
        "operationId": "Properties.addProperty",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Property entry",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Property is created successfully. Returns the property details and the links to get/edit the property",
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          },
          "400": {
            "description": "Fails to create the property. This happens when the property json is incorrect or when the given property name already added to the server"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Properties"
        ],
        "summary": "Updates the property values in the server",
        "description": "Updates the properties in the server and returns the list of updated properties",
        "operationId": "Properties.setProperties",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of Property entries",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PropertyEntry"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Properties are updated successfully. Returns the list of updated properties, its details and the links to get/edit the properties",
            "schema": {
              "$ref": "#/definitions/PropertyEntry"
            }
          },
          "400": {
            "description": "Fails to update the property. This happens when the property json is incorrect or when the given property name is not added to the server"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{groupId}/provisionReport/applications/{application}/filters": {
      "get": {
        "tags": [
          "Group Provisioning Report"
        ],
        "summary": "Get Filters Provisioning Report",
        "description": "<p>Get filters provisioning report for specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.</p>",
        "operationId": "GroupProvisioningReport.getFilters",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DatabaseProvisionReportItemList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get provisioning report. The logged in user may not have the appropriate application role.</p>"
          },
          "404": {
            "description": "<p>Group not found.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{groupId}/provisionReport": {
      "get": {
        "tags": [
          "Group Provisioning Report"
        ],
        "summary": "Get Full Provisioning Report",
        "description": "<p>Get a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.",
        "operationId": "GroupProvisioningReport.getFullReport",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Use <code>all</code> to get provisioning information for all applications.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/MainProvisionReport"
            }
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{groupId}/provisionReport/applications": {
      "get": {
        "tags": [
          "Group Provisioning Report"
        ],
        "summary": "Get All Applications Provisioning Report",
        "description": "<p>Get a provisioning report for all applications. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.</p>",
        "operationId": "GroupProvisioningReport.getReportForAllApplications",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Use <code>all</code> to get provisioning information for all applications.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report for applications returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationProvisionReportItemList"
            }
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{groupId}/provisionReport/applications/{application}": {
      "get": {
        "tags": [
          "Group Provisioning Report"
        ],
        "summary": "Get Application Provisioning Report",
        "description": "Get provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.",
        "operationId": "GroupProvisioningReport.getReportForApplication",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Value can be <code>all</code> or <code>none</code>. Default value is <code>none</code>. When value is <code>none</code>, only links to roles, filters and scripts will be returned. When value is <code>all</code>, provisioning information for roles, filters, and scripts are returned.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationProvisionReportItem"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{groupId}/provisionReport/applications/{application}/scripts": {
      "get": {
        "tags": [
          "Group Provisioning Report"
        ],
        "summary": "Get Scripts Provisioning Report",
        "description": "<p>Get the scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.</p>",
        "operationId": "GroupProvisioningReport.getScripts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DatabaseProvisionReportItemList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get provisioning report. The logged in user may not have the appropriate application role.</p>"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/groups/{groupId}/provisionReport/applications/{application}/roles": {
      "get": {
        "tags": [
          "Group Provisioning Report"
        ],
        "summary": "Get Application Roles Provisioning Report",
        "description": "Get roles provisioning report for specified application.",
        "operationId": "GroupProvisioningReport.getRoles",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Roles provisioning report for specified application. Logged in user should have at least 'Application Manager' role for specified application to invoke this API. ",
            "schema": {
              "$ref": "#/definitions/ProvisionReportItemList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get provisioning report. The logged in user may not have the appropriate application role.</p>"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{app}/permissions/{id}": {
      "get": {
        "tags": [
          "Application Role Provisioning"
        ],
        "summary": "Get Provision",
        "description": "Get provisioning information on the specified application.",
        "operationId": "ApplicationRoleProvisioning.getProvision",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "<p>User or group ID.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "<p>If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "inherited",
            "in": "query",
            "description": "<p>If true, consider roles derived through parent groups. Default is false.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning information returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Application Role Provisioning"
        ],
        "summary": "Provision User or Group",
        "description": "Provision a single user or group on the specified application.",
        "operationId": "ApplicationRoleProvisioning.provision",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User or group ID.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User or group provisioning information.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>OK</strong></p><p>Provisioned successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Application Role Provisioning"
        ],
        "summary": "Deprovision User or Group",
        "description": "<p>Deprovision a single user or group on the specified application.</p>",
        "operationId": "ApplicationRoleProvisioning.deprovision",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "<p>User or group ID.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "<p>If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Deprovisioned successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{app}/permissions": {
      "get": {
        "tags": [
          "Application Role Provisioning"
        ],
        "summary": "Search Application Provisioning",
        "description": "Search provisioning information on specified application.",
        "operationId": "ApplicationRoleProvisioning.searchProvision",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "<p>User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.</p>",
            "required": false,
            "type": "string",
            "default": "*"
          },
          {
            "name": "role",
            "in": "query",
            "description": "<p>Input may include <code>all</code>, <code>none</code>, or a comma-separated list of roles (for example, <code>app_manager</code>, <code>db_manager</code>, <code>db_update</code>,or <code>db_access</code>). Default value is <code>all</code>, so if this query parameter is not specified, all users and groups having some role are returned. If <code>none</code> is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.</p>",
            "required": false,
            "type": "string",
            "default": "all"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "<p>Input may include <code>all</code>, <code>group</code>, or <code>user</code>. Default value is <code>all</code>, so if this query parameter is not specified, all users and groups are returned.</p>",
            "required": false,
            "type": "string",
            "default": "all"
          },
          {
            "name": "inherited",
            "in": "query",
            "description": "<p>If true, consider roles derived through parent groups. Default is false.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Successfully returned provisioning information for users or groups matching search criteria.  Response type can be either JSON, XML, or CSV stream, depending on the Accept header. If <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>, the search result will be returned in the response body. If <code>Accept='application/octet-stream'</code>, the search result will be returned as a stream.</p>",
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfoList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Application Role Provisioning"
        ],
        "summary": "Import Provision",
        "description": "Import provisioning information for multiple users or groups on the specified application.",
        "operationId": "ApplicationRoleProvisioning.importProvision",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning imported successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "Service Role Provisioning"
        ],
        "summary": "Get Provision",
        "description": "<p>Get service role provisioning information.</p>",
        "operationId": "ServiceRoleProvisioning.getProvision",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>User or group ID.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "<p>If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning information returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the required service administrator role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Service Role Provisioning"
        ],
        "summary": "Provision User or Group",
        "description": "<p>Provision a single user or group for a service role.</p>",
        "operationId": "ServiceRoleProvisioning.provision",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User or group ID.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User or group provisioning information.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role provision is successful"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the required service administrator role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Service Role Provisioning"
        ],
        "summary": "Deprovision",
        "description": "Deprovision single user or group from a service role.",
        "operationId": "ServiceRoleProvisioning.deprovision",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User or group ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "<p>If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Role deprovisioned successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the required service administrator role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "Service Role Provisioning"
        ],
        "summary": "Search Provision",
        "description": "Search provisioning information.",
        "operationId": "ServiceRoleProvisioning.searchProvision",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "<p>User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.</p>",
            "required": false,
            "type": "string",
            "default": "*"
          },
          {
            "name": "role",
            "in": "query",
            "description": "<p>Input may include <code>all</code>, <code>none</code>, or a comma-separated list of roles (for example, <code>service_administrator</code>, <code>power_user</code>, or <code>user</code>). Default value is <code>all</code>, so if this query parameter is not specified, all users and groups having some role are returned. If <code>none</code> is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.</p>",
            "required": false,
            "type": "string",
            "default": "all"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "all/group/user. Default value is all so if this query parameter is not specified then all users/groups will be returned.",
            "required": false,
            "type": "string",
            "default": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "provisioning information for users/groups matching with search parameters",
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfoList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the required service administrator role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users/{userId}/provisionReport/applications/{application}/filters": {
      "get": {
        "tags": [
          "User Provisioning Report"
        ],
        "summary": "Get Filters Provisioning Report",
        "description": "<p>Get a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.</p>",
        "operationId": "UserProvisioningReport.getFilters",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DatabaseProvisionReportItemList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>User not found.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users/{userId}/provisionReport": {
      "get": {
        "tags": [
          "User Provisioning Report"
        ],
        "summary": "Get Full Provisioning Report",
        "description": "Get a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.",
        "operationId": "UserProvisioningReport.getFullReport",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Value can be <code>all</code> or <code>none</code>. Default value is <code>none</code>, meaning only links to applications are returned. If <code>all</code> is specified, provisioning information for all applications is returned.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Full provisioning report including service and all the applications.</p>",
            "schema": {
              "$ref": "#/definitions/MainProvisionReport"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users/{userId}/provisionReport/applications": {
      "get": {
        "tags": [
          "User Provisioning Report"
        ],
        "summary": "Get Applications Provisioning Reports",
        "description": "<p>Get a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.</p>",
        "operationId": "UserProvisioningReport.getReportForAllApplications",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Value can be <code>all</code> or <code>none</code>. Default value is <code>none</code>, meaning only links to applications are returned. If <code>all</code> is specified, provisioning information for all applications is returned.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationProvisionReportItemList"
            }
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>User not found.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users/{userId}/provisionReport/applications/{application}": {
      "get": {
        "tags": [
          "User Provisioning Report"
        ],
        "summary": "Get Application Provisioning Report",
        "description": "<p>Get a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.</p>",
        "operationId": "UserProvisioningReport.getReportForApplication",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Value can be <code>all</code> or <code>none</code>. Default value is <code>none</code>, meaning only links to roles, filters, and scripts are returned. If <code>all</code> is specified, provisioning information for all roles, filters, and scripts in the application is returned.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ApplicationProvisionReportItem"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>User not found.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users/{userId}/provisionReport/applications/{application}/scripts": {
      "get": {
        "tags": [
          "User Provisioning Report"
        ],
        "summary": "Get Scripts Provisioning Report",
        "description": "<p>Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.</p>",
        "operationId": "UserProvisioningReport.getScripts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/DatabaseProvisionReportItemList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the application service role.</p>"
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>User not found.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users/{userId}/provisionReport/applications/{application}/roles": {
      "get": {
        "tags": [
          "User Provisioning Report"
        ],
        "summary": "Get Application Roles Provisioning Report",
        "description": "<p>Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application to get this provisioning report.</p>",
        "operationId": "UserProvisioningReport.getRoles",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Provisioning report returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ProvisionReportItemList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>User not found.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/utils/rules/actions/import": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Import Rules",
        "description": "Import a rules file.",
        "operationId": "Rules.importRule",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>File path information: source and destination catalog paths.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilePathDetail"
            }
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>Optional overwrite specification. Default value is false, meaning if the rules file already exists, an error is returned. When set to true, if the rule file already exists, it will be overwritten.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Rules file imported successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to import rules file. The file path information may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/utils/rules/preview": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Preview Rules Data",
        "description": "<p>Applies a rules file to a two-dimensional array of data, and returns a previewed data load as two-dimensional array.</p>",
        "operationId": "Rules.getPreviewData",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Rules file details and input two dimensional array.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RulePreviewInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data through rules file was previewed successfully.</p>",
            "schema": {
              "$ref": "#/definitions/RulePreviewOutput"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to preview this data through this rules file.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/utils/rules": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Get Rules",
        "description": "Gets rules file from file catalog path.",
        "operationId": "Rules.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "<p>Catalog path.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Successfully returned rules file.  Response type can be either JSON, XML, or JSON stream, depending on the Accept header. If <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>, the rules are returned in the response body. If <code>Accept='application/octet-stream'</code>, the rules are returned as a JSON stream.</p>",
            "schema": {
              "$ref": "#/definitions/Rules"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed import rules file. The catalog path information may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Create Rules",
        "description": "<p>Creates a rules file.</p>",
        "operationId": "Rules.save",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Rules file details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Rules"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "<p>Optional file catalog path.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>Optional overwrite specification. Default value is false, meaning if the rules file already exists, an error is returned. When set to true, if the rule file already exists, it will be overwritten.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Rules file created successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to create rules file. The catalog path information may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/utils/rules/verify": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Verify Rules",
        "description": "<p>Verifies a rules file.</p>",
        "operationId": "Rules.verify",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Rules file details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Rules"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Rules file verified successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Rules verification failed. Response contains a list of verification errors.</p>",
            "schema": {
              "$ref": "#/definitions/StringCollectionResponse"
            }
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/sandbox/members": {
      "post": {
        "tags": [
          "Sandbox Dimension"
        ],
        "summary": "Add Sandbox Members",
        "description": "<p>Add members to an existing sandbox dimension.</p>",
        "operationId": "SandboxDimension.addMembers",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Size of sandbox dimension members. Default is 100 if body is empty.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SandboxRequestPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Sandbox members added successfully; includes links to sandbox details.</p>",
            "schema": {
              "$ref": "#/definitions/SandboxDetail"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to add sandbox members. The application or database name may be incorrect, or scenarios may not be enabled.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/sandbox": {
      "get": {
        "tags": [
          "Sandbox Dimension"
        ],
        "summary": "Get Sandbox Details",
        "description": "<p>Return details about sandbox members.</p>",
        "operationId": "SandboxDimension.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Sandbox details returned successfully; includes total sandbox members, available members, and assigned member.</p>",
            "schema": {
              "$ref": "#/definitions/SandboxDetail"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get sandbox details. The application or database name may be incorrect, or the logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Sandbox Dimension"
        ],
        "summary": "Create Sandbox",
        "description": "<p>Create Sandbox and CellProperties dimensions, while at the same time enabling scenario management for this cube.</p>",
        "operationId": "SandboxDimension.create",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Maximum count of sandbox dimension members. Default is 100 if body is empty.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SandboxRequestPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Sandbox created successfully; includes links to sandbox details.</p>",
            "schema": {
              "$ref": "#/definitions/SandboxDetail"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed create sandbox. The application or database name may be incorrect, or the logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Sandbox Dimension"
        ],
        "summary": "Delete Sandbox",
        "description": "<p>Delete Sandbox and CellProperties dimensions from this cube. This action disables scenario management for the cube.</p>",
        "operationId": "SandboxDimension.delete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Sandbox deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete sandbox. The application or database name may be incorrect, or the logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/participants": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Participants",
        "description": "<p>Get scenario participants by scenario ID.</p>",
        "operationId": "Scenarios.getParticipants",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario participants returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ParticipantListResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario participants. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Add Participant",
        "description": "<p>Add scenario participant to the specified scenario ID.</p>",
        "operationId": "Scenarios.addParticipant",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Participant details.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ParticipantBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario participant added successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to add participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Scenarios",
        "description": "<p>Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.</p>",
        "operationId": "Scenarios.getScenarios",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "<p>Scenario name wildcard pattern.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "description": "<p>Optional user role by which to filter the scenario list. Value can be <code>owner</code>, <code>participant</code>, or <code>approver</code>. If role is specified as <code>approver</code>, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "overdue",
            "in": "query",
            "description": "<p>If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.</p>",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "state",
            "in": "query",
            "description": "<p>Scenario state.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "application",
            "in": "query",
            "description": "<p>Application name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "database",
            "in": "query",
            "description": "<p>Database name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "approvalPending",
            "in": "query",
            "description": "<p>Scenario is in submitted state, and approval is pending from logged in user.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "<p>Number of scenarios to omit from the start of the result set. Default is 0.</p>",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of scenarios to return. Default is 50.</p>",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int64"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "<p>Order-by field and order for the result set. The value of this parameter must follow the format of <code><i>fieldName</i>:asc|desc</code>. For example: <code>name:asc</code>. Default value is <code>createdTime:desc</code>, meaning that scenarios are listed with the most recently created scenarios first.</p>",
            "required": false,
            "type": "string",
            "default": "createdTime:desc"
          },
          {
            "name": "count",
            "in": "query",
            "description": "<p>If <code>true</code>, response contains only the count of scenarios, and not actual scenarios.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario list and details returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioCollectionResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenarios.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Create Scenario",
        "description": "<p>Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.</p>",
        "operationId": "Scenarios.create",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Scenario details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScenarioBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario created successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to create the scenario. Required fields such as scenario name or due date may be empty.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/approvers": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Approvers",
        "description": "<p>Get scenario approvers.</p>",
        "operationId": "Scenarios.getApprovers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>List of scenario approvers returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ApproverListResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario approvers. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Add Approver",
        "description": "<p>Add a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.</p>",
        "operationId": "Scenarios.addApprover",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Approver details.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ApproverBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario approver added successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to add approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/approvers/{userId}": {
      "delete": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Delete Approver",
        "description": "<p>Deletes a scenario approver.</p>",
        "operationId": "Scenarios.deleteApprover",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Approver ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Scenario approver deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete scenario approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/participants/{userId}": {
      "delete": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Delete Participant",
        "description": "<p>Deletes a scenario participant.</p>",
        "operationId": "Scenarios.deleteParticipant",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Participant ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Scenario participant deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete scenario participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{id}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Scenario",
        "description": "Gets a scenario by ID.",
        "operationId": "Scenarios.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Value can be <code>all</code> or <code>none</code>. Default value is <code>none</code>, meaning only links are returned. If <code>all</code> is specified, then approvers, participants and scripts are included in the response.</p>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario details returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario details. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Perform Scenario Action",
        "description": "<p>Performs the specified scenario workflow action. Common actions are <code>submit</code> to submit a scenario for approval, <code>approve</code> to approve a scenario, <code>reject</code> to reject it, and <code>apply</code> to overwrite the base data with the scenario data. Additional actions include <code>copy</code>, <code>refresh</code>, and <code>clear</code>.</p>",
        "operationId": "Scenarios.performAction",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>Scenario ID.</p>",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "action",
            "in": "query",
            "description": "<p>Valid values are <code>submit</code>, <code>approve</code>, <code>reject</code>, <code>apply</code>, <code>copy</code>, <code>refresh</code>, and <code>clear</code>.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "<p>Optional overwrite parameter, applicable only when <i>action</i> is <code>refresh</code>. If <code>true</code>, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is <code>false</code>.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScenarioActionPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario action performed successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to perform scenario action. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Update Scenario Fully",
        "description": "<p>Update in-depth details about a scenario.</p>",
        "operationId": "Scenarios.update",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "<p>Scenario ID.</p>",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Scenario details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScenarioBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the scenario. Required fields such as scenario name or due date may be empty, or the scenario may already have been submitted for approval.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Delete a scenario by ID.",
        "description": "Delete a scenario by ID.",
        "operationId": "Scenarios.delete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Scenario deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete scenario. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "patch": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Update Scenario Partially",
        "description": "<p>Update basic information about a scenario, including description, due date, priority, and owner.</p>",
        "operationId": "Scenarios.patch",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Scenario details. Set only those fields which need to be updated.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScenarioEditBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the scenario. Required fields such as scenario name or due date may be empty.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/comments/{commentId}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Comment",
        "description": "<p>Get a scenario comment by ID.</p>",
        "operationId": "Scenarios.getComment",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario comment returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/CommentBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario comment. The scenario ID or comment ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Update Comment",
        "description": "<p>Update a scenario comment by ID.</p>",
        "operationId": "Scenarios.updateComment",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Comment details.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommentBean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "<p>Scenario comment successfully updated.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update scenario comment. The scenario ID or comment ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Delete Comment",
        "description": "<p>Delete a scenario comment by ID.</p>",
        "operationId": "Scenarios.deleteComment",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Scenario comment deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete scenario comment. The scenario ID or comment ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/databases": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Scenario-Enabled Cubes",
        "description": "<p>Get information about all the databases registered for scenario management.</p>",
        "operationId": "Scenarios.getRegisteredCubes",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario-enabled cubes returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioCubesList"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario-enabled cubes.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{id}/changes": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Changes",
        "description": "<p>Get scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.</p>",
        "operationId": "Scenarios.getChangeData",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "p><strong>OK</strong></p><p>Scenario changes returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScenarioChangesListResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario changes. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/scripts": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Scripts",
        "description": "Get Scripts",
        "operationId": "Scenarios.getScripts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario scripts returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/ScriptListResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario scripts. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/scripts/{scriptType}": {
      "put": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Update With Script",
        "description": "<p>Updates scenario using script of specified type.</p>",
        "operationId": "Scenarios.updateScript",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "scriptType",
            "in": "path",
            "description": "<p>Script type. Valid values are: <code>refresh</code> to revert to base, <code>apply</code> to commit to base, and <code>clear</code> to set to #Missing.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Script details.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScriptBean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Update script is successful"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update with script. The scenario ID or script type may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/scenarios/{scenarioId}/comments": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Comments",
        "description": "<p>Get comments for the specified scenario ID.</p>",
        "operationId": "Scenarios.getComments",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario comments returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/CommentListResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get scenario comments. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Add Comment",
        "description": "<p>Add a comment to the specified scenario ID.</p>",
        "operationId": "Scenarios.addComment",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Scenario ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Comment details.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommentBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Scenario comment added successfully.</p>",
            "schema": {
              "$ref": "#/definitions/CommentBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to add a comment. The scenario ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get Essbase Script",
        "description": "Returns the script from the specified application and database based on the script name",
        "operationId": "Scripts.getScript",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "query",
            "description": "Type of script file",
            "required": false,
            "type": "string",
            "default": "calc"
          }
        ],
        "responses": {
          "200": {
            "description": "Script is retrieved successfully. Returns the links to get/edit/delete the script and to get the script content",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the script. The application, database, or script name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Scripts"
        ],
        "summary": "Update Essbase Script",
        "description": "Updates the specified script in the specified application and database and returns the updated script",
        "operationId": "Scripts.editScript",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Script details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Type of script file",
            "required": false,
            "type": "string",
            "default": "calc"
          }
        ],
        "responses": {
          "200": {
            "description": "Script is updated successfully. Has the script details and the links to get/edit/delete the script and to get the script content",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the script. The application or database name may be incorrect, the JSON for the script may be incorrect, or the specified script name may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Scripts"
        ],
        "summary": "Delete Essbase Script",
        "description": "Deletes the specified script in the specified application and database",
        "operationId": "Scripts.deleteScript",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "query",
            "description": "Type of script file",
            "required": false,
            "type": "string",
            "default": "calc"
          }
        ],
        "responses": {
          "204": {
            "description": "Script is deleted successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete the script. The application, database, or script name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/content": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get Essbase Script Contents",
        "description": "Returns the script contents of the specified script name from the specified application and database",
        "operationId": "Scripts.getScriptContent",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "query",
            "description": "Type of script file",
            "required": false,
            "type": "string",
            "default": "calc"
          }
        ],
        "responses": {
          "200": {
            "description": "Script content is retrieved successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get script contents. The application, database, or script name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/validate": {
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Validate Essbase Script",
        "description": "Validates the specified script. Applicable only for calculation scripts.",
        "operationId": "Scripts.validateScript",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Script details.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "File",
            "required": false,
            "type": "string",
            "default": "calc"
          }
        ],
        "responses": {
          "200": {
            "description": "Script is validated successfully."
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to validate the script. The application or database name may be incorrect, or the contents may be incomplete for the specified script name.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "List Essbase Scripts",
        "description": "Returns all the scripts from the specified application and database",
        "operationId": "Scripts.listScripts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "query",
            "description": "Type of script file",
            "required": false,
            "type": "string",
            "default": "calc"
          }
        ],
        "responses": {
          "200": {
            "description": "Scripts are retrieved successfully. Gives the script details along with the links to get/edit/delete the script and to get the script content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScriptList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the scripts. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Create Essbase Script",
        "description": "Creates the script in the specified application and database and returns the created script",
        "operationId": "Scripts.createScript",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Script details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Type of script file",
            "required": false,
            "type": "string",
            "default": "calc"
          }
        ],
        "responses": {
          "200": {
            "description": "Script is created successfully. Has the script details and the links to get/edit/delete the script and to get the script content",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to create the script. The application or database name may be incorrect, the JSON for the script may be incorrect, or the specified script name may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get Essbase Script Permissions",
        "description": "Retrieves permissions for the specified script. Applicable only for calculation scripts.",
        "operationId": "Scripts.getScriptPermissions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions are retrieved successfully for the script",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroupProvisionInfoList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get permissions for the script. The application, database, or script name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Add Essbase Script Permissions",
        "description": "Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.",
        "operationId": "Scripts.addScriptPermission",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User or group details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission is added successfully to the script",
            "schema": {
              "$ref": "#/definitions/UserGroupProvisionInfo"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to add permissions for the script. The application, database, or script name may be incorrect; the user or group ID may be incorrect; or the specified user or group may not have sufficient privileges.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions/{userGroupId}": {
      "delete": {
        "tags": [
          "Scripts"
        ],
        "summary": "Remove Essbase Script Permissions",
        "description": "Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.",
        "operationId": "Scripts.removeScriptPermission",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "Id of the user or group",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "Says whether the userGroupId is a group or not",
            "required": true,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "204": {
            "description": "Permission is removed successfully from the script"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete permissions for the script. The application, database, or script name may be incorrect, or the user or group ID may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/rename": {
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Rename Essbase Script",
        "description": "Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.",
        "operationId": "Scripts.renameScript",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Script rename details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScriptCopy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Script is renamed successfully. Has the script details and the links to get/edit/delete the script and to get the script content",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to rename the script. The application, database, or script name may be incorrect, or the specified script name may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/rtsv": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get Essbase Script RTSVs",
        "description": "Returns the script runtime substitution variables from specified script name",
        "operationId": "Scripts.getRTSVsForScripts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "path",
            "description": "Script name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of RTSVs retrived successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RTSVList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get script RTSVs. The application, database, or script name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/copy": {
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Copy Essbase Script",
        "description": "Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.",
        "operationId": "Scripts.copyScript",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Script copy details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScriptCopy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Script is copied successfully. Has the script details and the links to get/edit/delete the script and to get the script content",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to copy the script. The application, database, or script name may be incorrect, or the specified script name may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "List Sessions",
        "description": "Return list of session currently active for a user or request",
        "operationId": "Sessions.getAllActiveSessions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "application name on which request is performed",
            "required": false,
            "type": "string"
          },
          {
            "name": "database",
            "in": "query",
            "description": "database name on which request is performed",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "user id for which we need all the active sessions. If not provided then by default all the sesions will be retrieved",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "returns list session attributes objects having 'user id', 'session id', 'login time' 'connection source' etc.",
            "schema": {
              "$ref": "#/definitions/SessionAttributes"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Essbase or platform security exception.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete All Sessions",
        "description": "<p>Deletes all the sessions currently active, or kills all the requests currently processing.</p>",
        "operationId": "Sessions.deleteAllActiveSessions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "<p>Application name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "database",
            "in": "query",
            "description": "<p>Database name.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "<p>User ID.</p>",
            "required": false,
            "type": "string"
          },
          {
            "name": "disconnect",
            "in": "query",
            "description": "<p>Disconnect value (Boolean). If false, the request is killed. Otherwise, the session is logged off.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "<p>1. Deletes all the sessions for the parameter 'application', 'database' and 'userid' provided. If no parameters are specified, deletes all active sessions.</p><p>2. Cannot disconnect user. Essbase Error(1051041): Insufficient privilege for this operation.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Essbase or platform security exception.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/sessions/{sessionId}": {
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete Session By ID",
        "description": "<p>Delete a particular session or kill a particular request using the session id.</p>",
        "operationId": "Sessions.deleteSessionWithId",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "disconnect",
            "in": "query",
            "description": "<p>Disconnection value. Default is false, meaning kill the request. If true, disconnect the user session.</p>",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "<p>sessionId of the session to be disconnected or request killed.</p>",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Session or request terminated successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><ol><li>Essbase or platform security exception.</li><li>If the sessionId is incorrect, <code>Error: No session with specified login id.</code></li><li>Cannot disconnect user. Essbase Error(1051041): Insufficient privilege for this operation</li>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dataload/{streamId}": {
      "post": {
        "tags": [
          "Streaming Data Load"
        ],
        "summary": "Push Data",
        "description": "<p>Pushes data for data load. Data can be pushed in chunks in CSV format by repeating this request multiple times.</p>",
        "operationId": "Dataload.streamData",
        "consumes": [
          "text/plain",
          "text/csv"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "<p>Stream ID.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>CSV data.</p>",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data pushed successfully; includes links to push more data and end data load if  <code>links=true</code> parameter is passed.</p>",
            "schema": {
              "$ref": "#/definitions/StreamProcessStartResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to push data. The stream ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Streaming Data Load"
        ],
        "summary": "End Dataload",
        "description": "<p>Ends streaming data load.</p>",
        "operationId": "Dataload.end",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "<p>Stream ID.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data load ended successfully; includes status.</p>",
            "schema": {
              "$ref": "#/definitions/StreamProcessEndResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to end data load. The stream ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dataload": {
      "post": {
        "tags": [
          "Streaming Data Load"
        ],
        "summary": "Start Dataload",
        "description": "<p>Starts streaming data load.</p>",
        "operationId": "Dataload.start",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Data load options such as rule file name and delimiter.</p>",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataLoadStartPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data load started successfully; includes unique stream id which can be passed to subsequent requests. If <code>links=true</code> parameter is passed, also includes links to push more data and end the data load.</p>",
            "schema": {
              "$ref": "#/definitions/StreamProcessStartResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}/{ruleFileName}": {
      "post": {
        "tags": [
          "Streaming Dimension Build"
        ],
        "summary": "Start dimension build for rule file",
        "description": "Starts dimension build for rule file",
        "operationId": "DimensionBuild.startDimBuild",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "Stream ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleFileName",
            "in": "path",
            "description": "Rule File Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Links to push data if links=true query parameter is passed",
            "schema": {
              "$ref": "#/definitions/StreamProcessStartResponse"
            }
          },
          "400": {
            "description": "Validation failed. For example, specified stream id or rule file name is invalid"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Streaming Dimension Build"
        ],
        "summary": "End dimension build for rule file",
        "description": "Ends dimension build for rule file",
        "operationId": "DimensionBuild.endDimBuild",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "Stream ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleFileName",
            "in": "path",
            "description": "Rule File Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Dimension build status and Links to restructure cube if links=true query parameter is passed",
            "schema": {
              "$ref": "#/definitions/StreamProcessEndResponse"
            }
          },
          "400": {
            "description": "Validation failed. For example, specified stream id is invalid or dimension build is not started"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}": {
      "post": {
        "tags": [
          "Streaming Dimension Build"
        ],
        "summary": "Push Data",
        "description": "<p>Pushes data for streaming dimension build.</p>",
        "operationId": "DimensionBuild.streamDimBuildData",
        "consumes": [
          "text/plain",
          "text/csv"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "<p>Stream ID.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>CSV data.</p>",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Data pushed successfully; includes links to push more data and end dimension build if <code>links=true</code> parameter is passed.</p>",
            "schema": {
              "$ref": "#/definitions/StreamProcessStartResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to push data. The stream ID may be invalid, or the dimension build may not have started.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Streaming Dimension Build"
        ],
        "summary": "End Streaming Dimension Build",
        "description": "<p>Ends incremental dimension build and triggers a restructuring of the cube.</p>",
        "operationId": "DimensionBuild.end",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "<p>Stream ID.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Dimension build ended successfully; includes status.</p>",
            "schema": {
              "$ref": "#/definitions/StreamProcessEndResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to end dimension build. The stream ID may be invalid.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/dimbuild": {
      "post": {
        "tags": [
          "Streaming Dimension Build"
        ],
        "summary": "Start Streaming Dimension Build",
        "description": "<p>Starts an incremental dimension build.</p>",
        "operationId": "DimensionBuild.start",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "<p>Database name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "<p>Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  <code>PRESERVE_ALL_DATA</code>.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DimBuildStartPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Dimension build started successfully; includes unique stream id which can be passed to subsequent requests. If <code>links=true</code> parameter is passed, also includes links to start dimension build with rules file.</p>",
            "schema": {
              "$ref": "#/definitions/StreamProcessStartResponse"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate application role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users/actions/delete": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Delete the users specified in the text file",
        "description": "Delete the users specified in the text file",
        "operationId": "Users.deleteUsers",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          "400": {
            "description": "Validation fails. For example, logged in user doesn't have appropriate service role"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "<p>Get details for a specified user ID.</p>",
        "operationId": "Users.get",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>User details returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          },
          "404": {
            "description": "<p><strong>Not Found</strong></p><p>User not found.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate service role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update a user.",
        "operationId": "Users.PUT",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>User updated successfully.</p>",
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate service role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete a user.",
        "operationId": "Users.delete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>User deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate service role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search or Export Users",
        "description": "<p>Get a list of users based on search results, or export users as CSV file.</p>",
        "operationId": "Users.search",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "User ID wildcard pattern. Filter by name of user if header <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "<p>Maximum number of users to return, if header <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>.</p>",
            "required": false,
            "type": "integer",
            "default": -1,
            "format": "int32"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "<p>Value can be <code>all</code> or <code>none</code>. Default value is <code>all</code>, meaning service role and groups are returned for each user. If <code>none</code> is specified, service role and groups are not returned.</p>",
            "required": false,
            "type": "string",
            "default": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "<p>List of users matching search criteria. Response type can be either JSON, XML, or CSV stream, depending on the Accept header. If <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>, the users are returned in the response body. If <code>Accept='application/octet-stream'</code>, the users are returned as a JSON stream.",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate service role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add or Import User(s)",
        "description": "Add or Import user(s).",
        "operationId": "Users.add",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<p>Users details to create, if <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>. Or, CSV file from which to import users, if <code>Accept='application/octet-stream'</code>.</p>",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Successfully added user. If <code>Accept='application/json'</code> or <code>Accept='application/xml'</code>, the added users are returned in the response body. If <code>Accept='application/octet-stream'</code>, the added users are imported but not included in the response body.</p>",
            "schema": {
              "$ref": "#/definitions/UserBean"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>The logged in user may not have the appropriate service role.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/variables": {
      "get": {
        "tags": [
          "Server Variables"
        ],
        "summary": "Retrieves Variables from server",
        "description": "Returns all the variables from the server",
        "operationId": "Variables.listServerVariables",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Variables are retrieved successfully. Gives the variable details along with the links to get/edit/delete each variable",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableList"
              }
            }
          },
          "400": {
            "description": "Fails to get the variables."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Server Variables"
        ],
        "summary": "Creates Variable in server",
        "description": "Creates the variable in the server and returns the created variable",
        "operationId": "Variables.createServerVariable",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Variable details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variable is created successfully. Returns the variable details and the links to get/edit/delete the variable",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "Fails to create the variable. This happens when the variable json is incorrect or when the given variable name already exists"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/variables/{variableName}": {
      "get": {
        "tags": [
          "Server Variables"
        ],
        "summary": "Retrieves Variable from server",
        "description": "Returns the variable details from the server",
        "operationId": "Variables.getServerVariable",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Variable is retrieved successfully. Gives the variable details along with the links to get/edit/delete the variable",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "Fails to get the variable. This happens when the variable name is incorrect"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Server Variables"
        ],
        "summary": "Updates Variable in server",
        "description": "Updates the variable in the server and returns the updated variable",
        "operationId": "Variables.editServerVariable",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Variable details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variable is updated successfully. Returns the variable details and the links to get/edit/delete the variable",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "Fails to update the variable. This happens when the variable json is incorrect or when the given variable name does not exist"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Server Variables"
        ],
        "summary": "Deletes Variable in server",
        "description": "Deletes the given variable in the server",
        "operationId": "Variables.deleteServerVariable",
        "parameters": [
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Variable is deleted successfully."
          },
          "400": {
            "description": "Fails to delete the variable. This happens when the variable name is incorrect"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/variables": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get Database Variables",
        "description": "Returns all substitution variables from the specified application and database.",
        "operationId": "Variables.listVariables",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variables returned successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the variables. The application or database name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Variables"
        ],
        "summary": "Create Database Variable",
        "description": "Creates a substitution variable in the specified application and database, and returns the created variable.",
        "operationId": "Variables.createVariable",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Variable details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variable created successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to create the variable. The application or database name may be incorrect, the JSON for the variable may be incorrect, or the specified variable name may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/databases/{databaseName}/variables/{variableName}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get Database Variable",
        "description": "Returns the substitution variable details from the specified application and database.",
        "operationId": "Variables.getVariable",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variable returned successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the variable. The application, database, or variable name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Variables"
        ],
        "summary": "Update Database Variable",
        "description": "Updates a substitution variable in the specified application and database, and returns the updated variable.",
        "operationId": "Variables.editVariable",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Variable details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variable updated successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the variable. The application or database name may be incorrect, the JSON for the variable may be incorrect, or the specified variable name may not exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Variables"
        ],
        "summary": "Delete Database Variable",
        "description": "Deletes the specified substitution variable from the specified application and database.",
        "operationId": "Variables.deleteVariable",
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "databaseName",
            "in": "path",
            "description": "Database name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Variable deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete the variable. The application, database, or variable name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/variables": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get Application Variables",
        "description": "Returns all substitution variables from the specified application.",
        "operationId": "Variables.listAppVariables",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variables returned successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableList"
              }
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the variables. The application name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "post": {
        "tags": [
          "Variables"
        ],
        "summary": "Create Application Variable",
        "description": "Creates a substitution variable in the specified application, and returns the created variable.",
        "operationId": "Variables.createAppVariable",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Variable details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variable created successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to create the variable. The application or database name may be incorrect, the JSON for the variable may be incorrect, or the specified variable name may already exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/applications/{applicationName}/variables/{variableName}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get Application Variable",
        "description": "Returns substitution variable details from the specified application.",
        "operationId": "Variables.getAppVariable",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variable returned successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get the variable. The application name or variable name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Variables"
        ],
        "summary": "Update Application Variable",
        "description": "Updates the substitution variable in the specified application, and returns the updated variable",
        "operationId": "Variables.editAppVariable",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Variable details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Variable updated successfully, with links to get, edit, or delete.</p>",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to update the variable. The application name may be incorrect, the JSON for the variable may be incorrect, or the specified variable name may not exist.</p>"
          },
          "415": {
            "description": "<p><strong>Not Acceptable</strong></p><p>The media type isn't supported or wasn't specified.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      },
      "delete": {
        "tags": [
          "Variables"
        ],
        "summary": "Delete Application Variable",
        "description": "Deletes the specified substitution variable from the specified application.",
        "operationId": "Variables.deleteAppVariable",
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "description": "<p>Application name.</p>",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableName",
            "in": "path",
            "description": "Variable name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "<p><strong>No Content</strong></p><p>Variable deleted successfully.</p>"
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to delete the variable. The application name or variable name may be incorrect.</p>"
          },
          "500": {
            "description": "<p>Internal Server Error.</p>"
          }
        }
      }
    },
    "/settings/resources": {
      "get": {
        "tags": [
          "Platform Service Settings"
        ],
        "summary": "Get Resource Settings",
        "description": "Returns the platform service resource settings.",
        "operationId": "PSMSettings.getResources",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Platform service resource settings returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get resource settings.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Platform Service Settings"
        ],
        "summary": "Store Resource Settings",
        "description": "Save the platform service resource settings.",
        "operationId": "PSMSettings.setResources",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Platform service resource settings saved successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to save resource settings.</p>"
          }
        }
      }
    },
    "/settings/maintenance": {
      "get": {
        "tags": [
          "Platform Service Settings"
        ],
        "summary": "Get Maintenance Settings",
        "description": "Get the platform service maintenance settings, such as disk space and memory.",
        "operationId": "PSMSettings.getSystemMaintenanceLimits",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Saved platform service resource settings returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get resource settings.</p>"
          }
        }
      }
    },
    "/settings/database": {
      "get": {
        "tags": [
          "Platform Service Settings"
        ],
        "summary": "Get Database Settings",
        "description": "Get the platform service database settings.",
        "operationId": "PSMSettings.getDatabaseSettings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "<p><strong>OK</strong></p><p>Platform service database settings returned successfully.</p>",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to get resource settings.</p>"
          }
        }
      },
      "put": {
        "tags": [
          "Platform Service Settings"
        ],
        "summary": "Store Database Settings",
        "description": "Save the platform service database settings.",
        "operationId": "PSMSettings.setDatabaseSettings",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DatabaseSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to save resource settings.</p>",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          },
          "400": {
            "description": "<p><strong>Bad Request</strong></p><p>Failed to save resource settings.</p>"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "Platform Service Settings"
        ],
        "summary": "Get Available PSM Settings",
        "description": "Returns the platform service settings. This API returns the links to various settings available in this release.",
        "operationId": "PSMSettings.getAll",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "RoleBean": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultRole": {
          "type": "string"
        }
      }
    },
    "Roles": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FilePathDetail": {
      "type": "object",
      "properties": {
        "to": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "GenericEntity": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type"
        },
        "entity": {
          "type": "object"
        }
      }
    },
    "Type": {
      "type": "object",
      "properties": {
        "typeName": {
          "type": "string"
        }
      }
    },
    "CollectionResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ZipFileDetails": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "ApplicationConfigEntry": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "syntax": {
          "type": "string"
        },
        "example": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "configured": {
          "type": "boolean"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ApplicationConfigList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationConfigEntry"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "rel": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Connection": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FILE",
            "DB",
            "ESSBASE",
            "BI"
          ]
        },
        "path": {
          "type": "string"
        },
        "catalog": {
          "type": "boolean"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "encrypted": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        },
        "sid": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "dbURL": {
          "type": "string"
        },
        "dbDriver": {
          "type": "string"
        },
        "datasource": {
          "type": "string"
        },
        "subtype": {
          "type": "string",
          "enum": [
            "TEMPLATE",
            "EXCELFILE",
            "DB",
            "DELIMITEDFILE",
            "FIXEDWIDTHFILE",
            "BI",
            "ESSBASE",
            "JDBC",
            "SPARK",
            "MS_SQL",
            "MYSQL",
            "DB2",
            "ORACLE",
            "FILE"
          ]
        },
        "walletPath": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      },
      "xml": {
        "name": "connection"
      }
    },
    "ConnectionsList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Connection"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WalletLocation": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "ColumnType2": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "STRING",
            "DOUBLE",
            "DATE",
            "TIMESTAMP",
            "LONG"
          ]
        },
        "nullable": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "format": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "system": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "ColumnsType": {
      "type": "object",
      "required": [
        "column"
      ],
      "properties": {
        "column": {
          "type": "array",
          "xml": {
            "name": "Column"
          },
          "items": {
            "xml": {
              "name": "Column"
            },
            "$ref": "#/definitions/ColumnType2"
          }
        }
      }
    },
    "Datasource": {
      "type": "object",
      "properties": {
        "header": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tokensCombineOption": {
          "type": "string",
          "enum": [
            "AND",
            "OR"
          ]
        },
        "sqlProperties": {
          "$ref": "#/definitions/SQLProperties"
        },
        "fileProperties": {
          "$ref": "#/definitions/FileProperties"
        }
      }
    },
    "DatasourcesList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Datasource"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "HeaderType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "cell": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "QueryParamsInfo": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "DOUBLE",
            "DATE",
            "TIMESTAMP",
            "LONG"
          ]
        }
      }
    },
    "DatasourceQueryInfo": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "delimiter": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "DSColumn": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "column"
      }
    },
    "ResultBean": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DSColumn"
          }
        }
      },
      "xml": {
        "name": "Results"
      }
    },
    "ReportBean": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "modifiedTime": {
          "type": "integer",
          "format": "int64"
        },
        "sizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "lockedBy": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "lockedTime": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ReportList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportBean"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ColumnMappingInfo": {
      "type": "object",
      "properties": {
        "dimension": {
          "type": "string"
        },
        "generation": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "DIMENSION",
            "GENERATION",
            "LEVEL0",
            "PARENT_CHILD"
          ]
        },
        "generationNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DrillthroughBean": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "dataSourceName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "columnMapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ColumnMappingInfo"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "drillableRegions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parameterMapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RunTimeParametersInfo"
          }
        },
        "useTempTables": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "RunTimeParametersInfo": {
      "type": "object",
      "properties": {
        "dimension": {
          "type": "string"
        },
        "generation": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "DIMENSION",
            "GENERATION",
            "LEVEL0",
            "PARENT_CHILD"
          ]
        },
        "generationNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ServerConfiguration": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "folder": {
          "type": "string"
        },
        "messageAction": {
          "type": "string"
        },
        "messageLocation": {
          "type": "string"
        }
      }
    },
    "ListLinkResponseObject": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "FilterBean": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterRow"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "FilterList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FilterRow": {
      "type": "object",
      "required": [
        "access",
        "mbrSpec"
      ],
      "properties": {
        "access": {
          "type": "string"
        },
        "mbrSpec": {
          "type": "string"
        }
      }
    },
    "FilterCopy": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "UserGroupProvisionInfo": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "group": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "permission"
      }
    },
    "UserGroupProvisionInfoList": {
      "type": "object",
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupProvisionInfo"
          }
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "result"
      }
    },
    "FilterRowList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterRow"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GroupBean": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "role": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Groups": {
      "type": "object",
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupBean"
          }
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserBean": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "token": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserBean"
          }
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "JobRecordBean": {
      "type": "object",
      "properties": {
        "job_ID": {
          "type": "integer",
          "format": "int64"
        },
        "appName": {
          "type": "string"
        },
        "dbName": {
          "type": "string"
        },
        "jobType": {
          "type": "string"
        },
        "jobfileName": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "statusMessage": {
          "type": "string"
        },
        "jobInputInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "jobOutputInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "CompactDesignation": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "excelSheetName": {
          "type": "string"
        },
        "columnOffset": {
          "type": "integer",
          "format": "int32"
        },
        "badRowListString": {
          "type": "string"
        },
        "nr": {
          "type": "integer",
          "format": "int32"
        },
        "nrh": {
          "type": "integer",
          "format": "int32"
        },
        "compactDesignationColumn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompactDesignationColumn"
          }
        },
        "bsoLimitsExceeded": {
          "type": "boolean"
        },
        "fastAnalysis": {
          "type": "boolean"
        },
        "measureDimensionName": {
          "type": "string"
        },
        "dimDesignationMode": {
          "type": "string",
          "enum": [
            "DIM_DESIGNATION_MODE_ATTRIBS_AS_MULTILEVEL_DIMS",
            "DIM_DESIGNATION_MODE_ATTRIBS_AS_FLAT_DIMS",
            "DIM_DESIGNATION_MODE_ALL_FLAT",
            "DIM_DESIGNATION_MODE_OAV",
            "DIM_DESIGNATION_MODE_OAV_DIM",
            "CONVERT_TO_CSV",
            "DIM_DESIGNATION_MODE_ATTRIBS_AS_ATTRIBS"
          ]
        },
        "namingPriority": {
          "type": "string",
          "enum": [
            "NONE",
            "GENERATIONS",
            "DIMENSIONS"
          ]
        },
        "dateColumnId": {
          "type": "integer",
          "format": "int32"
        },
        "dateFormatString": {
          "type": "string"
        },
        "dateDimString": {
          "type": "string"
        },
        "dateDimensionLeaves": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxDate": {
          "type": "string",
          "format": "date-time"
        },
        "minDate": {
          "type": "string",
          "format": "date-time"
        },
        "tableName": {
          "type": "string"
        },
        "dimCompactDesignationList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimCompactDesignation"
          }
        },
        "query": {
          "type": "string"
        }
      }
    },
    "CompactDesignationColumn": {
      "type": "object",
      "properties": {
        "originalHeaderName": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        },
        "referenceObjectName": {
          "type": "string"
        },
        "objectType": {
          "type": "string"
        },
        "formula": {
          "type": "string"
        },
        "dimensionAlias": {
          "type": "string"
        },
        "externalDimName": {
          "type": "string"
        },
        "solveOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DimCompactDesignation": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "essbaseConnection": {
          "type": "string"
        },
        "genNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "colNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dimGenColumns": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "attribute": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "dimJoin": {
          "type": "string"
        },
        "dimName": {
          "type": "string"
        },
        "attNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "columnTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "TEXT",
              "INTEGER",
              "FLOAT",
              "TIME",
              "DATE",
              "BOOLEAN",
              "EMPTY",
              "UNKNOWN",
              "OUT_OF_RANGE"
            ]
          }
        },
        "uniqCount": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "headerText": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fkcolumnNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JobsInputBean": {
      "type": "object",
      "required": [
        "application",
        "db",
        "jobtype"
      ],
      "properties": {
        "application": {
          "type": "string"
        },
        "db": {
          "type": "string"
        },
        "jobtype": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/ParametersBean"
        }
      }
    },
    "ParametersBean": {
      "type": "object",
      "properties": {
        "rule": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "abortOnError": {
          "type": "string"
        },
        "restructureOption": {
          "type": "string"
        },
        "forceDimBuild": {
          "type": "string"
        },
        "script": {
          "type": "string"
        },
        "option": {
          "type": "string"
        },
        "loaddata": {
          "type": "string"
        },
        "useConnection": {
          "type": "string"
        },
        "connection": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "calc": {
          "type": "string"
        },
        "buildMethod": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "zipFileName": {
          "type": "string"
        },
        "skipdata": {
          "type": "string"
        },
        "threads": {
          "type": "string"
        },
        "overwrite": {
          "type": "string"
        },
        "lcmImportFromStorage": {
          "type": "string"
        },
        "analyzeFileName": {
          "type": "string"
        },
        "analyzeSheetName": {
          "type": "string"
        },
        "deleteExcelOnSuccess": {
          "type": "string"
        },
        "catalogExcelPath": {
          "type": "string"
        },
        "importExcelFileName": {
          "type": "string"
        },
        "recreateApplication": {
          "type": "string"
        },
        "createFiles": {
          "type": "string"
        },
        "executeScript": {
          "type": "string"
        },
        "buildOption": {
          "type": "string"
        },
        "copyToStorage": {
          "type": "string"
        },
        "filesystemcopy": {
          "type": "string"
        },
        "dataLevel": {
          "type": "string"
        },
        "columnFormat": {
          "type": "string"
        },
        "targetApplicationName": {
          "type": "string"
        },
        "partialDataExpression": {
          "type": "string"
        },
        "includeServerLevel": {
          "type": "string",
          "xml": {
            "name": "include-server-level",
            "attribute": true
          }
        },
        "enableSandboxing": {
          "type": "string"
        },
        "dbType": {
          "type": "string"
        },
        "dimDesignationMode": {
          "type": "string"
        },
        "unstructuredAnalysis": {
          "$ref": "#/definitions/CompactDesignation"
        },
        "ratioToStop": {
          "type": "string"
        },
        "basedOnQueryData": {
          "type": "string"
        },
        "enableAlternateRollups": {
          "type": "string"
        },
        "compress": {
          "type": "string"
        },
        "generateArtifactList": {
          "type": "string",
          "xml": {
            "name": "generateartifactlist",
            "attribute": true
          }
        },
        "artifactList": {
          "type": "string"
        },
        "verbose": {
          "type": "string"
        },
        "disasterRecovery": {
          "type": "string"
        },
        "force": {
          "type": "string"
        },
        "backupType": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "maxParallel": {
          "type": "string"
        },
        "selectedDimensions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rtsv": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RTSV"
          }
        },
        "bufferId": {
          "type": "integer",
          "format": "int32"
        },
        "bufferIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "commitOption": {
          "type": "string"
        },
        "actionType": {
          "type": "string"
        },
        "termOption": {
          "type": "string"
        },
        "discoverDimensionTables": {
          "type": "string"
        },
        "exportDynamicBlocks": {
          "type": "string"
        }
      }
    },
    "RTSV": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "allowMissing": {
          "type": "boolean"
        },
        "dimension": {
          "type": "string"
        },
        "singleChoice": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "NUMBER",
            "DATE",
            "MEMBER"
          ]
        },
        "value": {
          "type": "object"
        },
        "limit": {
          "type": "string"
        }
      }
    },
    "JobStatisticsBean": {
      "type": "object",
      "properties": {
        "errCt": {
          "type": "integer",
          "format": "int64"
        },
        "succesCt": {
          "type": "integer",
          "format": "int64"
        },
        "warningCt": {
          "type": "integer",
          "format": "int64"
        },
        "runningCt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JobRecordPaginatedResultWrapper": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobRecordBean"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LocationAliasBean": {
      "type": "object",
      "properties": {
        "aliasName": {
          "type": "string"
        },
        "connectionName": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "applicationName": {
          "type": "string"
        },
        "databaseName": {
          "type": "string"
        },
        "applicationLevelConnection": {
          "type": "boolean"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "LocationAliasList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationAliasBean"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LockObject": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "user": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "OUTLINE",
            "CALCSCRIPT",
            "REPORT",
            "RULES",
            "ALIAS",
            "STRUCTURE",
            "ASCBACKUP",
            "BINBACKUP",
            "EXCEL",
            "XLSX",
            "XLSM",
            "MAXL",
            "ZIP",
            "CSV",
            "LOTUS2",
            "LOTUS3",
            "TEXT",
            "LOTUS4",
            "WIZARD",
            "PARTITION",
            "SELECTION",
            "LRO",
            "EQD",
            "XML",
            "JAVA_CDF",
            "MAX",
            "BACKUP",
            "WORKSHEET",
            "DATA",
            "ERROR",
            "OUT",
            "GROOVY",
            "DRILLTHROUGH",
            "ALL",
            "MDX"
          ]
        },
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "LockObjectList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockObject"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LockBlock": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "user": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LockBlockList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockBlock"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "About": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "build": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "xml": {
        "name": "about"
      }
    },
    "CopyRenameBean": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "CubeCopy": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "$ref": "#/definitions/To"
        }
      }
    },
    "To": {
      "type": "object",
      "required": [
        "database"
      ],
      "properties": {
        "database": {
          "type": "string"
        },
        "application": {
          "type": "string"
        }
      }
    },
    "Cube": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "creationTime": {
          "type": "integer",
          "format": "int64"
        },
        "modifiedBy": {
          "type": "string"
        },
        "modifiedTime": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ASO",
            "BSO"
          ]
        },
        "applicationRole": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "CubeList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cube"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Application": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "creationTime": {
          "type": "integer",
          "format": "int64"
        },
        "modifiedBy": {
          "type": "string"
        },
        "modifiedTime": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ASO",
            "BSO"
          ]
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "connectedUsersCount": {
          "type": "integer",
          "format": "int32"
        },
        "role": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "CreateApplication": {
      "type": "object",
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "databaseName": {
          "type": "string"
        },
        "allowDuplicates": {
          "type": "boolean"
        },
        "enableScenario": {
          "type": "boolean"
        },
        "memberCount": {
          "type": "integer",
          "format": "int32"
        },
        "databaseType": {
          "type": "string"
        },
        "dbType": {
          "type": "string",
          "enum": [
            "NORMAL",
            "CURRENCY",
            "ASO"
          ]
        },
        "appType": {
          "type": "string",
          "enum": [
            "NATIVE",
            "UTF8"
          ]
        },
        "memberPrefix": {
          "type": "string"
        }
      }
    },
    "ApplicationList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Application"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "StringCollectionResponse": {
      "type": "object",
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "Result"
      }
    },
    "BOEOutput": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "string"
        }
      }
    },
    "JAXBElement": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/QName"
        },
        "value": {
          "type": "object"
        },
        "nil": {
          "type": "boolean"
        },
        "globalScope": {
          "type": "boolean"
        },
        "typeSubstituted": {
          "type": "boolean"
        }
      }
    },
    "JAXBElementObject": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/QName"
        },
        "value": {
          "type": "object"
        },
        "nil": {
          "type": "boolean"
        },
        "globalScope": {
          "type": "boolean"
        },
        "typeSubstituted": {
          "type": "boolean"
        }
      }
    },
    "OtlEditMain": {
      "type": "object",
      "properties": {
        "editActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JAXBElementObject"
          }
        },
        "otlVersion": {
          "type": "integer",
          "xml": {
            "attribute": true
          }
        },
        "validate": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "validateFormulas": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "keepTransaction": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        },
        "restructOption": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "enum": [
            "ALL_DATA",
            "NO_DATA",
            "LOW_DATA",
            "IN_DATA"
          ]
        },
        "jsonformatLog": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "otlEditMain",
        "namespace": "mbredit"
      }
    },
    "QName": {
      "type": "object",
      "properties": {
        "namespaceURI": {
          "type": "string"
        },
        "localPart": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        }
      }
    },
    "DBSizeList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatabaseSizeStatistics"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DatabaseSizeStatistics": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "indexSize": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DimensionBean": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "members": {
          "type": "integer",
          "format": "int32"
        },
        "storedMembers": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "DimensionList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimensionBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GenerationLevel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "actualName": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "unique": {
          "type": "boolean"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "GenerationLevelList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenerationLevel"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Preference": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "AVClientInfo": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResetPasswordBean": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resource"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataLoadBuffer": {
      "type": "object",
      "properties": {
        "bufferId": {
          "type": "integer",
          "format": "int64"
        },
        "duplicateAggregationMethod": {
          "type": "string",
          "enum": [
            "ADD",
            "ASSUME_EQUAL",
            "USE_LAST"
          ]
        },
        "loadBufferOptions": {
          "type": "string",
          "enum": [
            "IGNORE_NONE",
            "IGNORE_MISSING_VALUES",
            "IGNORE_ZERO_VALUES",
            "IGNORE_MISSING_AND_ZERO_VALUES"
          ]
        },
        "resourceUsage": {
          "type": "integer",
          "format": "int64",
          "description": "Percentage of the total load buffer resources that the load buffer will be allowed to use; must be within [0, 100], and the value of 0 is interpreted as default, which is currently 100."
        }
      }
    },
    "LoadBuffersList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataLoadBuffer"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MergeSilceOption": {
      "type": "object",
      "properties": {
        "mergeOption": {
          "type": "string",
          "enum": [
            "ALL",
            "INCREMENTAL"
          ]
        }
      }
    },
    "ColumnSuppression": {
      "type": "object",
      "properties": {
        "invalid": {
          "type": "boolean"
        },
        "derived": {
          "type": "boolean"
        },
        "missing": {
          "type": "boolean"
        },
        "zero": {
          "type": "boolean"
        },
        "underScore": {
          "type": "boolean"
        },
        "noAccess": {
          "type": "boolean"
        },
        "emptyBlocks": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        }
      }
    },
    "FormulaRetention": {
      "type": "object",
      "properties": {
        "comments": {
          "type": "boolean"
        },
        "zoom": {
          "type": "boolean"
        },
        "focus": {
          "type": "boolean"
        },
        "retrive": {
          "type": "boolean"
        },
        "fill": {
          "type": "boolean"
        }
      }
    },
    "Preferences": {
      "type": "object",
      "properties": {
        "maxRows": {
          "type": "integer",
          "format": "int64"
        },
        "indentation": {
          "type": "string",
          "enum": [
            "NONE",
            "SUBITEMS",
            "TOTALS"
          ]
        },
        "navigate": {
          "type": "boolean"
        },
        "includeSelection": {
          "type": "boolean"
        },
        "repeatMemberLabels": {
          "type": "boolean"
        },
        "withinSelectedGroup": {
          "type": "boolean"
        },
        "removeUnSelectedGroup": {
          "type": "boolean"
        },
        "includeDescriptionLabel": {
          "type": "boolean"
        },
        "missingText": {
          "type": "string"
        },
        "noAccessText": {
          "type": "string"
        },
        "formulaRetention": {
          "$ref": "#/definitions/FormulaRetention"
        },
        "maxColumns": {
          "type": "integer",
          "format": "int64"
        },
        "rowSupression": {
          "$ref": "#/definitions/RowSuppression"
        },
        "columnSupression": {
          "$ref": "#/definitions/ColumnSuppression"
        },
        "cellText": {
          "type": "boolean"
        },
        "zoomIn": {
          "$ref": "#/definitions/ZoomIn"
        }
      }
    },
    "RowSuppression": {
      "type": "object",
      "properties": {
        "invalid": {
          "type": "boolean"
        },
        "derived": {
          "type": "boolean"
        },
        "missing": {
          "type": "boolean"
        },
        "zero": {
          "type": "boolean"
        },
        "underScore": {
          "type": "boolean"
        },
        "noAccess": {
          "type": "boolean"
        },
        "emptyBlocks": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        }
      }
    },
    "ZoomIn": {
      "type": "object",
      "properties": {
        "ancestor": {
          "type": "string",
          "enum": [
            "TOP",
            "BOTTOM"
          ]
        },
        "mode": {
          "type": "string",
          "enum": [
            "CHILDREN",
            "DESCENDENTS",
            "BASE"
          ]
        }
      }
    },
    "Data": {
      "type": "object",
      "properties": {
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridRange"
          }
        }
      }
    },
    "Grid": {
      "type": "object",
      "properties": {
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridDimension"
          }
        },
        "alias": {
          "type": "string"
        },
        "slice": {
          "$ref": "#/definitions/Slice"
        }
      }
    },
    "GridDimension": {
      "type": "object",
      "properties": {
        "column": {
          "type": "integer",
          "format": "int32"
        },
        "row": {
          "type": "integer",
          "format": "int32"
        },
        "pov": {
          "type": "string"
        },
        "expanded": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "GridRange": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enumIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "texts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "statuses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataFormats": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "end": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Slice": {
      "type": "object",
      "properties": {
        "rows": {
          "type": "integer",
          "format": "int32"
        },
        "columns": {
          "type": "integer",
          "format": "int32"
        },
        "dirtyTexts": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "dirtyCells": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "data": {
          "$ref": "#/definitions/Data"
        }
      }
    },
    "MDXOperation": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        }
      }
    },
    "DVGrid": {
      "type": "object",
      "properties": {
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridDimension"
          }
        },
        "columns": {
          "type": "integer",
          "format": "int32"
        },
        "rows": {
          "type": "integer",
          "format": "int32"
        },
        "filters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "updatedCells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DVUpdatedCell"
          }
        },
        "rowHeaderLevels": {
          "type": "integer",
          "format": "int32"
        },
        "columnHeaderLevels": {
          "type": "integer",
          "format": "int32"
        },
        "getnRowHeaderLevels": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DVUpdatedCell": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "rowHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "columnHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GridOperation": {
      "type": "object",
      "properties": {
        "grid": {
          "$ref": "#/definitions/Grid"
        },
        "action": {
          "type": "string",
          "enum": [
            "zoomin",
            "zoomout",
            "keeponly",
            "removeonly",
            "refresh",
            "pivot",
            "pivotToPOV",
            "submit"
          ]
        },
        "alias": {
          "type": "string"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ranges": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "HPA": {
      "type": "object",
      "properties": {
        "interval": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "PerformanceFile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "lastmodifiedMillis": {
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PerformanceFiles": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerformanceFile"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Layout": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/LayoutHeader"
        },
        "spec": {
          "$ref": "#/definitions/LayoutSpec"
        }
      }
    },
    "LayoutData": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "types": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "texts": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "dataFormats": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "statuses": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "enumIds": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "LayoutDimension": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "hidden": {
          "type": "boolean"
        },
        "expanded": {
          "type": "boolean"
        },
        "axis": {
          "type": "string",
          "enum": [
            "COLUMN",
            "ROW",
            "POV"
          ]
        },
        "position": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LayoutGrid": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayoutDimension"
          }
        },
        "data": {
          "$ref": "#/definitions/LayoutData"
        }
      }
    },
    "LayoutHeader": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "databaseDefault": {
          "type": "boolean"
        },
        "userDefault": {
          "type": "boolean"
        },
        "session": {
          "type": "boolean"
        }
      }
    },
    "LayoutPreferences": {
      "type": "object",
      "properties": {
        "indentation": {
          "type": "string",
          "enum": [
            "NONE",
            "SUBITEMS",
            "TOTALS"
          ]
        },
        "rowSuppression": {
          "$ref": "#/definitions/Suppression"
        },
        "columnSuppression": {
          "$ref": "#/definitions/Suppression"
        },
        "cellText": {
          "type": "boolean"
        },
        "zoomIn": {
          "$ref": "#/definitions/ZoomIn"
        },
        "navigate": {
          "type": "boolean"
        },
        "includeSelection": {
          "type": "boolean"
        },
        "repeatMemberLabels": {
          "type": "boolean"
        },
        "withinSelectedGroup": {
          "type": "boolean"
        },
        "removeUnSelectedGroup": {
          "type": "boolean"
        },
        "includeDescriptionLabel": {
          "type": "boolean"
        },
        "missingText": {
          "type": "string"
        },
        "noAccessText": {
          "type": "string"
        },
        "maxRows": {
          "type": "integer",
          "format": "int32"
        },
        "formulaRetention": {
          "$ref": "#/definitions/FormulaRetention"
        }
      }
    },
    "LayoutSpec": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "grid": {
          "$ref": "#/definitions/LayoutGrid"
        },
        "preferences": {
          "$ref": "#/definitions/LayoutPreferences"
        }
      }
    },
    "Suppression": {
      "type": "object",
      "properties": {
        "missing": {
          "type": "boolean"
        },
        "invalid": {
          "type": "boolean"
        },
        "derived": {
          "type": "boolean"
        },
        "zero": {
          "type": "boolean"
        },
        "underScore": {
          "type": "boolean"
        },
        "noAccess": {
          "type": "boolean"
        },
        "emptyBlocks": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        }
      }
    },
    "DefaultLayoutBean": {
      "type": "object",
      "properties": {
        "userDefault": {
          "type": "boolean"
        },
        "databaseDefault": {
          "type": "boolean"
        }
      }
    },
    "LayoutMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "userDefault": {
          "type": "boolean"
        },
        "dbDefault": {
          "type": "boolean"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "Layouts": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayoutMetadata"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MDXInput": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/NamedQueriesPreferences"
        }
      }
    },
    "NamedQueriesPreferences": {
      "type": "object",
      "properties": {
        "dataless": {
          "type": "boolean"
        },
        "hideRestrictedData": {
          "type": "boolean"
        },
        "cellAttributes": {
          "type": "boolean"
        },
        "formatString": {
          "type": "boolean"
        },
        "formatValues": {
          "type": "boolean"
        },
        "meaninglessCells": {
          "type": "boolean"
        },
        "textList": {
          "type": "boolean"
        },
        "urlDrillThrough": {
          "type": "boolean"
        },
        "memberIdentifierType": {
          "type": "string",
          "enum": [
            "NAME",
            "ALIAS",
            "UNIQUE_NAME"
          ]
        }
      }
    },
    "Queries": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryMetadata"
          }
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "QueryMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "MDX",
            "DATA_SOURCE"
          ]
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "NamedQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "MDX",
            "DATA_SOURCE"
          ]
        },
        "query": {
          "$ref": "#/definitions/Query"
        }
      }
    },
    "Query": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "spec": {
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/NamedQueriesPreferences"
        }
      }
    },
    "BufferSettings": {
      "type": "object",
      "properties": {
        "dataRetrievalBufferSize": {
          "type": "integer",
          "format": "int64"
        },
        "dataRetrievalSortBufferSize": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "buffers"
      }
    },
    "CacheSettings": {
      "type": "object",
      "properties": {
        "cacheMemoryLocking": {
          "type": "boolean"
        },
        "indexCacheSetting": {
          "type": "integer",
          "format": "int64"
        },
        "indexCacheCurrentValue": {
          "type": "integer",
          "format": "int64"
        },
        "dataFileCacheSetting": {
          "type": "integer",
          "format": "int64"
        },
        "dataFileCacheCurrentValue": {
          "type": "integer",
          "format": "int64"
        },
        "dataCacheSetting": {
          "type": "integer",
          "format": "int64"
        },
        "dataCacheCurrentValue": {
          "type": "integer",
          "format": "int64"
        },
        "indexPageSetting": {
          "type": "integer",
          "format": "int32"
        },
        "indexPageCurrentValue": {
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "caches"
      }
    },
    "CalculationSettings": {
      "type": "object",
      "properties": {
        "aggregateMissingValues": {
          "type": "boolean"
        },
        "createBlocksOnEquations": {
          "type": "boolean"
        },
        "twoPassCalculation": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "calculation"
      }
    },
    "CompressionSettings": {
      "type": "object",
      "properties": {
        "dimensionName": {
          "type": "string"
        },
        "averageBundleFill": {
          "type": "number",
          "format": "double"
        },
        "averageValueLength": {
          "type": "number",
          "format": "double"
        },
        "isCompression": {
          "type": "boolean"
        },
        "level0MB": {
          "type": "number",
          "format": "double"
        },
        "storedLevel0Members": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "GeneralSettings": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "queryTracking": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "general"
      }
    },
    "SettingsList": {
      "type": "object",
      "properties": {
        "general": {
          "$ref": "#/definitions/GeneralSettings"
        },
        "startup": {
          "$ref": "#/definitions/StartupSettings"
        },
        "calculation": {
          "$ref": "#/definitions/CalculationSettings"
        },
        "buffers": {
          "$ref": "#/definitions/BufferSettings"
        },
        "compression": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompressionSettings"
          }
        },
        "caches": {
          "$ref": "#/definitions/CacheSettings"
        },
        "transactions": {
          "$ref": "#/definitions/TransactionSettings"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      },
      "xml": {
        "name": "settings"
      }
    },
    "StartupSettings": {
      "type": "object",
      "properties": {
        "allowUsersToStartDatabase": {
          "type": "boolean"
        },
        "startDatabaseWhenApplicationStarts": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "startup"
      }
    },
    "TransactionSettings": {
      "type": "object",
      "properties": {
        "committedAccess": {
          "type": "boolean"
        },
        "concurrencyWaitSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "concurrencyPreImageAccess": {
          "type": "boolean"
        },
        "commitBlocks": {
          "type": "integer",
          "format": "int64"
        },
        "commitRows": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "transactions"
      }
    },
    "PatchElement": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "StatisticsDimensions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "levels": {
          "type": "string"
        },
        "bits": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "StorageStatistics": {
      "type": "object",
      "properties": {
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatisticsDimensions"
          }
        },
        "maxKeyLengthBits": {
          "type": "integer",
          "format": "int32"
        },
        "maxKeyLengthBytes": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfInputLevelCells": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfIncrementalDataSlices": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfIncrementalInputCells": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfAggregateViews": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfAggregateCells": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfIncrementalAggregateCells": {
          "type": "integer",
          "format": "int32"
        },
        "costOfQueryingIncrementalData": {
          "type": "number",
          "format": "double"
        },
        "inputLevelDataSize": {
          "type": "integer",
          "format": "int32"
        },
        "aggregateDataSize": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfExistingBlocks": {
          "type": "number",
          "format": "double"
        },
        "blockSize": {
          "type": "integer",
          "format": "int32"
        },
        "potentialNumberOfBlocks": {
          "type": "number",
          "format": "double"
        },
        "existingLevelZeroBlocks": {
          "type": "number",
          "format": "double"
        },
        "existingUpperLevelBlocks": {
          "type": "number",
          "format": "double"
        },
        "blockDensity": {
          "type": "number",
          "format": "double"
        },
        "percentageOfMaximumBlocksExisting": {
          "type": "number",
          "format": "double"
        },
        "compressionRatio": {
          "type": "number",
          "format": "double"
        },
        "averageClusteringRatio": {
          "type": "number",
          "format": "double"
        },
        "pageFileSize": {
          "type": "integer",
          "format": "int64"
        },
        "indexFileSize": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RuntimeStatistics": {
      "type": "object",
      "properties": {
        "cacheHitRatio": {
          "type": "number",
          "format": "double"
        },
        "currentCacheSize": {
          "type": "number",
          "format": "double"
        },
        "currentCacheSizeLimit": {
          "type": "number",
          "format": "double"
        },
        "pageReadsSinceLastStartup": {
          "type": "number",
          "format": "double"
        },
        "pageWritesSinceLastStartup": {
          "type": "number",
          "format": "double"
        },
        "pageSize": {
          "type": "number",
          "format": "double"
        },
        "diskSpaceAllocatedForData": {
          "type": "number",
          "format": "double"
        },
        "diskSpaceUsedByData": {
          "type": "number",
          "format": "double"
        },
        "temporaryDiskSpaceAllocated": {
          "type": "number",
          "format": "double"
        },
        "temporaryDiskSpaceUsed": {
          "type": "number",
          "format": "double"
        },
        "hitRatioOnIndexCache": {
          "type": "number",
          "format": "double"
        },
        "hitRatioOnDataCache": {
          "type": "number",
          "format": "double"
        },
        "numberOfIndexPageReads": {
          "type": "number",
          "format": "double"
        },
        "numberOfIndexPageWrites": {
          "type": "number",
          "format": "double"
        },
        "numberOfDataBlockReads": {
          "type": "number",
          "format": "double"
        },
        "numberOfDataBlockWrites": {
          "type": "number",
          "format": "double"
        },
        "hitRatioOnDataFileCache": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "AttributeOutlineSettings": {
      "type": "object",
      "properties": {
        "prefixSuffixValue": {
          "type": "string"
        },
        "prefixSuffixSeparator": {
          "type": "string"
        },
        "prefixSuffixFormat": {
          "type": "string"
        },
        "trueMemberName": {
          "type": "string"
        },
        "falseMemberName": {
          "type": "string"
        },
        "dateMemberNames": {
          "type": "string"
        },
        "numericRangesRepresent": {
          "type": "string"
        },
        "calcDimensionName": {
          "type": "string"
        },
        "calcSumMember": {
          "type": "string"
        },
        "calcCountMember": {
          "type": "string"
        },
        "calcMinimumMember": {
          "type": "string"
        },
        "calcMaximumMember": {
          "type": "string"
        },
        "calcAverageMember": {
          "type": "string"
        }
      },
      "xml": {
        "name": "attributes"
      }
    },
    "OutlineDateFormat": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "xml": {
        "name": "dateformats"
      }
    },
    "QueryTrackingInputs": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        }
      }
    },
    "GeneralStatistics": {
      "type": "object",
      "properties": {
        "databaseStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "databaseElapsedTime": {
          "type": "string"
        },
        "numberOfConnections": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfDimensions": {
          "type": "integer",
          "format": "int32"
        },
        "loadStatus": {
          "type": "string"
        }
      }
    },
    "StatisticsList": {
      "type": "object",
      "properties": {
        "general": {
          "$ref": "#/definitions/GeneralStatistics"
        },
        "storage": {
          "$ref": "#/definitions/StorageStatistics"
        },
        "runtime": {
          "$ref": "#/definitions/RuntimeStatistics"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      },
      "xml": {
        "name": "statistics"
      }
    },
    "GeneralOutlineSettings": {
      "type": "object",
      "properties": {
        "caseSensitiveMembers": {
          "type": "boolean"
        },
        "outlineType": {
          "type": "string"
        },
        "allowDuplicateMemberNames": {
          "type": "boolean"
        },
        "typeMeasuresEnabled": {
          "type": "boolean"
        },
        "dateFormat": {
          "type": "string"
        },
        "varyingAttributesEnabled": {
          "type": "boolean"
        },
        "timeModified": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "general"
      }
    },
    "OutlineSettingsList": {
      "type": "object",
      "properties": {
        "general": {
          "$ref": "#/definitions/GeneralOutlineSettings"
        },
        "attributes": {
          "$ref": "#/definitions/AttributeOutlineSettings"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      },
      "xml": {
        "name": "outlineSettings"
      }
    },
    "AppGeneralSettings": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "logLevelAsString": {
          "type": "string"
        },
        "timeoutOnDataBlockLocks": {
          "type": "integer",
          "format": "int64"
        },
        "maxAttachmentFileSizeInKbs": {
          "type": "integer",
          "format": "int64"
        },
        "pendingCacheSizeLimitInMbs": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "general"
      }
    },
    "AppSecuritySettings": {
      "type": "object",
      "properties": {
        "allowCommands": {
          "type": "boolean"
        },
        "allowConnects": {
          "type": "boolean"
        },
        "allowUpdates": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "security"
      }
    },
    "AppSettingsList": {
      "type": "object",
      "properties": {
        "general": {
          "$ref": "#/definitions/AppGeneralSettings"
        },
        "startup": {
          "$ref": "#/definitions/AppStartupSettings"
        },
        "security": {
          "$ref": "#/definitions/AppSecuritySettings"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      },
      "xml": {
        "name": "settings"
      }
    },
    "AppStartupSettings": {
      "type": "object",
      "properties": {
        "allowUsersToStartApplication": {
          "type": "boolean"
        },
        "startApplicationWhenServerStarts": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "startup"
      }
    },
    "ApplicationStatistics": {
      "type": "object",
      "properties": {
        "applicationStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "applicationElapsedTime": {
          "type": "string"
        },
        "numberOfConnections": {
          "type": "integer",
          "format": "int32"
        },
        "loadStatus": {
          "type": "string"
        }
      }
    },
    "ExportOptions": {
      "type": "object",
      "properties": {
        "aliasTable": {
          "type": "string"
        },
        "dimensions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tree": {
          "type": "boolean"
        }
      }
    },
    "MemberBean": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dimensionName": {
          "type": "string"
        },
        "numberOfChildren": {
          "type": "integer",
          "format": "int32"
        },
        "levelNumber": {
          "type": "integer",
          "format": "int32"
        },
        "generationNumber": {
          "type": "integer",
          "format": "int32"
        },
        "aliases": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "activeAliasName": {
          "type": "string"
        },
        "memberHasUniqueName": {
          "type": "boolean"
        },
        "uniqueName": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "uniqueId": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "NUMERIC",
            "SMARTLIST",
            "DATE"
          ]
        },
        "memberSolveOrder": {
          "type": "integer",
          "format": "int32"
        },
        "descendantsCount": {
          "type": "integer",
          "format": "int64"
        },
        "previousSiblingsCount": {
          "type": "integer",
          "format": "int32"
        },
        "dimension": {
          "type": "boolean"
        },
        "attribute": {
          "type": "boolean"
        },
        "account": {
          "type": "boolean"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "RestCollectionResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "hasMore": {
          "type": "boolean"
        },
        "totalResults": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "AreaBean": {
      "type": "object",
      "properties": {
        "sourceArea": {
          "type": "string"
        },
        "targetArea": {
          "type": "string"
        },
        "sourceCellCount": {
          "type": "integer",
          "format": "int64"
        },
        "targetCellCount": {
          "type": "integer",
          "format": "int64"
        },
        "slices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberMappingBean"
          }
        }
      }
    },
    "ConnectionInfoBean": {
      "type": "object",
      "properties": {
        "connectionName": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "applicationName": {
          "type": "string"
        },
        "databaseName": {
          "type": "string"
        },
        "datasourceName": {
          "type": "string"
        },
        "measuresDimensionName": {
          "type": "string"
        },
        "essbaseToColumnMap": {
          "$ref": "#/definitions/EsbToColMap"
        },
        "essbaseToDataSourceMap": {
          "$ref": "#/definitions/EssToDsMapDTO"
        },
        "alterCredentials": {
          "type": "boolean"
        },
        "applicationLevelConnection": {
          "type": "boolean"
        },
        "applicationLevelDatasource": {
          "type": "boolean"
        }
      }
    },
    "Dimension": {
      "type": "object",
      "properties": {
        "generations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Level"
          }
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Level"
          }
        },
        "allowassociationChanges": {
          "type": "boolean"
        },
        "allowFormulaChanges": {
          "type": "boolean"
        },
        "allowPropertyChanges": {
          "type": "boolean"
        },
        "allowUDAChanges": {
          "type": "boolean"
        },
        "measureOptions": {
          "$ref": "#/definitions/MeasureOptions"
        },
        "aggregateLevelUsage": {
          "type": "integer",
          "format": "int32"
        },
        "addMemberOption": {
          "type": "string",
          "enum": [
            "GENERATION",
            "SIBLING_LOWEST_LEVEL",
            "CHILD",
            "SIBLING_MATCHING_STRING",
            "LEVEL",
            "PARENT_CHILD",
            "GEN_NULLS",
            "LEVEL_NULLS"
          ]
        },
        "attributeOptions": {
          "$ref": "#/definitions/AttributeOptions"
        },
        "configOption": {
          "type": "string",
          "enum": [
            "EXISTING",
            "DENSE",
            "SPARSE"
          ]
        },
        "unique": {
          "type": "string",
          "enum": [
            "EXISTING",
            "UNIQUE",
            "DUPLICATE",
            "NONE"
          ]
        },
        "hierarchyType": {
          "type": "string",
          "enum": [
            "EXISTING",
            "MULTIPLE",
            "STORED",
            "DYNAMIC"
          ]
        },
        "sortOption": {
          "type": "string",
          "enum": [
            "NONE",
            "ASCENDING",
            "DESCENDING"
          ]
        },
        "storageType": {
          "type": "string",
          "enum": [
            "EXISTING",
            "STORE",
            "NEVER_SHARE",
            "LABEL_ONLY",
            "DYNAMIC_CALC_STORE",
            "DYNAMIC_CALC"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "EXISTING",
            "NONE",
            "ACCOUNTS",
            "TIME",
            "COUNTRY",
            "ATTRIBUTES"
          ]
        },
        "updateOption": {
          "type": "string",
          "enum": [
            "MERGE",
            "REMOVE_UNSPECIFIED"
          ]
        },
        "allowMoves": {
          "type": "string",
          "enum": [
            "NOTOK",
            "OK",
            "IGNORE",
            "GEN2",
            "NOTGEN2"
          ]
        },
        "solveOrder": {
          "type": "integer",
          "format": "int32"
        },
        "createAttributeMembers": {
          "type": "boolean"
        },
        "share": {
          "type": "boolean"
        },
        "incrementalSort": {
          "type": "boolean"
        },
        "autoFixSharedMember": {
          "type": "boolean"
        },
        "flexible": {
          "type": "boolean"
        },
        "memberName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "dimensionSolveOrder": {
          "type": "integer",
          "format": "int32"
        },
        "added": {
          "type": "boolean"
        }
      }
    },
    "EsbToColMap": {
      "type": "object",
      "properties": {
        "arr": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EsbToColMapInfo"
          }
        }
      }
    },
    "EsbToColMapInfo": {
      "type": "object",
      "properties": {
        "essbaseName": {
          "type": "string"
        },
        "columnName": {
          "type": "string"
        }
      }
    },
    "EssToDsMapDTO": {
      "type": "object",
      "required": [
        "dimensions"
      ],
      "properties": {
        "dimensions": {
          "type": "array",
          "items": {
            "xml": {
              "name": "dimensions"
            },
            "$ref": "#/definitions/Dimension"
          }
        }
      },
      "xml": {
        "name": "EssToDsMapDTO"
      }
    },
    "Generation": {
      "type": "object",
      "required": [
        "columnName",
        "generationNumber"
      ],
      "properties": {
        "generationNumber": {
          "type": "integer",
          "format": "int32"
        },
        "columnName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Generation"
      }
    },
    "MemberMappingBean": {
      "type": "object",
      "properties": {
        "sourceMember": {
          "type": "string"
        },
        "targetMember": {
          "type": "string"
        }
      }
    },
    "PartitionBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updatable": {
          "type": "boolean"
        },
        "isNew": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        },
        "sourceInfo": {
          "$ref": "#/definitions/ConnectionInfoBean"
        },
        "targetInfo": {
          "$ref": "#/definitions/ConnectionInfoBean"
        },
        "areas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AreaBean"
          }
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberMappingBean"
          }
        },
        "errorMessage": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "PartitionList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionBean"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PropertyEntry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "PropertyList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyEntry"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DatabaseProvisionReportItem": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProvisionReportItem"
          }
        }
      }
    },
    "DatabaseProvisionReportItemList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatabaseProvisionReportItem"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ProvisionReportItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "inheritedFromGroups": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApplicationProvisionReportItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roles": {
          "$ref": "#/definitions/ProvisionReportItemList"
        },
        "filters": {
          "$ref": "#/definitions/DatabaseProvisionReportItemList"
        },
        "scripts": {
          "$ref": "#/definitions/DatabaseProvisionReportItemList"
        }
      }
    },
    "ApplicationProvisionReportItemList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationProvisionReportItem"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MainProvisionReport": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/ServiceProvisionReportItem"
        },
        "applications": {
          "$ref": "#/definitions/ApplicationProvisionReportItemList"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ProvisionReportItemList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProvisionReportItem"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ServiceProvisionReportItem": {
      "type": "object",
      "properties": {
        "roles": {
          "$ref": "#/definitions/ProvisionReportItemList"
        }
      }
    },
    "RulePreviewOutput": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "AttributeBuildProperties": {
      "type": "object",
      "properties": {
        "rangeIncrementValue": {
          "type": "number",
          "format": "double"
        },
        "rangeStartValue": {
          "type": "number",
          "format": "double"
        },
        "removeAll": {
          "type": "boolean"
        },
        "useRanges": {
          "type": "boolean"
        }
      }
    },
    "AttributeOptions": {
      "type": "object",
      "properties": {
        "indepDimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndepDimension"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "NUMERIC",
            "BOOLEAN",
            "TEXT",
            "DATE",
            "EXISTING"
          ]
        },
        "baseDimension": {
          "type": "string"
        },
        "modified": {
          "type": "boolean"
        },
        "scaassociationMode": {
          "type": "string",
          "enum": [
            "NOOVERWRITE",
            "OVERWRITE"
          ]
        },
        "scadisAssociationMode": {
          "type": "string",
          "enum": [
            "NOOVERWRITE",
            "OVERWRITE",
            "EXTEND"
          ]
        }
      }
    },
    "ColumnOperation": {
      "type": "object",
      "properties": {
        "updateColumns": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "CREATE",
            "JOIN",
            "SPLIT",
            "MOVE",
            "CREATETEXT",
            "SUBSTRING"
          ]
        },
        "position": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DataLoadOptions": {
      "type": "object",
      "properties": {
        "clearCombinations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "option": {
          "type": "string",
          "enum": [
            "NONE",
            "OVERWRITE",
            "ADD",
            "SUBTRACT"
          ]
        },
        "removeAll": {
          "type": "integer",
          "format": "int32"
        },
        "signFlipDimension": {
          "type": "string"
        },
        "signFlipUDA": {
          "type": "string"
        }
      }
    },
    "DimBuildOptions": {
      "type": "object",
      "properties": {
        "autoConfig": {
          "type": "boolean"
        },
        "arrangeDimensions": {
          "type": "boolean"
        },
        "aliasTable": {
          "type": "string"
        },
        "smartLists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SmartList"
          }
        }
      }
    },
    "EditorOptions": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "object": {
          "type": "string"
        },
        "dataFile": {
          "type": "string"
        },
        "dataFileApplication": {
          "type": "string"
        },
        "dataFileDatabase": {
          "type": "string"
        },
        "dataFileServer": {
          "type": "string"
        },
        "startRecord": {
          "type": "integer",
          "format": "int32"
        },
        "viewCount": {
          "type": "integer",
          "format": "int32"
        },
        "viewGridLines": {
          "type": "boolean"
        },
        "viewIgnored": {
          "type": "boolean"
        },
        "viewRawData": {
          "type": "boolean"
        },
        "viewToolbar": {
          "type": "boolean"
        },
        "viewMode": {
          "type": "string",
          "enum": [
            "DIMBUILD",
            "DATALOAD"
          ]
        },
        "dataFileType": {
          "type": "string",
          "enum": [
            "NONE",
            "EXCEL",
            "LOTUS2",
            "LOTUS3",
            "LOTUS4",
            "TEXT"
          ]
        }
      }
    },
    "EssbaseInfo": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Field": {
      "type": "object",
      "properties": {
        "rejectFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "selectFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "replaceInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplaceInfo"
          }
        },
        "selectFilterJoinOption": {
          "type": "string",
          "enum": [
            "AND",
            "OR"
          ]
        },
        "rejectFilterJoinOption": {
          "type": "string",
          "enum": [
            "AND",
            "OR"
          ]
        },
        "dateFormat": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "option": {
          "type": "string",
          "format": "byte"
        },
        "convertSpaceToUnderScore": {
          "type": "boolean"
        },
        "trim": {
          "type": "boolean"
        },
        "width": {
          "type": "number",
          "format": "double"
        },
        "smartList": {
          "type": "string"
        },
        "dimensionBuildOptions": {
          "$ref": "#/definitions/FieldDimBuildOptions"
        },
        "dataloadOptions": {
          "$ref": "#/definitions/FieldDataLoadOptions"
        },
        "transform": {
          "$ref": "#/definitions/Transform"
        },
        "case": {
          "type": "string",
          "enum": [
            "NOOP",
            "LOWER_CASE",
            "UPPER_CASE",
            "FIRST_CAPITAL_CASE"
          ]
        }
      }
    },
    "FieldDataLoadOptions": {
      "type": "object",
      "properties": {
        "referDimension": {
          "type": "string"
        },
        "referNumber": {
          "type": "integer",
          "format": "int32"
        },
        "referOption": {
          "type": "integer",
          "format": "int32"
        },
        "ignore": {
          "type": "boolean"
        },
        "scale": {
          "type": "boolean"
        },
        "useReference": {
          "type": "boolean"
        },
        "data": {
          "type": "boolean"
        },
        "scalingfactor": {
          "type": "number",
          "format": "double"
        },
        "storeType": {
          "type": "string",
          "enum": [
            "MIN",
            "MAX",
            "AVG",
            "SUM",
            "COUNT"
          ]
        },
        "storeTypeCountMissing": {
          "type": "boolean"
        }
      }
    },
    "FieldDimBuildOptions": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "integer",
          "format": "int32"
        },
        "generationType": {
          "type": "string",
          "enum": [
            "NONE",
            "PARENT",
            "CHILD",
            "GENERATION",
            "LEVEL",
            "ATTRIBUTE_MEMBER",
            "ALIAS",
            "PROPERTY",
            "FORMULA",
            "MEMBER_ID",
            "SOLVE_ORDER",
            "UDA",
            "DUPGEN",
            "DUPLEVEL",
            "DUPGEN_ALIAS",
            "DUPLEVEL_ALIAS",
            "CURRENCY_NAME",
            "CURRENCY_CATEGORY",
            "NUMTYPES",
            "ATTRIBUTE_DIM_LABEL",
            "ATTRIBUTE_PARENT",
            "DUPGEN_CAPTION",
            "DUPLEVEL_CAPTION",
            "AGGLEVELUSAGE",
            "ATTR_ASSOCIATE",
            "REFMEMBER",
            "GEN_RIGHTJOIN",
            "COMMENT",
            "SHARED_GEN",
            "GEN_NATUREJOIN",
            "GEN_LEFTJOIN",
            "GEN_OTLMBR",
            "COMMENT_EX",
            "REFMEMBERID",
            "SMARTLISTID",
            "SMARTLISTTEXT",
            "FORMATSTRING"
          ]
        },
        "refer": {
          "type": "integer",
          "format": "int32"
        },
        "referIndex": {
          "type": "integer",
          "format": "int32"
        },
        "shared": {
          "type": "integer",
          "format": "int32"
        },
        "attributeBuildProperties": {
          "$ref": "#/definitions/AttributeBuildProperties"
        },
        "dimension": {
          "type": "string"
        },
        "attributeDimension": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "endIndepColumns": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "startIndepColumns": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "generationProperty": {
          "type": "string",
          "enum": [
            "NONE",
            "CONSOLIDATIONTYPE",
            "STORAGETYPE",
            "TIMEBALANCE",
            "SKIP",
            "VARIANCEREPORT",
            "TWOPASSCALC",
            "HIERARCHYTYPE"
          ]
        },
        "generation": {
          "type": "integer",
          "format": "int32"
        },
        "ignore": {
          "type": "boolean"
        },
        "staticField": {
          "type": "boolean"
        }
      }
    },
    "FileProperties": {
      "type": "object",
      "properties": {
        "delimiter": {
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "dataloadRecordNumber": {
          "type": "integer",
          "format": "int32"
        },
        "dimensionBuildRecordNumber": {
          "type": "integer",
          "format": "int32"
        },
        "headerRecordNumber": {
          "type": "integer",
          "format": "int32"
        },
        "lineSkipCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Filter": {
      "type": "object",
      "properties": {
        "stringFilter": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        },
        "condition": {
          "type": "string",
          "enum": [
            "EQUAL_TO",
            "NOT_EQUAL_TO",
            "GREATER_THAN",
            "GREATER_THAN_EQUAL_TO",
            "LESS_THAN",
            "LESS_THAN_EQUAL_TO",
            "CONTAIN",
            "DOES_NOT_CONTAIN"
          ]
        },
        "caseSensitive": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "REJECT",
            "SELECT"
          ]
        }
      }
    },
    "IndepDimension": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CONTINUOUS",
            "DISCRETE"
          ]
        }
      }
    },
    "Level": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "unique": {
          "type": "boolean"
        }
      }
    },
    "MeasureOptions": {
      "type": "object",
      "properties": {
        "currencyCategory": {
          "type": "string"
        },
        "currencyName": {
          "type": "string"
        },
        "currencyConversion": {
          "type": "string",
          "enum": [
            "EXISTING",
            "NONE",
            "CATEGORY",
            "NO_CONVERSION"
          ]
        },
        "skip": {
          "type": "string",
          "enum": [
            "NONE",
            "NA",
            "MISSING",
            "ZERO",
            "MISSING_ZERO"
          ]
        },
        "timeBalanceOption": {
          "type": "string",
          "enum": [
            "EXISTING",
            "NONE",
            "FIRST",
            "LAST",
            "AVERAGE"
          ]
        },
        "varianceReporting": {
          "type": "string",
          "enum": [
            "EXISTING",
            "NON_EXPENSE",
            "EXPENSE"
          ]
        },
        "twoPass": {
          "type": "boolean"
        }
      }
    },
    "ReplaceInfo": {
      "type": "object",
      "properties": {
        "find": {
          "type": "string"
        },
        "replace": {
          "type": "string"
        },
        "matchWholeWord": {
          "type": "boolean"
        },
        "replaceAll": {
          "type": "boolean"
        },
        "caseSensitive": {
          "type": "boolean"
        }
      }
    },
    "RulePreviewInput": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "rules": {
          "$ref": "#/definitions/Rules"
        }
      }
    },
    "Rules": {
      "type": "object",
      "properties": {
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dimension"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        },
        "dataSource": {
          "$ref": "#/definitions/Datasource"
        },
        "dimensionBuildOptions": {
          "$ref": "#/definitions/DimBuildOptions"
        },
        "dataLoadOptions": {
          "$ref": "#/definitions/DataLoadOptions"
        },
        "editorOptions": {
          "$ref": "#/definitions/EditorOptions"
        },
        "encoding": {
          "type": "string",
          "enum": [
            "NONE",
            "NONUNICODE",
            "UTF8"
          ]
        },
        "name": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "studio": {
          "type": "boolean"
        },
        "bibpm": {
          "type": "boolean"
        },
        "xolap": {
          "type": "boolean"
        },
        "flatFileBased": {
          "type": "boolean"
        },
        "essbaseInfo": {
          "$ref": "#/definitions/EssbaseInfo"
        },
        "columnOperations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColumnOperation"
          }
        }
      }
    },
    "SQLProperties": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "dictionary": {
          "type": "string"
        },
        "select": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "where": {
          "type": "string"
        }
      }
    },
    "SmartList": {
      "type": "object",
      "properties": {
        "incrementalNumber": {
          "type": "integer",
          "format": "int32"
        },
        "startNumber": {
          "type": "integer",
          "format": "int32"
        },
        "missingName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "outOfRangeName": {
          "type": "string"
        },
        "removeUnspecified": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Transform": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transform"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "COLUMN",
            "SUBSTR",
            "CONCAT",
            "STATICSTR",
            "IGNORE"
          ]
        }
      }
    },
    "SandboxDetail": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "available": {
          "type": "integer",
          "format": "int32"
        },
        "assigned": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "SandboxRequestPayload": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ParticipantBean": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Participant"
      }
    },
    "ParticipantListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParticipantBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Participants"
      }
    },
    "ApproverBean": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "approved": {
          "type": "boolean"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Approver"
      }
    },
    "ScenarioBean": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "scenarioUser": {
          "type": "boolean"
        },
        "scripts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptBean"
          }
        },
        "database": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParticipantBean"
          }
        },
        "description": {
          "type": "string"
        },
        "createdTime": {
          "type": "integer",
          "format": "int64"
        },
        "overdue": {
          "type": "boolean"
        },
        "submittedTime": {
          "type": "integer",
          "format": "int64"
        },
        "appliedTime": {
          "type": "integer",
          "format": "int64"
        },
        "refreshedTime": {
          "type": "integer",
          "format": "int64"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "useCalculatedValues": {
          "type": "boolean"
        },
        "owner": {
          "type": "string"
        },
        "approvers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApproverBean"
          }
        },
        "sandbox": {
          "type": "string"
        },
        "dueDate": {
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "type": "string",
          "enum": [
            "NEW",
            "SUBMITTED",
            "APPROVED",
            "REJECTED",
            "APPLIED"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        }
      },
      "xml": {
        "name": "Scenario"
      }
    },
    "ScenarioCollectionResponse": {
      "type": "object",
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScenarioBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "Scenarios"
      }
    },
    "ScriptBean": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "REFRESH",
            "CLEAR",
            "APPLY"
          ]
        }
      },
      "xml": {
        "name": "Script"
      }
    },
    "CopyOptions": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "boolean"
        },
        "comments": {
          "type": "boolean"
        },
        "data": {
          "type": "boolean"
        },
        "tasks": {
          "type": "boolean"
        },
        "keyMetrics": {
          "type": "boolean"
        },
        "slice": {
          "type": "boolean"
        },
        "layouts": {
          "type": "boolean"
        },
        "approvers": {
          "type": "boolean"
        },
        "participants": {
          "type": "boolean"
        }
      }
    },
    "ScenarioActionPayload": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "copyOptions": {
          "$ref": "#/definitions/CopyOptions"
        }
      }
    },
    "ScenarioCubes": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "databases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createScenario": {
          "type": "boolean"
        },
        "participateInScenario": {
          "type": "boolean"
        },
        "databaseAdmin": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Database"
      }
    },
    "ScenarioCubesList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScenarioCubes"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Databases"
      }
    },
    "ScenarioChangesListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "ScenarioChanges"
      }
    },
    "ScriptListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Comments"
      }
    },
    "ApproverListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApproverBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Approvers"
      }
    },
    "CommentBean": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "owner": {
          "$ref": "#/definitions/Owner"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Comment"
      }
    },
    "Owner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Owner"
      }
    },
    "CommentListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentBean"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Comments"
      }
    },
    "ScenarioEditBean": {
      "type": "object",
      "properties": {
        "dueDate": {
          "type": "integer",
          "format": "int64"
        },
        "priority": {
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        },
        "owner": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Script": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "modifiedTime": {
          "type": "integer",
          "format": "int64"
        },
        "sizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "lockedBy": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "lockedTime": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ScriptList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Script"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ScriptCopy": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "RTSVList": {
      "type": "object",
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RTSV"
          }
        },
        "hasMore": {
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "result"
      }
    },
    "SessionAttributes": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        },
        "loginTimeInSeconds": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "dbConnectTimeInSeconds": {
          "type": "string"
        },
        "request": {
          "type": "string"
        },
        "requestTimeInSeconds": {
          "type": "string"
        },
        "connectionSource": {
          "type": "string"
        },
        "requestState": {
          "type": "string"
        }
      }
    },
    "StreamProcessStartResponse": {
      "type": "object",
      "properties": {
        "streamId": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "StreamProcessEndResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "DataLoadStartPayload": {
      "type": "object",
      "properties": {
        "ruleFileName": {
          "type": "string"
        },
        "delimiter": {
          "type": "string",
          "description": "Currently only Comma is supported as delimiter"
        }
      }
    },
    "DimBuildStartPayload": {
      "type": "object",
      "properties": {
        "restructureOption": {
          "type": "string",
          "enum": [
            "PRESERVE_ALL_DATA",
            "PRESERVE_LEAFLEVEL_DATA",
            "PRESERVE_INPUT_DATA",
            "PRESERVE_NO_DATA"
          ]
        }
      }
    },
    "Variable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "VariableList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "hasMore": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Limit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "unlimited": {
          "type": "boolean"
        },
        "showUnlimited": {
          "type": "boolean"
        },
        "minimum": {
          "type": "integer",
          "format": "int64"
        },
        "maximum": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Limits": {
      "type": "object",
      "properties": {
        "coreFileSize": {
          "$ref": "#/definitions/Limit"
        },
        "dataSegmentSize": {
          "$ref": "#/definitions/Limit"
        },
        "maxMemory": {
          "$ref": "#/definitions/Limit"
        },
        "openFiles": {
          "$ref": "#/definitions/Limit"
        },
        "userMaxProcesses": {
          "$ref": "#/definitions/Limit"
        },
        "virtualMemorySize": {
          "$ref": "#/definitions/Limit"
        },
        "webLogicHeapSize": {
          "$ref": "#/definitions/Limit"
        }
      }
    },
    "SystemMaintainableResource": {
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "SystemMaintenanceLimits": {
      "type": "object",
      "properties": {
        "disk": {
          "$ref": "#/definitions/SystemMaintainableResource"
        },
        "ram": {
          "$ref": "#/definitions/SystemMaintainableResource"
        }
      }
    },
    "DatabaseSettings": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Settings": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    }
  }
}
