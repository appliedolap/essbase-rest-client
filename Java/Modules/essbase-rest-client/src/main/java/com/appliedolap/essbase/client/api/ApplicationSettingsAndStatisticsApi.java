/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.AppSecuritySettings;
import com.appliedolap.essbase.client.model.AppSettingsList;
import com.appliedolap.essbase.client.model.AppStartupSettings;
import com.appliedolap.essbase.client.model.ApplicationStatistics;
import com.appliedolap.essbase.client.model.PatchElement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationSettingsAndStatisticsApi {
    private ApiClient localVarApiClient;

    public ApplicationSettingsAndStatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationSettingsAndStatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for applicationSettingsStatisticsGetSecuritySettings
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security settings are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the security settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetSecuritySettingsCall(String applicationName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/settings/security"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationSettingsStatisticsGetSecuritySettingsValidateBeforeCall(String applicationName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationSettingsStatisticsGetSecuritySettings(Async)");
        }
        

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetSecuritySettingsCall(applicationName, _callback);
        return localVarCall;

    }

    /**
     * Get Application Security Settings
     * Returns the security settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @return AppSecuritySettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security settings are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the security settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public AppSecuritySettings applicationSettingsStatisticsGetSecuritySettings(String applicationName) throws ApiException {
        ApiResponse<AppSecuritySettings> localVarResp = applicationSettingsStatisticsGetSecuritySettingsWithHttpInfo(applicationName);
        return localVarResp.getData();
    }

    /**
     * Get Application Security Settings
     * Returns the security settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;AppSecuritySettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security settings are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the security settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppSecuritySettings> applicationSettingsStatisticsGetSecuritySettingsWithHttpInfo(String applicationName) throws ApiException {
        okhttp3.Call localVarCall = applicationSettingsStatisticsGetSecuritySettingsValidateBeforeCall(applicationName, null);
        Type localVarReturnType = new TypeToken<AppSecuritySettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Application Security Settings (asynchronously)
     * Returns the security settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security settings are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the security settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetSecuritySettingsAsync(String applicationName, final ApiCallback<AppSecuritySettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetSecuritySettingsValidateBeforeCall(applicationName, _callback);
        Type localVarReturnType = new TypeToken<AppSecuritySettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationSettingsStatisticsGetSettings
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;General application settings returned successfully, with links to get expanded settings and to edit settings.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;Failed to get the settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetSettingsCall(String applicationName, String expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/settings"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationSettingsStatisticsGetSettingsValidateBeforeCall(String applicationName, String expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationSettingsStatisticsGetSettings(Async)");
        }
        

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetSettingsCall(applicationName, expand, _callback);
        return localVarCall;

    }

    /**
     * Get Application General Settings
     * Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)
     * @return AppSettingsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;General application settings returned successfully, with links to get expanded settings and to edit settings.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;Failed to get the settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public AppSettingsList applicationSettingsStatisticsGetSettings(String applicationName, String expand) throws ApiException {
        ApiResponse<AppSettingsList> localVarResp = applicationSettingsStatisticsGetSettingsWithHttpInfo(applicationName, expand);
        return localVarResp.getData();
    }

    /**
     * Get Application General Settings
     * Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)
     * @return ApiResponse&lt;AppSettingsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;General application settings returned successfully, with links to get expanded settings and to edit settings.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;Failed to get the settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppSettingsList> applicationSettingsStatisticsGetSettingsWithHttpInfo(String applicationName, String expand) throws ApiException {
        okhttp3.Call localVarCall = applicationSettingsStatisticsGetSettingsValidateBeforeCall(applicationName, expand, null);
        Type localVarReturnType = new TypeToken<AppSettingsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Application General Settings (asynchronously)
     * Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;General application settings returned successfully, with links to get expanded settings and to edit settings.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;Failed to get the settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetSettingsAsync(String applicationName, String expand, final ApiCallback<AppSettingsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetSettingsValidateBeforeCall(applicationName, expand, _callback);
        Type localVarReturnType = new TypeToken<AppSettingsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationSettingsStatisticsGetStartupSettings
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Startup settings retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the startup settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetStartupSettingsCall(String applicationName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/settings/startup"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationSettingsStatisticsGetStartupSettingsValidateBeforeCall(String applicationName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationSettingsStatisticsGetStartupSettings(Async)");
        }
        

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetStartupSettingsCall(applicationName, _callback);
        return localVarCall;

    }

    /**
     * Get Application Startup Settings
     * Returns all the startup settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @return AppStartupSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Startup settings retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the startup settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public AppStartupSettings applicationSettingsStatisticsGetStartupSettings(String applicationName) throws ApiException {
        ApiResponse<AppStartupSettings> localVarResp = applicationSettingsStatisticsGetStartupSettingsWithHttpInfo(applicationName);
        return localVarResp.getData();
    }

    /**
     * Get Application Startup Settings
     * Returns all the startup settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;AppStartupSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Startup settings retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the startup settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStartupSettings> applicationSettingsStatisticsGetStartupSettingsWithHttpInfo(String applicationName) throws ApiException {
        okhttp3.Call localVarCall = applicationSettingsStatisticsGetStartupSettingsValidateBeforeCall(applicationName, null);
        Type localVarReturnType = new TypeToken<AppStartupSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Application Startup Settings (asynchronously)
     * Returns all the startup settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Startup settings retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the startup settings. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetStartupSettingsAsync(String applicationName, final ApiCallback<AppStartupSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetStartupSettingsValidateBeforeCall(applicationName, _callback);
        Type localVarReturnType = new TypeToken<AppStartupSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationSettingsStatisticsGetStatistics
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the statistics. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetStatisticsCall(String applicationName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/statistics"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationSettingsStatisticsGetStatisticsValidateBeforeCall(String applicationName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationSettingsStatisticsGetStatistics(Async)");
        }
        

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetStatisticsCall(applicationName, _callback);
        return localVarCall;

    }

    /**
     * Get Application Statistics
     * Returns the statistics of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @return ApplicationStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the statistics. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationStatistics applicationSettingsStatisticsGetStatistics(String applicationName) throws ApiException {
        ApiResponse<ApplicationStatistics> localVarResp = applicationSettingsStatisticsGetStatisticsWithHttpInfo(applicationName);
        return localVarResp.getData();
    }

    /**
     * Get Application Statistics
     * Returns the statistics of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;ApplicationStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the statistics. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationStatistics> applicationSettingsStatisticsGetStatisticsWithHttpInfo(String applicationName) throws ApiException {
        okhttp3.Call localVarCall = applicationSettingsStatisticsGetStatisticsValidateBeforeCall(applicationName, null);
        Type localVarReturnType = new TypeToken<ApplicationStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Application Statistics (asynchronously)
     * Returns the statistics of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics are retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the statistics. The application name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsGetStatisticsAsync(String applicationName, final ApiCallback<ApplicationStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationSettingsStatisticsGetStatisticsValidateBeforeCall(applicationName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationSettingsStatisticsUpdateSettings
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param body Application settings patch list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Settings are updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the settings. The application name may be incorrect, or the JSON for the settings may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsUpdateSettingsCall(String applicationName, List<PatchElement> body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/settings"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationSettingsStatisticsUpdateSettingsValidateBeforeCall(String applicationName, List<PatchElement> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationSettingsStatisticsUpdateSettings(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applicationSettingsStatisticsUpdateSettings(Async)");
        }
        

        okhttp3.Call localVarCall = applicationSettingsStatisticsUpdateSettingsCall(applicationName, body, _callback);
        return localVarCall;

    }

    /**
     * Update Application Settings
     * Updates the settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param body Application settings patch list (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Settings are updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the settings. The application name may be incorrect, or the JSON for the settings may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void applicationSettingsStatisticsUpdateSettings(String applicationName, List<PatchElement> body) throws ApiException {
        applicationSettingsStatisticsUpdateSettingsWithHttpInfo(applicationName, body);
    }

    /**
     * Update Application Settings
     * Updates the settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param body Application settings patch list (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Settings are updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the settings. The application name may be incorrect, or the JSON for the settings may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationSettingsStatisticsUpdateSettingsWithHttpInfo(String applicationName, List<PatchElement> body) throws ApiException {
        okhttp3.Call localVarCall = applicationSettingsStatisticsUpdateSettingsValidateBeforeCall(applicationName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Application Settings (asynchronously)
     * Updates the settings of the specified application.
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param body Application settings patch list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Settings are updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the settings. The application name may be incorrect, or the JSON for the settings may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationSettingsStatisticsUpdateSettingsAsync(String applicationName, List<PatchElement> body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationSettingsStatisticsUpdateSettingsValidateBeforeCall(applicationName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
