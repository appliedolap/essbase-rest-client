/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.Variable;
import com.appliedolap.essbase.client.model.VariableList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServerVariablesApi {
    private ApiClient localVarApiClient;

    public ServerVariablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServerVariablesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for variablesCreateServerVariable
     * @param body Variable details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is created successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the variable. This happens when the variable json is incorrect or when the given variable name already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesCreateServerVariableCall(Variable body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variablesCreateServerVariableValidateBeforeCall(Variable body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling variablesCreateServerVariable(Async)");
        }
        

        okhttp3.Call localVarCall = variablesCreateServerVariableCall(body, _callback);
        return localVarCall;

    }

    /**
     * Creates Variable in server
     * Creates the variable in the server and returns the created variable
     * @param body Variable details (required)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is created successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the variable. This happens when the variable json is incorrect or when the given variable name already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Variable variablesCreateServerVariable(Variable body) throws ApiException {
        ApiResponse<Variable> localVarResp = variablesCreateServerVariableWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Creates Variable in server
     * Creates the variable in the server and returns the created variable
     * @param body Variable details (required)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is created successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the variable. This happens when the variable json is incorrect or when the given variable name already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> variablesCreateServerVariableWithHttpInfo(Variable body) throws ApiException {
        okhttp3.Call localVarCall = variablesCreateServerVariableValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates Variable in server (asynchronously)
     * Creates the variable in the server and returns the created variable
     * @param body Variable details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is created successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the variable. This happens when the variable json is incorrect or when the given variable name already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesCreateServerVariableAsync(Variable body, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = variablesCreateServerVariableValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variablesDeleteServerVariable
     * @param variableName Variable name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable is deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesDeleteServerVariableCall(String variableName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables/{variableName}"
            .replaceAll("\\{" + "variableName" + "\\}", localVarApiClient.escapeString(variableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variablesDeleteServerVariableValidateBeforeCall(String variableName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'variableName' is set
        if (variableName == null) {
            throw new ApiException("Missing the required parameter 'variableName' when calling variablesDeleteServerVariable(Async)");
        }
        

        okhttp3.Call localVarCall = variablesDeleteServerVariableCall(variableName, _callback);
        return localVarCall;

    }

    /**
     * Deletes Variable in server
     * Deletes the given variable in the server
     * @param variableName Variable name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable is deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void variablesDeleteServerVariable(String variableName) throws ApiException {
        variablesDeleteServerVariableWithHttpInfo(variableName);
    }

    /**
     * Deletes Variable in server
     * Deletes the given variable in the server
     * @param variableName Variable name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable is deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> variablesDeleteServerVariableWithHttpInfo(String variableName) throws ApiException {
        okhttp3.Call localVarCall = variablesDeleteServerVariableValidateBeforeCall(variableName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes Variable in server (asynchronously)
     * Deletes the given variable in the server
     * @param variableName Variable name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable is deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesDeleteServerVariableAsync(String variableName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = variablesDeleteServerVariableValidateBeforeCall(variableName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for variablesEditServerVariable
     * @param variableName Variable name (required)
     * @param body Variable details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is updated successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the variable. This happens when the variable json is incorrect or when the given variable name does not exist </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesEditServerVariableCall(String variableName, Variable body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/variables/{variableName}"
            .replaceAll("\\{" + "variableName" + "\\}", localVarApiClient.escapeString(variableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variablesEditServerVariableValidateBeforeCall(String variableName, Variable body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'variableName' is set
        if (variableName == null) {
            throw new ApiException("Missing the required parameter 'variableName' when calling variablesEditServerVariable(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling variablesEditServerVariable(Async)");
        }
        

        okhttp3.Call localVarCall = variablesEditServerVariableCall(variableName, body, _callback);
        return localVarCall;

    }

    /**
     * Updates Variable in server
     * Updates the variable in the server and returns the updated variable
     * @param variableName Variable name (required)
     * @param body Variable details (required)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is updated successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the variable. This happens when the variable json is incorrect or when the given variable name does not exist </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Variable variablesEditServerVariable(String variableName, Variable body) throws ApiException {
        ApiResponse<Variable> localVarResp = variablesEditServerVariableWithHttpInfo(variableName, body);
        return localVarResp.getData();
    }

    /**
     * Updates Variable in server
     * Updates the variable in the server and returns the updated variable
     * @param variableName Variable name (required)
     * @param body Variable details (required)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is updated successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the variable. This happens when the variable json is incorrect or when the given variable name does not exist </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> variablesEditServerVariableWithHttpInfo(String variableName, Variable body) throws ApiException {
        okhttp3.Call localVarCall = variablesEditServerVariableValidateBeforeCall(variableName, body, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates Variable in server (asynchronously)
     * Updates the variable in the server and returns the updated variable
     * @param variableName Variable name (required)
     * @param body Variable details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is updated successfully. Returns the variable details and the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the variable. This happens when the variable json is incorrect or when the given variable name does not exist </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesEditServerVariableAsync(String variableName, Variable body, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = variablesEditServerVariableValidateBeforeCall(variableName, body, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variablesGetServerVariable
     * @param variableName Variable name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is retrieved successfully. Gives the variable details along with the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesGetServerVariableCall(String variableName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables/{variableName}"
            .replaceAll("\\{" + "variableName" + "\\}", localVarApiClient.escapeString(variableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variablesGetServerVariableValidateBeforeCall(String variableName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'variableName' is set
        if (variableName == null) {
            throw new ApiException("Missing the required parameter 'variableName' when calling variablesGetServerVariable(Async)");
        }
        

        okhttp3.Call localVarCall = variablesGetServerVariableCall(variableName, _callback);
        return localVarCall;

    }

    /**
     * Retrieves Variable from server
     * Returns the variable details from the server
     * @param variableName Variable name (required)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is retrieved successfully. Gives the variable details along with the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Variable variablesGetServerVariable(String variableName) throws ApiException {
        ApiResponse<Variable> localVarResp = variablesGetServerVariableWithHttpInfo(variableName);
        return localVarResp.getData();
    }

    /**
     * Retrieves Variable from server
     * Returns the variable details from the server
     * @param variableName Variable name (required)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is retrieved successfully. Gives the variable details along with the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> variablesGetServerVariableWithHttpInfo(String variableName) throws ApiException {
        okhttp3.Call localVarCall = variablesGetServerVariableValidateBeforeCall(variableName, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Variable from server (asynchronously)
     * Returns the variable details from the server
     * @param variableName Variable name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable is retrieved successfully. Gives the variable details along with the links to get/edit/delete the variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variable. This happens when the variable name is incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesGetServerVariableAsync(String variableName, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = variablesGetServerVariableValidateBeforeCall(variableName, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variablesListServerVariables
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variables are retrieved successfully. Gives the variable details along with the links to get/edit/delete each variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variables. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesListServerVariablesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variablesListServerVariablesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = variablesListServerVariablesCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieves Variables from server
     * Returns all the variables from the server
     * @return VariableList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variables are retrieved successfully. Gives the variable details along with the links to get/edit/delete each variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variables. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public VariableList variablesListServerVariables() throws ApiException {
        ApiResponse<VariableList> localVarResp = variablesListServerVariablesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves Variables from server
     * Returns all the variables from the server
     * @return ApiResponse&lt;VariableList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variables are retrieved successfully. Gives the variable details along with the links to get/edit/delete each variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variables. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariableList> variablesListServerVariablesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = variablesListServerVariablesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VariableList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Variables from server (asynchronously)
     * Returns all the variables from the server
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variables are retrieved successfully. Gives the variable details along with the links to get/edit/delete each variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get the variables. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variablesListServerVariablesAsync(final ApiCallback<VariableList> _callback) throws ApiException {

        okhttp3.Call localVarCall = variablesListServerVariablesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VariableList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
