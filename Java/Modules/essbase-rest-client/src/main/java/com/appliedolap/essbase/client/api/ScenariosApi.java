/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.ApproverBean;
import com.appliedolap.essbase.client.model.ApproverListResponse;
import com.appliedolap.essbase.client.model.CommentBean;
import com.appliedolap.essbase.client.model.CommentListResponse;
import com.appliedolap.essbase.client.model.ParticipantBean;
import com.appliedolap.essbase.client.model.ParticipantListResponse;
import com.appliedolap.essbase.client.model.ScenarioActionPayload;
import com.appliedolap.essbase.client.model.ScenarioBean;
import com.appliedolap.essbase.client.model.ScenarioChangesListResponse;
import com.appliedolap.essbase.client.model.ScenarioCollectionResponse;
import com.appliedolap.essbase.client.model.ScenarioCubesList;
import com.appliedolap.essbase.client.model.ScenarioEditBean;
import com.appliedolap.essbase.client.model.ScriptBean;
import com.appliedolap.essbase.client.model.ScriptListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScenariosApi {
    private ApiClient localVarApiClient;

    public ScenariosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScenariosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for scenariosAddApprover
     * @param scenarioId Scenario ID. (required)
     * @param body Approver details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosAddApproverCall(Long scenarioId, ApproverBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/approvers"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosAddApproverValidateBeforeCall(Long scenarioId, ApproverBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosAddApprover(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosAddApproverCall(scenarioId, body, _callback);
        return localVarCall;

    }

    /**
     * Add Approver
     * &lt;p&gt;Add a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Approver details. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosAddApprover(Long scenarioId, ApproverBean body) throws ApiException {
        scenariosAddApproverWithHttpInfo(scenarioId, body);
    }

    /**
     * Add Approver
     * &lt;p&gt;Add a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Approver details. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosAddApproverWithHttpInfo(Long scenarioId, ApproverBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosAddApproverValidateBeforeCall(scenarioId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Approver (asynchronously)
     * &lt;p&gt;Add a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Approver details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosAddApproverAsync(Long scenarioId, ApproverBean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosAddApproverValidateBeforeCall(scenarioId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosAddComment
     * @param scenarioId Scenario ID. (required)
     * @param body Comment details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add a comment. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosAddCommentCall(Long scenarioId, CommentBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/comments"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosAddCommentValidateBeforeCall(Long scenarioId, CommentBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosAddComment(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosAddCommentCall(scenarioId, body, _callback);
        return localVarCall;

    }

    /**
     * Add Comment
     * &lt;p&gt;Add a comment to the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Comment details. (optional)
     * @return CommentBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add a comment. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public CommentBean scenariosAddComment(Long scenarioId, CommentBean body) throws ApiException {
        ApiResponse<CommentBean> localVarResp = scenariosAddCommentWithHttpInfo(scenarioId, body);
        return localVarResp.getData();
    }

    /**
     * Add Comment
     * &lt;p&gt;Add a comment to the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Comment details. (optional)
     * @return ApiResponse&lt;CommentBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add a comment. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentBean> scenariosAddCommentWithHttpInfo(Long scenarioId, CommentBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosAddCommentValidateBeforeCall(scenarioId, body, null);
        Type localVarReturnType = new TypeToken<CommentBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Comment (asynchronously)
     * &lt;p&gt;Add a comment to the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Comment details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add a comment. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosAddCommentAsync(Long scenarioId, CommentBean body, final ApiCallback<CommentBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosAddCommentValidateBeforeCall(scenarioId, body, _callback);
        Type localVarReturnType = new TypeToken<CommentBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosAddParticipant
     * @param scenarioId Scenario ID. (required)
     * @param body Participant details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosAddParticipantCall(Long scenarioId, ParticipantBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/participants"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosAddParticipantValidateBeforeCall(Long scenarioId, ParticipantBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosAddParticipant(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosAddParticipantCall(scenarioId, body, _callback);
        return localVarCall;

    }

    /**
     * Add Participant
     * &lt;p&gt;Add scenario participant to the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Participant details. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosAddParticipant(Long scenarioId, ParticipantBean body) throws ApiException {
        scenariosAddParticipantWithHttpInfo(scenarioId, body);
    }

    /**
     * Add Participant
     * &lt;p&gt;Add scenario participant to the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Participant details. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosAddParticipantWithHttpInfo(Long scenarioId, ParticipantBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosAddParticipantValidateBeforeCall(scenarioId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Participant (asynchronously)
     * &lt;p&gt;Add scenario participant to the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param body Participant details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant added successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to add participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosAddParticipantAsync(Long scenarioId, ParticipantBean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosAddParticipantValidateBeforeCall(scenarioId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosCreate
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosCreateCall(ScenarioBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosCreateValidateBeforeCall(ScenarioBean body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scenariosCreateCall(body, _callback);
        return localVarCall;

    }

    /**
     * Create Scenario
     * &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @return ScenarioBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioBean scenariosCreate(ScenarioBean body) throws ApiException {
        ApiResponse<ScenarioBean> localVarResp = scenariosCreateWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create Scenario
     * &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ScenarioBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioBean> scenariosCreateWithHttpInfo(ScenarioBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosCreateValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Scenario (asynchronously)
     * &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosCreateAsync(ScenarioBean body, final ApiCallback<ScenarioBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosCreateValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosDelete
     * @param id Scenario ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scenariosDelete(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a scenario by ID.
     * Delete a scenario by ID.
     * @param id Scenario ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosDelete(Long id) throws ApiException {
        scenariosDeleteWithHttpInfo(id);
    }

    /**
     * Delete a scenario by ID.
     * Delete a scenario by ID.
     * @param id Scenario ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = scenariosDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a scenario by ID. (asynchronously)
     * Delete a scenario by ID.
     * @param id Scenario ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosDeleteApprover
     * @param scenarioId Scenario ID. (required)
     * @param userId Approver ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteApproverCall(Long scenarioId, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/approvers/{userId}"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosDeleteApproverValidateBeforeCall(Long scenarioId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosDeleteApprover(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling scenariosDeleteApprover(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosDeleteApproverCall(scenarioId, userId, _callback);
        return localVarCall;

    }

    /**
     * Delete Approver
     * &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param userId Approver ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosDeleteApprover(Long scenarioId, String userId) throws ApiException {
        scenariosDeleteApproverWithHttpInfo(scenarioId, userId);
    }

    /**
     * Delete Approver
     * &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param userId Approver ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosDeleteApproverWithHttpInfo(Long scenarioId, String userId) throws ApiException {
        okhttp3.Call localVarCall = scenariosDeleteApproverValidateBeforeCall(scenarioId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Approver (asynchronously)
     * &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param userId Approver ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario approver deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario approver. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteApproverAsync(Long scenarioId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosDeleteApproverValidateBeforeCall(scenarioId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosDeleteComment
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteCommentCall(Long scenarioId, Long commentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/comments/{commentId}"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosDeleteCommentValidateBeforeCall(Long scenarioId, Long commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosDeleteComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling scenariosDeleteComment(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosDeleteCommentCall(scenarioId, commentId, _callback);
        return localVarCall;

    }

    /**
     * Delete Comment
     * &lt;p&gt;Delete a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosDeleteComment(Long scenarioId, Long commentId) throws ApiException {
        scenariosDeleteCommentWithHttpInfo(scenarioId, commentId);
    }

    /**
     * Delete Comment
     * &lt;p&gt;Delete a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosDeleteCommentWithHttpInfo(Long scenarioId, Long commentId) throws ApiException {
        okhttp3.Call localVarCall = scenariosDeleteCommentValidateBeforeCall(scenarioId, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Comment (asynchronously)
     * &lt;p&gt;Delete a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteCommentAsync(Long scenarioId, Long commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosDeleteCommentValidateBeforeCall(scenarioId, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosDeleteParticipant
     * @param scenarioId Scenario ID. (required)
     * @param userId Participant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteParticipantCall(Long scenarioId, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/participants/{userId}"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosDeleteParticipantValidateBeforeCall(Long scenarioId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosDeleteParticipant(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling scenariosDeleteParticipant(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosDeleteParticipantCall(scenarioId, userId, _callback);
        return localVarCall;

    }

    /**
     * Delete Participant
     * &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param userId Participant ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosDeleteParticipant(Long scenarioId, String userId) throws ApiException {
        scenariosDeleteParticipantWithHttpInfo(scenarioId, userId);
    }

    /**
     * Delete Participant
     * &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param userId Participant ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosDeleteParticipantWithHttpInfo(Long scenarioId, String userId) throws ApiException {
        okhttp3.Call localVarCall = scenariosDeleteParticipantValidateBeforeCall(scenarioId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Participant (asynchronously)
     * &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param userId Participant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participant deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete scenario participant. The scenario ID may be invalid, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosDeleteParticipantAsync(Long scenarioId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosDeleteParticipantValidateBeforeCall(scenarioId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGet
     * @param id Scenario ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario details. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetValidateBeforeCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scenariosGet(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosGetCall(id, expand, _callback);
        return localVarCall;

    }

    /**
     * Get Scenario
     * Gets a scenario by ID.
     * @param id Scenario ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)
     * @return ScenarioBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario details. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioBean scenariosGet(Long id, String expand) throws ApiException {
        ApiResponse<ScenarioBean> localVarResp = scenariosGetWithHttpInfo(id, expand);
        return localVarResp.getData();
    }

    /**
     * Get Scenario
     * Gets a scenario by ID.
     * @param id Scenario ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ScenarioBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario details. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioBean> scenariosGetWithHttpInfo(Long id, String expand) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetValidateBeforeCall(id, expand, null);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scenario (asynchronously)
     * Gets a scenario by ID.
     * @param id Scenario ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario details. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetAsync(Long id, String expand, final ApiCallback<ScenarioBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetValidateBeforeCall(id, expand, _callback);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetApprovers
     * @param scenarioId Scenario ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of scenario approvers returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario approvers. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetApproversCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/approvers"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetApproversValidateBeforeCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosGetApprovers(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosGetApproversCall(scenarioId, _callback);
        return localVarCall;

    }

    /**
     * Get Approvers
     * &lt;p&gt;Get scenario approvers.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @return ApproverListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of scenario approvers returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario approvers. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApproverListResponse scenariosGetApprovers(Long scenarioId) throws ApiException {
        ApiResponse<ApproverListResponse> localVarResp = scenariosGetApproversWithHttpInfo(scenarioId);
        return localVarResp.getData();
    }

    /**
     * Get Approvers
     * &lt;p&gt;Get scenario approvers.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @return ApiResponse&lt;ApproverListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of scenario approvers returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario approvers. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApproverListResponse> scenariosGetApproversWithHttpInfo(Long scenarioId) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetApproversValidateBeforeCall(scenarioId, null);
        Type localVarReturnType = new TypeToken<ApproverListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Approvers (asynchronously)
     * &lt;p&gt;Get scenario approvers.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of scenario approvers returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario approvers. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetApproversAsync(Long scenarioId, final ApiCallback<ApproverListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetApproversValidateBeforeCall(scenarioId, _callback);
        Type localVarReturnType = new TypeToken<ApproverListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetChangeData
     * @param id Scenario ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario changes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario changes. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetChangeDataCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{id}/changes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetChangeDataValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scenariosGetChangeData(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosGetChangeDataCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Changes
     * &lt;p&gt;Get scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
     * @param id Scenario ID. (required)
     * @return ScenarioChangesListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario changes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario changes. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioChangesListResponse scenariosGetChangeData(Long id) throws ApiException {
        ApiResponse<ScenarioChangesListResponse> localVarResp = scenariosGetChangeDataWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Changes
     * &lt;p&gt;Get scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
     * @param id Scenario ID. (required)
     * @return ApiResponse&lt;ScenarioChangesListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario changes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario changes. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioChangesListResponse> scenariosGetChangeDataWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetChangeDataValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ScenarioChangesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Changes (asynchronously)
     * &lt;p&gt;Get scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
     * @param id Scenario ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario changes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario changes. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetChangeDataAsync(Long id, final ApiCallback<ScenarioChangesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetChangeDataValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ScenarioChangesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetComment
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetCommentCall(Long scenarioId, Long commentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/comments/{commentId}"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetCommentValidateBeforeCall(Long scenarioId, Long commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosGetComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling scenariosGetComment(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosGetCommentCall(scenarioId, commentId, _callback);
        return localVarCall;

    }

    /**
     * Get Comment
     * &lt;p&gt;Get a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @return CommentBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public CommentBean scenariosGetComment(Long scenarioId, Long commentId) throws ApiException {
        ApiResponse<CommentBean> localVarResp = scenariosGetCommentWithHttpInfo(scenarioId, commentId);
        return localVarResp.getData();
    }

    /**
     * Get Comment
     * &lt;p&gt;Get a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @return ApiResponse&lt;CommentBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentBean> scenariosGetCommentWithHttpInfo(Long scenarioId, Long commentId) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetCommentValidateBeforeCall(scenarioId, commentId, null);
        Type localVarReturnType = new TypeToken<CommentBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Comment (asynchronously)
     * &lt;p&gt;Get a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comment returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetCommentAsync(Long scenarioId, Long commentId, final ApiCallback<CommentBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetCommentValidateBeforeCall(scenarioId, commentId, _callback);
        Type localVarReturnType = new TypeToken<CommentBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetComments
     * @param scenarioId Scenario ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comments returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comments. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetCommentsCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/comments"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetCommentsValidateBeforeCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosGetComments(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosGetCommentsCall(scenarioId, _callback);
        return localVarCall;

    }

    /**
     * Get Comments
     * &lt;p&gt;Get comments for the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @return CommentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comments returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comments. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public CommentListResponse scenariosGetComments(Long scenarioId) throws ApiException {
        ApiResponse<CommentListResponse> localVarResp = scenariosGetCommentsWithHttpInfo(scenarioId);
        return localVarResp.getData();
    }

    /**
     * Get Comments
     * &lt;p&gt;Get comments for the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @return ApiResponse&lt;CommentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comments returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comments. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentListResponse> scenariosGetCommentsWithHttpInfo(Long scenarioId) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetCommentsValidateBeforeCall(scenarioId, null);
        Type localVarReturnType = new TypeToken<CommentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Comments (asynchronously)
     * &lt;p&gt;Get comments for the specified scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario comments returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario comments. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetCommentsAsync(Long scenarioId, final ApiCallback<CommentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetCommentsValidateBeforeCall(scenarioId, _callback);
        Type localVarReturnType = new TypeToken<CommentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetParticipants
     * @param scenarioId Scenario ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participants returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario participants. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetParticipantsCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/participants"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetParticipantsValidateBeforeCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosGetParticipants(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosGetParticipantsCall(scenarioId, _callback);
        return localVarCall;

    }

    /**
     * Get Participants
     * &lt;p&gt;Get scenario participants by scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @return ParticipantListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participants returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario participants. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ParticipantListResponse scenariosGetParticipants(Long scenarioId) throws ApiException {
        ApiResponse<ParticipantListResponse> localVarResp = scenariosGetParticipantsWithHttpInfo(scenarioId);
        return localVarResp.getData();
    }

    /**
     * Get Participants
     * &lt;p&gt;Get scenario participants by scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @return ApiResponse&lt;ParticipantListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participants returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario participants. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipantListResponse> scenariosGetParticipantsWithHttpInfo(Long scenarioId) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetParticipantsValidateBeforeCall(scenarioId, null);
        Type localVarReturnType = new TypeToken<ParticipantListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Participants (asynchronously)
     * &lt;p&gt;Get scenario participants by scenario ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario participants returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario participants. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetParticipantsAsync(Long scenarioId, final ApiCallback<ParticipantListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetParticipantsValidateBeforeCall(scenarioId, _callback);
        Type localVarReturnType = new TypeToken<ParticipantListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetRegisteredCubes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario-enabled cubes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario-enabled cubes.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetRegisteredCubesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetRegisteredCubesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scenariosGetRegisteredCubesCall(_callback);
        return localVarCall;

    }

    /**
     * Get Scenario-Enabled Cubes
     * &lt;p&gt;Get information about all the databases registered for scenario management.&lt;/p&gt;
     * @return ScenarioCubesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario-enabled cubes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario-enabled cubes.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioCubesList scenariosGetRegisteredCubes() throws ApiException {
        ApiResponse<ScenarioCubesList> localVarResp = scenariosGetRegisteredCubesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Scenario-Enabled Cubes
     * &lt;p&gt;Get information about all the databases registered for scenario management.&lt;/p&gt;
     * @return ApiResponse&lt;ScenarioCubesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario-enabled cubes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario-enabled cubes.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioCubesList> scenariosGetRegisteredCubesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = scenariosGetRegisteredCubesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ScenarioCubesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scenario-Enabled Cubes (asynchronously)
     * &lt;p&gt;Get information about all the databases registered for scenario management.&lt;/p&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario-enabled cubes returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario-enabled cubes.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetRegisteredCubesAsync(final ApiCallback<ScenarioCubesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetRegisteredCubesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ScenarioCubesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetScenarios
     * @param filter &lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)
     * @param role &lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)
     * @param overdue &lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)
     * @param state &lt;p&gt;Scenario state.&lt;/p&gt; (optional)
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (optional)
     * @param database &lt;p&gt;Database name.&lt;/p&gt; (optional)
     * @param approvalPending &lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)
     * @param offset &lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @param orderBy &lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to createdTime:desc)
     * @param count &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario list and details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenarios.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetScenariosCall(String filter, String role, Boolean overdue, String state, String application, String database, Boolean approvalPending, Long offset, Long limit, String orderBy, Boolean count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (overdue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overdue", overdue));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        if (database != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("database", database));
        }

        if (approvalPending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalPending", approvalPending));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetScenariosValidateBeforeCall(String filter, String role, Boolean overdue, String state, String application, String database, Boolean approvalPending, Long offset, Long limit, String orderBy, Boolean count, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scenariosGetScenariosCall(filter, role, overdue, state, application, database, approvalPending, offset, limit, orderBy, count, _callback);
        return localVarCall;

    }

    /**
     * Get Scenarios
     * &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
     * @param filter &lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)
     * @param role &lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)
     * @param overdue &lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)
     * @param state &lt;p&gt;Scenario state.&lt;/p&gt; (optional)
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (optional)
     * @param database &lt;p&gt;Database name.&lt;/p&gt; (optional)
     * @param approvalPending &lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)
     * @param offset &lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @param orderBy &lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to createdTime:desc)
     * @param count &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)
     * @return ScenarioCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario list and details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenarios.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioCollectionResponse scenariosGetScenarios(String filter, String role, Boolean overdue, String state, String application, String database, Boolean approvalPending, Long offset, Long limit, String orderBy, Boolean count) throws ApiException {
        ApiResponse<ScenarioCollectionResponse> localVarResp = scenariosGetScenariosWithHttpInfo(filter, role, overdue, state, application, database, approvalPending, offset, limit, orderBy, count);
        return localVarResp.getData();
    }

    /**
     * Get Scenarios
     * &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
     * @param filter &lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)
     * @param role &lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)
     * @param overdue &lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)
     * @param state &lt;p&gt;Scenario state.&lt;/p&gt; (optional)
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (optional)
     * @param database &lt;p&gt;Database name.&lt;/p&gt; (optional)
     * @param approvalPending &lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)
     * @param offset &lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @param orderBy &lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to createdTime:desc)
     * @param count &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)
     * @return ApiResponse&lt;ScenarioCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario list and details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenarios.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioCollectionResponse> scenariosGetScenariosWithHttpInfo(String filter, String role, Boolean overdue, String state, String application, String database, Boolean approvalPending, Long offset, Long limit, String orderBy, Boolean count) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetScenariosValidateBeforeCall(filter, role, overdue, state, application, database, approvalPending, offset, limit, orderBy, count, null);
        Type localVarReturnType = new TypeToken<ScenarioCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scenarios (asynchronously)
     * &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
     * @param filter &lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)
     * @param role &lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)
     * @param overdue &lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)
     * @param state &lt;p&gt;Scenario state.&lt;/p&gt; (optional)
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (optional)
     * @param database &lt;p&gt;Database name.&lt;/p&gt; (optional)
     * @param approvalPending &lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)
     * @param offset &lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @param orderBy &lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to createdTime:desc)
     * @param count &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario list and details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenarios.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetScenariosAsync(String filter, String role, Boolean overdue, String state, String application, String database, Boolean approvalPending, Long offset, Long limit, String orderBy, Boolean count, final ApiCallback<ScenarioCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetScenariosValidateBeforeCall(filter, role, overdue, state, application, database, approvalPending, offset, limit, orderBy, count, _callback);
        Type localVarReturnType = new TypeToken<ScenarioCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosGetScripts
     * @param scenarioId Scenario ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario scripts returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario scripts. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetScriptsCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/scripts"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosGetScriptsValidateBeforeCall(Long scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosGetScripts(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosGetScriptsCall(scenarioId, _callback);
        return localVarCall;

    }

    /**
     * Get Scripts
     * Get Scripts
     * @param scenarioId Scenario ID. (required)
     * @return ScriptListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario scripts returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario scripts. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScriptListResponse scenariosGetScripts(Long scenarioId) throws ApiException {
        ApiResponse<ScriptListResponse> localVarResp = scenariosGetScriptsWithHttpInfo(scenarioId);
        return localVarResp.getData();
    }

    /**
     * Get Scripts
     * Get Scripts
     * @param scenarioId Scenario ID. (required)
     * @return ApiResponse&lt;ScriptListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario scripts returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario scripts. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptListResponse> scenariosGetScriptsWithHttpInfo(Long scenarioId) throws ApiException {
        okhttp3.Call localVarCall = scenariosGetScriptsValidateBeforeCall(scenarioId, null);
        Type localVarReturnType = new TypeToken<ScriptListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scripts (asynchronously)
     * Get Scripts
     * @param scenarioId Scenario ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario scripts returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get scenario scripts. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosGetScriptsAsync(Long scenarioId, final ApiCallback<ScriptListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosGetScriptsValidateBeforeCall(scenarioId, _callback);
        Type localVarReturnType = new TypeToken<ScriptListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosPatch
     * @param id Scenario ID. (required)
     * @param body &lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosPatchCall(Long id, ScenarioEditBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosPatchValidateBeforeCall(Long id, ScenarioEditBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scenariosPatch(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosPatchCall(id, body, _callback);
        return localVarCall;

    }

    /**
     * Update Scenario Partially
     * &lt;p&gt;Update basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
     * @param id Scenario ID. (required)
     * @param body &lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)
     * @return ScenarioBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioBean scenariosPatch(Long id, ScenarioEditBean body) throws ApiException {
        ApiResponse<ScenarioBean> localVarResp = scenariosPatchWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Update Scenario Partially
     * &lt;p&gt;Update basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
     * @param id Scenario ID. (required)
     * @param body &lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ScenarioBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioBean> scenariosPatchWithHttpInfo(Long id, ScenarioEditBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosPatchValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Scenario Partially (asynchronously)
     * &lt;p&gt;Update basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
     * @param id Scenario ID. (required)
     * @param body &lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosPatchAsync(Long id, ScenarioEditBean body, final ApiCallback<ScenarioBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosPatchValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosPerformAction
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param action &lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param overwrite &lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario action performed successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to perform scenario action. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosPerformActionCall(Long id, String action, Boolean overwrite, ScenarioActionPayload body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (overwrite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overwrite", overwrite));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosPerformActionValidateBeforeCall(Long id, String action, Boolean overwrite, ScenarioActionPayload body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scenariosPerformAction(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosPerformActionCall(id, action, overwrite, body, _callback);
        return localVarCall;

    }

    /**
     * Perform Scenario Action
     * &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param action &lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param overwrite &lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)
     * @return ScenarioBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario action performed successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to perform scenario action. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioBean scenariosPerformAction(Long id, String action, Boolean overwrite, ScenarioActionPayload body) throws ApiException {
        ApiResponse<ScenarioBean> localVarResp = scenariosPerformActionWithHttpInfo(id, action, overwrite, body);
        return localVarResp.getData();
    }

    /**
     * Perform Scenario Action
     * &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param action &lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param overwrite &lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ScenarioBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario action performed successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to perform scenario action. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioBean> scenariosPerformActionWithHttpInfo(Long id, String action, Boolean overwrite, ScenarioActionPayload body) throws ApiException {
        okhttp3.Call localVarCall = scenariosPerformActionValidateBeforeCall(id, action, overwrite, body, null);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Scenario Action (asynchronously)
     * &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param action &lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param overwrite &lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario action performed successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to perform scenario action. The scenario ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosPerformActionAsync(Long id, String action, Boolean overwrite, ScenarioActionPayload body, final ApiCallback<ScenarioBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosPerformActionValidateBeforeCall(id, action, overwrite, body, _callback);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosUpdate
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosUpdateCall(Long id, ScenarioBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosUpdateValidateBeforeCall(Long id, ScenarioBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scenariosUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosUpdateCall(id, body, _callback);
        return localVarCall;

    }

    /**
     * Update Scenario Fully
     * &lt;p&gt;Update in-depth details about a scenario.&lt;/p&gt;
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @return ScenarioBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioBean scenariosUpdate(Long id, ScenarioBean body) throws ApiException {
        ApiResponse<ScenarioBean> localVarResp = scenariosUpdateWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Update Scenario Fully
     * &lt;p&gt;Update in-depth details about a scenario.&lt;/p&gt;
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ScenarioBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioBean> scenariosUpdateWithHttpInfo(Long id, ScenarioBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosUpdateValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Scenario Fully (asynchronously)
     * &lt;p&gt;Update in-depth details about a scenario.&lt;/p&gt;
     * @param id &lt;p&gt;Scenario ID.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Scenario details.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Scenario updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the scenario. Required fields such as scenario name or due date may be empty, or the scenario may already have been submitted for approval.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosUpdateAsync(Long id, ScenarioBean body, final ApiCallback<ScenarioBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosUpdateValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<ScenarioBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosUpdateComment
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param body Comment details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;Scenario comment successfully updated.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosUpdateCommentCall(Long scenarioId, Long commentId, CommentBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/comments/{commentId}"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosUpdateCommentValidateBeforeCall(Long scenarioId, Long commentId, CommentBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosUpdateComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling scenariosUpdateComment(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosUpdateCommentCall(scenarioId, commentId, body, _callback);
        return localVarCall;

    }

    /**
     * Update Comment
     * &lt;p&gt;Update a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param body Comment details. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;Scenario comment successfully updated.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosUpdateComment(Long scenarioId, Long commentId, CommentBean body) throws ApiException {
        scenariosUpdateCommentWithHttpInfo(scenarioId, commentId, body);
    }

    /**
     * Update Comment
     * &lt;p&gt;Update a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param body Comment details. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;Scenario comment successfully updated.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosUpdateCommentWithHttpInfo(Long scenarioId, Long commentId, CommentBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosUpdateCommentValidateBeforeCall(scenarioId, commentId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Comment (asynchronously)
     * &lt;p&gt;Update a scenario comment by ID.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param commentId Comment ID. (required)
     * @param body Comment details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;Scenario comment successfully updated.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update scenario comment. The scenario ID or comment ID may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosUpdateCommentAsync(Long scenarioId, Long commentId, CommentBean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosUpdateCommentValidateBeforeCall(scenarioId, commentId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scenariosUpdateScript
     * @param scenarioId Scenario ID. (required)
     * @param scriptType &lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Script details.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Update script is successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update with script. The scenario ID or script type may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosUpdateScriptCall(Long scenarioId, String scriptType, ScriptBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scenarios/{scenarioId}/scripts/{scriptType}"
            .replaceAll("\\{" + "scenarioId" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "scriptType" + "\\}", localVarApiClient.escapeString(scriptType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scenariosUpdateScriptValidateBeforeCall(Long scenarioId, String scriptType, ScriptBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling scenariosUpdateScript(Async)");
        }
        
        // verify the required parameter 'scriptType' is set
        if (scriptType == null) {
            throw new ApiException("Missing the required parameter 'scriptType' when calling scenariosUpdateScript(Async)");
        }
        

        okhttp3.Call localVarCall = scenariosUpdateScriptCall(scenarioId, scriptType, body, _callback);
        return localVarCall;

    }

    /**
     * Update With Script
     * &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param scriptType &lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Script details.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Update script is successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update with script. The scenario ID or script type may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void scenariosUpdateScript(Long scenarioId, String scriptType, ScriptBean body) throws ApiException {
        scenariosUpdateScriptWithHttpInfo(scenarioId, scriptType, body);
    }

    /**
     * Update With Script
     * &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param scriptType &lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Script details.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Update script is successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update with script. The scenario ID or script type may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scenariosUpdateScriptWithHttpInfo(Long scenarioId, String scriptType, ScriptBean body) throws ApiException {
        okhttp3.Call localVarCall = scenariosUpdateScriptValidateBeforeCall(scenarioId, scriptType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update With Script (asynchronously)
     * &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
     * @param scenarioId Scenario ID. (required)
     * @param scriptType &lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Script details.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Update script is successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update with script. The scenario ID or script type may be invalid.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scenariosUpdateScriptAsync(Long scenarioId, String scriptType, ScriptBean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scenariosUpdateScriptValidateBeforeCall(scenarioId, scriptType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
