/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.appliedolap.essbase.client.model.Data;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Slice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-29T21:46:59.899155-05:00[America/Indiana/Indianapolis]")
public class Slice {
  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private Integer rows;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private Integer columns;

  public static final String SERIALIZED_NAME_DIRTY_TEXTS = "dirtyTexts";
  @SerializedName(SERIALIZED_NAME_DIRTY_TEXTS)
  private List<Integer> dirtyTexts = null;

  public static final String SERIALIZED_NAME_DIRTY_CELLS = "dirtyCells";
  @SerializedName(SERIALIZED_NAME_DIRTY_CELLS)
  private List<Integer> dirtyCells = null;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Data data;


  public Slice rows(Integer rows) {
    
    this.rows = rows;
    return this;
  }

   /**
   * Get rows
   * @return rows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRows() {
    return rows;
  }


  public void setRows(Integer rows) {
    this.rows = rows;
  }


  public Slice columns(Integer columns) {
    
    this.columns = columns;
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getColumns() {
    return columns;
  }


  public void setColumns(Integer columns) {
    this.columns = columns;
  }


  public Slice dirtyTexts(List<Integer> dirtyTexts) {
    
    this.dirtyTexts = dirtyTexts;
    return this;
  }

  public Slice addDirtyTextsItem(Integer dirtyTextsItem) {
    if (this.dirtyTexts == null) {
      this.dirtyTexts = new ArrayList<Integer>();
    }
    this.dirtyTexts.add(dirtyTextsItem);
    return this;
  }

   /**
   * Get dirtyTexts
   * @return dirtyTexts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getDirtyTexts() {
    return dirtyTexts;
  }


  public void setDirtyTexts(List<Integer> dirtyTexts) {
    this.dirtyTexts = dirtyTexts;
  }


  public Slice dirtyCells(List<Integer> dirtyCells) {
    
    this.dirtyCells = dirtyCells;
    return this;
  }

  public Slice addDirtyCellsItem(Integer dirtyCellsItem) {
    if (this.dirtyCells == null) {
      this.dirtyCells = new ArrayList<Integer>();
    }
    this.dirtyCells.add(dirtyCellsItem);
    return this;
  }

   /**
   * Get dirtyCells
   * @return dirtyCells
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getDirtyCells() {
    return dirtyCells;
  }


  public void setDirtyCells(List<Integer> dirtyCells) {
    this.dirtyCells = dirtyCells;
  }


  public Slice data(Data data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Data getData() {
    return data;
  }


  public void setData(Data data) {
    this.data = data;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Slice slice = (Slice) o;
    return Objects.equals(this.rows, slice.rows) &&
        Objects.equals(this.columns, slice.columns) &&
        Objects.equals(this.dirtyTexts, slice.dirtyTexts) &&
        Objects.equals(this.dirtyCells, slice.dirtyCells) &&
        Objects.equals(this.data, slice.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rows, columns, dirtyTexts, dirtyCells, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Slice {\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    dirtyTexts: ").append(toIndentedString(dirtyTexts)).append("\n");
    sb.append("    dirtyCells: ").append(toIndentedString(dirtyCells)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

