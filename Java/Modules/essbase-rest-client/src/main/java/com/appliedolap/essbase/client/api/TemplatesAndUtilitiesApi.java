/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.ResourceList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesAndUtilitiesApi {
    private ApiClient localVarApiClient;

    public TemplatesAndUtilitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesAndUtilitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for resourcesDownloadUtility
     * @param id ID of the utility (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utility with specified id found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to download utility with specified id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesDownloadUtilityCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utilities/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesDownloadUtilityValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesDownloadUtility(Async)");
        }
        

        okhttp3.Call localVarCall = resourcesDownloadUtilityCall(id, _callback);
        return localVarCall;

    }

    /**
     * Download Utility
     * Returns utility with specified id as stream.
     * @param id ID of the utility (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utility with specified id found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to download utility with specified id. </td><td>  -  </td></tr>
     </table>
     */
    public void resourcesDownloadUtility(String id) throws ApiException {
        resourcesDownloadUtilityWithHttpInfo(id);
    }

    /**
     * Download Utility
     * Returns utility with specified id as stream.
     * @param id ID of the utility (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utility with specified id found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to download utility with specified id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourcesDownloadUtilityWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = resourcesDownloadUtilityValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Utility (asynchronously)
     * Returns utility with specified id as stream.
     * @param id ID of the utility (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utility with specified id found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to download utility with specified id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesDownloadUtilityAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesDownloadUtilityValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesGetUtilities
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns available utilities. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get utilities. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesGetUtilitiesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesGetUtilitiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = resourcesGetUtilitiesCall(_callback);
        return localVarCall;

    }

    /**
     * List Utilities
     * Returns available utilities. For example: Export Utility, Smart View for Essbase.
     * @return ResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns available utilities. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get utilities. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceList resourcesGetUtilities() throws ApiException {
        ApiResponse<ResourceList> localVarResp = resourcesGetUtilitiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Utilities
     * Returns available utilities. For example: Export Utility, Smart View for Essbase.
     * @return ApiResponse&lt;ResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns available utilities. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get utilities. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceList> resourcesGetUtilitiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resourcesGetUtilitiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Utilities (asynchronously)
     * Returns available utilities. For example: Export Utility, Smart View for Essbase.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns available utilities. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get utilities. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesGetUtilitiesAsync(final ApiCallback<ResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesGetUtilitiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
