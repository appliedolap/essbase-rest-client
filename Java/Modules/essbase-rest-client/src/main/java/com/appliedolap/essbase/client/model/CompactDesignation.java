/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.appliedolap.essbase.client.model.CompactDesignationColumn;
import com.appliedolap.essbase.client.model.DimCompactDesignation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * CompactDesignation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-06-30T09:44:26.987-07:00[America/Los_Angeles]")
public class CompactDesignation {
  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String file;

  public static final String SERIALIZED_NAME_EXCEL_SHEET_NAME = "excelSheetName";
  @SerializedName(SERIALIZED_NAME_EXCEL_SHEET_NAME)
  private String excelSheetName;

  public static final String SERIALIZED_NAME_COLUMN_OFFSET = "columnOffset";
  @SerializedName(SERIALIZED_NAME_COLUMN_OFFSET)
  private Integer columnOffset;

  public static final String SERIALIZED_NAME_BAD_ROW_LIST_STRING = "badRowListString";
  @SerializedName(SERIALIZED_NAME_BAD_ROW_LIST_STRING)
  private String badRowListString;

  public static final String SERIALIZED_NAME_NR = "nr";
  @SerializedName(SERIALIZED_NAME_NR)
  private Integer nr;

  public static final String SERIALIZED_NAME_NRH = "nrh";
  @SerializedName(SERIALIZED_NAME_NRH)
  private Integer nrh;

  public static final String SERIALIZED_NAME_COMPACT_DESIGNATION_COLUMN = "compactDesignationColumn";
  @SerializedName(SERIALIZED_NAME_COMPACT_DESIGNATION_COLUMN)
  private List<CompactDesignationColumn> compactDesignationColumn = null;

  public static final String SERIALIZED_NAME_BSO_LIMITS_EXCEEDED = "bsoLimitsExceeded";
  @SerializedName(SERIALIZED_NAME_BSO_LIMITS_EXCEEDED)
  private Boolean bsoLimitsExceeded;

  public static final String SERIALIZED_NAME_FAST_ANALYSIS = "fastAnalysis";
  @SerializedName(SERIALIZED_NAME_FAST_ANALYSIS)
  private Boolean fastAnalysis;

  public static final String SERIALIZED_NAME_MEASURE_DIMENSION_NAME = "measureDimensionName";
  @SerializedName(SERIALIZED_NAME_MEASURE_DIMENSION_NAME)
  private String measureDimensionName;

  /**
   * Gets or Sets dimDesignationMode
   */
  @JsonAdapter(DimDesignationModeEnum.Adapter.class)
  public enum DimDesignationModeEnum {
    DIM_DESIGNATION_MODE_ATTRIBS_AS_MULTILEVEL_DIMS("DIM_DESIGNATION_MODE_ATTRIBS_AS_MULTILEVEL_DIMS"),
    
    DIM_DESIGNATION_MODE_ATTRIBS_AS_FLAT_DIMS("DIM_DESIGNATION_MODE_ATTRIBS_AS_FLAT_DIMS"),
    
    DIM_DESIGNATION_MODE_ALL_FLAT("DIM_DESIGNATION_MODE_ALL_FLAT"),
    
    DIM_DESIGNATION_MODE_OAV("DIM_DESIGNATION_MODE_OAV"),
    
    DIM_DESIGNATION_MODE_OAV_DIM("DIM_DESIGNATION_MODE_OAV_DIM"),
    
    CONVERT_TO_CSV("CONVERT_TO_CSV"),
    
    DIM_DESIGNATION_MODE_ATTRIBS_AS_ATTRIBS("DIM_DESIGNATION_MODE_ATTRIBS_AS_ATTRIBS");

    private String value;

    DimDesignationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimDesignationModeEnum fromValue(String value) {
      for (DimDesignationModeEnum b : DimDesignationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimDesignationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimDesignationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimDesignationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimDesignationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIM_DESIGNATION_MODE = "dimDesignationMode";
  @SerializedName(SERIALIZED_NAME_DIM_DESIGNATION_MODE)
  private DimDesignationModeEnum dimDesignationMode;

  /**
   * Gets or Sets namingPriority
   */
  @JsonAdapter(NamingPriorityEnum.Adapter.class)
  public enum NamingPriorityEnum {
    NONE("NONE"),
    
    GENERATIONS("GENERATIONS"),
    
    DIMENSIONS("DIMENSIONS");

    private String value;

    NamingPriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NamingPriorityEnum fromValue(String value) {
      for (NamingPriorityEnum b : NamingPriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NamingPriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NamingPriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NamingPriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NamingPriorityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NAMING_PRIORITY = "namingPriority";
  @SerializedName(SERIALIZED_NAME_NAMING_PRIORITY)
  private NamingPriorityEnum namingPriority;

  public static final String SERIALIZED_NAME_DATE_COLUMN_ID = "dateColumnId";
  @SerializedName(SERIALIZED_NAME_DATE_COLUMN_ID)
  private Integer dateColumnId;

  public static final String SERIALIZED_NAME_DATE_FORMAT_STRING = "dateFormatString";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT_STRING)
  private String dateFormatString;

  public static final String SERIALIZED_NAME_DATE_DIM_STRING = "dateDimString";
  @SerializedName(SERIALIZED_NAME_DATE_DIM_STRING)
  private String dateDimString;

  public static final String SERIALIZED_NAME_DATE_DIMENSION_LEAVES = "dateDimensionLeaves";
  @SerializedName(SERIALIZED_NAME_DATE_DIMENSION_LEAVES)
  private List<String> dateDimensionLeaves = null;

  public static final String SERIALIZED_NAME_MAX_DATE = "maxDate";
  @SerializedName(SERIALIZED_NAME_MAX_DATE)
  private OffsetDateTime maxDate;

  public static final String SERIALIZED_NAME_MIN_DATE = "minDate";
  @SerializedName(SERIALIZED_NAME_MIN_DATE)
  private OffsetDateTime minDate;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_DIM_COMPACT_DESIGNATION_LIST = "dimCompactDesignationList";
  @SerializedName(SERIALIZED_NAME_DIM_COMPACT_DESIGNATION_LIST)
  private List<DimCompactDesignation> dimCompactDesignationList = null;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;


  public CompactDesignation file(String file) {
    
    this.file = file;
    return this;
  }

   /**
   * Get file
   * @return file
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFile() {
    return file;
  }


  public void setFile(String file) {
    this.file = file;
  }


  public CompactDesignation excelSheetName(String excelSheetName) {
    
    this.excelSheetName = excelSheetName;
    return this;
  }

   /**
   * Get excelSheetName
   * @return excelSheetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExcelSheetName() {
    return excelSheetName;
  }


  public void setExcelSheetName(String excelSheetName) {
    this.excelSheetName = excelSheetName;
  }


  public CompactDesignation columnOffset(Integer columnOffset) {
    
    this.columnOffset = columnOffset;
    return this;
  }

   /**
   * Get columnOffset
   * @return columnOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getColumnOffset() {
    return columnOffset;
  }


  public void setColumnOffset(Integer columnOffset) {
    this.columnOffset = columnOffset;
  }


  public CompactDesignation badRowListString(String badRowListString) {
    
    this.badRowListString = badRowListString;
    return this;
  }

   /**
   * Get badRowListString
   * @return badRowListString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBadRowListString() {
    return badRowListString;
  }


  public void setBadRowListString(String badRowListString) {
    this.badRowListString = badRowListString;
  }


  public CompactDesignation nr(Integer nr) {
    
    this.nr = nr;
    return this;
  }

   /**
   * Get nr
   * @return nr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNr() {
    return nr;
  }


  public void setNr(Integer nr) {
    this.nr = nr;
  }


  public CompactDesignation nrh(Integer nrh) {
    
    this.nrh = nrh;
    return this;
  }

   /**
   * Get nrh
   * @return nrh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNrh() {
    return nrh;
  }


  public void setNrh(Integer nrh) {
    this.nrh = nrh;
  }


  public CompactDesignation compactDesignationColumn(List<CompactDesignationColumn> compactDesignationColumn) {
    
    this.compactDesignationColumn = compactDesignationColumn;
    return this;
  }

  public CompactDesignation addCompactDesignationColumnItem(CompactDesignationColumn compactDesignationColumnItem) {
    if (this.compactDesignationColumn == null) {
      this.compactDesignationColumn = new ArrayList<CompactDesignationColumn>();
    }
    this.compactDesignationColumn.add(compactDesignationColumnItem);
    return this;
  }

   /**
   * Get compactDesignationColumn
   * @return compactDesignationColumn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CompactDesignationColumn> getCompactDesignationColumn() {
    return compactDesignationColumn;
  }


  public void setCompactDesignationColumn(List<CompactDesignationColumn> compactDesignationColumn) {
    this.compactDesignationColumn = compactDesignationColumn;
  }


  public CompactDesignation bsoLimitsExceeded(Boolean bsoLimitsExceeded) {
    
    this.bsoLimitsExceeded = bsoLimitsExceeded;
    return this;
  }

   /**
   * Get bsoLimitsExceeded
   * @return bsoLimitsExceeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBsoLimitsExceeded() {
    return bsoLimitsExceeded;
  }


  public void setBsoLimitsExceeded(Boolean bsoLimitsExceeded) {
    this.bsoLimitsExceeded = bsoLimitsExceeded;
  }


  public CompactDesignation fastAnalysis(Boolean fastAnalysis) {
    
    this.fastAnalysis = fastAnalysis;
    return this;
  }

   /**
   * Get fastAnalysis
   * @return fastAnalysis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getFastAnalysis() {
    return fastAnalysis;
  }


  public void setFastAnalysis(Boolean fastAnalysis) {
    this.fastAnalysis = fastAnalysis;
  }


  public CompactDesignation measureDimensionName(String measureDimensionName) {
    
    this.measureDimensionName = measureDimensionName;
    return this;
  }

   /**
   * Get measureDimensionName
   * @return measureDimensionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMeasureDimensionName() {
    return measureDimensionName;
  }


  public void setMeasureDimensionName(String measureDimensionName) {
    this.measureDimensionName = measureDimensionName;
  }


  public CompactDesignation dimDesignationMode(DimDesignationModeEnum dimDesignationMode) {
    
    this.dimDesignationMode = dimDesignationMode;
    return this;
  }

   /**
   * Get dimDesignationMode
   * @return dimDesignationMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DimDesignationModeEnum getDimDesignationMode() {
    return dimDesignationMode;
  }


  public void setDimDesignationMode(DimDesignationModeEnum dimDesignationMode) {
    this.dimDesignationMode = dimDesignationMode;
  }


  public CompactDesignation namingPriority(NamingPriorityEnum namingPriority) {
    
    this.namingPriority = namingPriority;
    return this;
  }

   /**
   * Get namingPriority
   * @return namingPriority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NamingPriorityEnum getNamingPriority() {
    return namingPriority;
  }


  public void setNamingPriority(NamingPriorityEnum namingPriority) {
    this.namingPriority = namingPriority;
  }


  public CompactDesignation dateColumnId(Integer dateColumnId) {
    
    this.dateColumnId = dateColumnId;
    return this;
  }

   /**
   * Get dateColumnId
   * @return dateColumnId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDateColumnId() {
    return dateColumnId;
  }


  public void setDateColumnId(Integer dateColumnId) {
    this.dateColumnId = dateColumnId;
  }


  public CompactDesignation dateFormatString(String dateFormatString) {
    
    this.dateFormatString = dateFormatString;
    return this;
  }

   /**
   * Get dateFormatString
   * @return dateFormatString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateFormatString() {
    return dateFormatString;
  }


  public void setDateFormatString(String dateFormatString) {
    this.dateFormatString = dateFormatString;
  }


  public CompactDesignation dateDimString(String dateDimString) {
    
    this.dateDimString = dateDimString;
    return this;
  }

   /**
   * Get dateDimString
   * @return dateDimString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateDimString() {
    return dateDimString;
  }


  public void setDateDimString(String dateDimString) {
    this.dateDimString = dateDimString;
  }


  public CompactDesignation dateDimensionLeaves(List<String> dateDimensionLeaves) {
    
    this.dateDimensionLeaves = dateDimensionLeaves;
    return this;
  }

  public CompactDesignation addDateDimensionLeavesItem(String dateDimensionLeavesItem) {
    if (this.dateDimensionLeaves == null) {
      this.dateDimensionLeaves = new ArrayList<String>();
    }
    this.dateDimensionLeaves.add(dateDimensionLeavesItem);
    return this;
  }

   /**
   * Get dateDimensionLeaves
   * @return dateDimensionLeaves
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDateDimensionLeaves() {
    return dateDimensionLeaves;
  }


  public void setDateDimensionLeaves(List<String> dateDimensionLeaves) {
    this.dateDimensionLeaves = dateDimensionLeaves;
  }


  public CompactDesignation maxDate(OffsetDateTime maxDate) {
    
    this.maxDate = maxDate;
    return this;
  }

   /**
   * Get maxDate
   * @return maxDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getMaxDate() {
    return maxDate;
  }


  public void setMaxDate(OffsetDateTime maxDate) {
    this.maxDate = maxDate;
  }


  public CompactDesignation minDate(OffsetDateTime minDate) {
    
    this.minDate = minDate;
    return this;
  }

   /**
   * Get minDate
   * @return minDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getMinDate() {
    return minDate;
  }


  public void setMinDate(OffsetDateTime minDate) {
    this.minDate = minDate;
  }


  public CompactDesignation tableName(String tableName) {
    
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTableName() {
    return tableName;
  }


  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public CompactDesignation dimCompactDesignationList(List<DimCompactDesignation> dimCompactDesignationList) {
    
    this.dimCompactDesignationList = dimCompactDesignationList;
    return this;
  }

  public CompactDesignation addDimCompactDesignationListItem(DimCompactDesignation dimCompactDesignationListItem) {
    if (this.dimCompactDesignationList == null) {
      this.dimCompactDesignationList = new ArrayList<DimCompactDesignation>();
    }
    this.dimCompactDesignationList.add(dimCompactDesignationListItem);
    return this;
  }

   /**
   * Get dimCompactDesignationList
   * @return dimCompactDesignationList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DimCompactDesignation> getDimCompactDesignationList() {
    return dimCompactDesignationList;
  }


  public void setDimCompactDesignationList(List<DimCompactDesignation> dimCompactDesignationList) {
    this.dimCompactDesignationList = dimCompactDesignationList;
  }


  public CompactDesignation query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompactDesignation compactDesignation = (CompactDesignation) o;
    return Objects.equals(this.file, compactDesignation.file) &&
        Objects.equals(this.excelSheetName, compactDesignation.excelSheetName) &&
        Objects.equals(this.columnOffset, compactDesignation.columnOffset) &&
        Objects.equals(this.badRowListString, compactDesignation.badRowListString) &&
        Objects.equals(this.nr, compactDesignation.nr) &&
        Objects.equals(this.nrh, compactDesignation.nrh) &&
        Objects.equals(this.compactDesignationColumn, compactDesignation.compactDesignationColumn) &&
        Objects.equals(this.bsoLimitsExceeded, compactDesignation.bsoLimitsExceeded) &&
        Objects.equals(this.fastAnalysis, compactDesignation.fastAnalysis) &&
        Objects.equals(this.measureDimensionName, compactDesignation.measureDimensionName) &&
        Objects.equals(this.dimDesignationMode, compactDesignation.dimDesignationMode) &&
        Objects.equals(this.namingPriority, compactDesignation.namingPriority) &&
        Objects.equals(this.dateColumnId, compactDesignation.dateColumnId) &&
        Objects.equals(this.dateFormatString, compactDesignation.dateFormatString) &&
        Objects.equals(this.dateDimString, compactDesignation.dateDimString) &&
        Objects.equals(this.dateDimensionLeaves, compactDesignation.dateDimensionLeaves) &&
        Objects.equals(this.maxDate, compactDesignation.maxDate) &&
        Objects.equals(this.minDate, compactDesignation.minDate) &&
        Objects.equals(this.tableName, compactDesignation.tableName) &&
        Objects.equals(this.dimCompactDesignationList, compactDesignation.dimCompactDesignationList) &&
        Objects.equals(this.query, compactDesignation.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(file, excelSheetName, columnOffset, badRowListString, nr, nrh, compactDesignationColumn, bsoLimitsExceeded, fastAnalysis, measureDimensionName, dimDesignationMode, namingPriority, dateColumnId, dateFormatString, dateDimString, dateDimensionLeaves, maxDate, minDate, tableName, dimCompactDesignationList, query);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompactDesignation {\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    excelSheetName: ").append(toIndentedString(excelSheetName)).append("\n");
    sb.append("    columnOffset: ").append(toIndentedString(columnOffset)).append("\n");
    sb.append("    badRowListString: ").append(toIndentedString(badRowListString)).append("\n");
    sb.append("    nr: ").append(toIndentedString(nr)).append("\n");
    sb.append("    nrh: ").append(toIndentedString(nrh)).append("\n");
    sb.append("    compactDesignationColumn: ").append(toIndentedString(compactDesignationColumn)).append("\n");
    sb.append("    bsoLimitsExceeded: ").append(toIndentedString(bsoLimitsExceeded)).append("\n");
    sb.append("    fastAnalysis: ").append(toIndentedString(fastAnalysis)).append("\n");
    sb.append("    measureDimensionName: ").append(toIndentedString(measureDimensionName)).append("\n");
    sb.append("    dimDesignationMode: ").append(toIndentedString(dimDesignationMode)).append("\n");
    sb.append("    namingPriority: ").append(toIndentedString(namingPriority)).append("\n");
    sb.append("    dateColumnId: ").append(toIndentedString(dateColumnId)).append("\n");
    sb.append("    dateFormatString: ").append(toIndentedString(dateFormatString)).append("\n");
    sb.append("    dateDimString: ").append(toIndentedString(dateDimString)).append("\n");
    sb.append("    dateDimensionLeaves: ").append(toIndentedString(dateDimensionLeaves)).append("\n");
    sb.append("    maxDate: ").append(toIndentedString(maxDate)).append("\n");
    sb.append("    minDate: ").append(toIndentedString(minDate)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    dimCompactDesignationList: ").append(toIndentedString(dimCompactDesignationList)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

