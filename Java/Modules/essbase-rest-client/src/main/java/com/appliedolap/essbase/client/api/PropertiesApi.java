/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.PropertyEntry;
import com.appliedolap.essbase.client.model.PropertyList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertiesApi {
    private ApiClient localVarApiClient;

    public PropertiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for propertiesAddProperty
     * @param body Property entry (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is created successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesAddPropertyCall(PropertyEntry body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesAddPropertyValidateBeforeCall(PropertyEntry body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling propertiesAddProperty(Async)");
        }
        

        okhttp3.Call localVarCall = propertiesAddPropertyCall(body, _callback);
        return localVarCall;

    }

    /**
     * Creates the property in the server
     * Creates the property in the server and returns the created property
     * @param body Property entry (required)
     * @return PropertyEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is created successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PropertyEntry propertiesAddProperty(PropertyEntry body) throws ApiException {
        ApiResponse<PropertyEntry> localVarResp = propertiesAddPropertyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Creates the property in the server
     * Creates the property in the server and returns the created property
     * @param body Property entry (required)
     * @return ApiResponse&lt;PropertyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is created successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyEntry> propertiesAddPropertyWithHttpInfo(PropertyEntry body) throws ApiException {
        okhttp3.Call localVarCall = propertiesAddPropertyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates the property in the server (asynchronously)
     * Creates the property in the server and returns the created property
     * @param body Property entry (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is created successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to create the property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesAddPropertyAsync(PropertyEntry body, final ApiCallback<PropertyEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesAddPropertyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesDeleteProperty
     * @param propertyName Property name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Property is deleted successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete a property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesDeletePropertyCall(String propertyName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties/{propertyName}"
            .replaceAll("\\{" + "propertyName" + "\\}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesDeletePropertyValidateBeforeCall(String propertyName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling propertiesDeleteProperty(Async)");
        }
        

        okhttp3.Call localVarCall = propertiesDeletePropertyCall(propertyName, _callback);
        return localVarCall;

    }

    /**
     * Deletes a property in the server
     * Deletes a property in the server
     * @param propertyName Property name (required)
     * @return PropertyEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Property is deleted successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete a property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PropertyEntry propertiesDeleteProperty(String propertyName) throws ApiException {
        ApiResponse<PropertyEntry> localVarResp = propertiesDeletePropertyWithHttpInfo(propertyName);
        return localVarResp.getData();
    }

    /**
     * Deletes a property in the server
     * Deletes a property in the server
     * @param propertyName Property name (required)
     * @return ApiResponse&lt;PropertyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Property is deleted successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete a property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyEntry> propertiesDeletePropertyWithHttpInfo(String propertyName) throws ApiException {
        okhttp3.Call localVarCall = propertiesDeletePropertyValidateBeforeCall(propertyName, null);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a property in the server (asynchronously)
     * Deletes a property in the server
     * @param propertyName Property name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Property is deleted successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to delete a property. This happens when the property json is incorrect or when the given property name already added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesDeletePropertyAsync(String propertyName, final ApiCallback<PropertyEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesDeletePropertyValidateBeforeCall(propertyName, _callback);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesGetProperties
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are retrieved successfully. Returns all the properties from server and the links to get/edit each property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesGetPropertiesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesGetPropertiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = propertiesGetPropertiesCall(_callback);
        return localVarCall;

    }

    /**
     * Get Server Properties
     * Returns all the properties from the server
     * @return List&lt;PropertyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are retrieved successfully. Returns all the properties from server and the links to get/edit each property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public List<PropertyList> propertiesGetProperties() throws ApiException {
        ApiResponse<List<PropertyList>> localVarResp = propertiesGetPropertiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Server Properties
     * Returns all the properties from the server
     * @return ApiResponse&lt;List&lt;PropertyList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are retrieved successfully. Returns all the properties from server and the links to get/edit each property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PropertyList>> propertiesGetPropertiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = propertiesGetPropertiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PropertyList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Server Properties (asynchronously)
     * Returns all the properties from the server
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are retrieved successfully. Returns all the properties from server and the links to get/edit each property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesGetPropertiesAsync(final ApiCallback<List<PropertyList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesGetPropertiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PropertyList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesGetProperty
     * @param propertyName Property name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property retrieved successfully. Returns property name and value from the server and links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the property. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesGetPropertyCall(String propertyName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties/{propertyName}"
            .replaceAll("\\{" + "propertyName" + "\\}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesGetPropertyValidateBeforeCall(String propertyName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling propertiesGetProperty(Async)");
        }
        

        okhttp3.Call localVarCall = propertiesGetPropertyCall(propertyName, _callback);
        return localVarCall;

    }

    /**
     * Get Server Property
     * Returns property based on name from the server
     * @param propertyName Property name (required)
     * @return PropertyEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property retrieved successfully. Returns property name and value from the server and links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the property. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public PropertyEntry propertiesGetProperty(String propertyName) throws ApiException {
        ApiResponse<PropertyEntry> localVarResp = propertiesGetPropertyWithHttpInfo(propertyName);
        return localVarResp.getData();
    }

    /**
     * Get Server Property
     * Returns property based on name from the server
     * @param propertyName Property name (required)
     * @return ApiResponse&lt;PropertyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property retrieved successfully. Returns property name and value from the server and links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the property. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyEntry> propertiesGetPropertyWithHttpInfo(String propertyName) throws ApiException {
        okhttp3.Call localVarCall = propertiesGetPropertyValidateBeforeCall(propertyName, null);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Server Property (asynchronously)
     * Returns property based on name from the server
     * @param propertyName Property name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property retrieved successfully. Returns property name and value from the server and links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get the property. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesGetPropertyAsync(String propertyName, final ApiCallback<PropertyEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesGetPropertyValidateBeforeCall(propertyName, _callback);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesSetProperties
     * @param body List of Property entries (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are updated successfully. Returns the list of updated properties, its details and the links to get/edit the properties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the property. This happens when the property json is incorrect or when the given property name is not added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesSetPropertiesCall(List<PropertyEntry> body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesSetPropertiesValidateBeforeCall(List<PropertyEntry> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling propertiesSetProperties(Async)");
        }
        

        okhttp3.Call localVarCall = propertiesSetPropertiesCall(body, _callback);
        return localVarCall;

    }

    /**
     * Updates the property values in the server
     * Updates the properties in the server and returns the list of updated properties
     * @param body List of Property entries (required)
     * @return PropertyEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are updated successfully. Returns the list of updated properties, its details and the links to get/edit the properties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the property. This happens when the property json is incorrect or when the given property name is not added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public PropertyEntry propertiesSetProperties(List<PropertyEntry> body) throws ApiException {
        ApiResponse<PropertyEntry> localVarResp = propertiesSetPropertiesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Updates the property values in the server
     * Updates the properties in the server and returns the list of updated properties
     * @param body List of Property entries (required)
     * @return ApiResponse&lt;PropertyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are updated successfully. Returns the list of updated properties, its details and the links to get/edit the properties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the property. This happens when the property json is incorrect or when the given property name is not added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyEntry> propertiesSetPropertiesWithHttpInfo(List<PropertyEntry> body) throws ApiException {
        okhttp3.Call localVarCall = propertiesSetPropertiesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the property values in the server (asynchronously)
     * Updates the properties in the server and returns the list of updated properties
     * @param body List of Property entries (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Properties are updated successfully. Returns the list of updated properties, its details and the links to get/edit the properties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to update the property. This happens when the property json is incorrect or when the given property name is not added to the server </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesSetPropertiesAsync(List<PropertyEntry> body, final ApiCallback<PropertyEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesSetPropertiesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesSetProperty
     * @param propertyName Property name (required)
     * @param body Property entry (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is updated successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the property. The JSON for the property may be incorrect, or the specified property name may not have been added to the server.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesSetPropertyCall(String propertyName, PropertyEntry body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/properties/{propertyName}"
            .replaceAll("\\{" + "propertyName" + "\\}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesSetPropertyValidateBeforeCall(String propertyName, PropertyEntry body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling propertiesSetProperty(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling propertiesSetProperty(Async)");
        }
        

        okhttp3.Call localVarCall = propertiesSetPropertyCall(propertyName, body, _callback);
        return localVarCall;

    }

    /**
     * Update Server Property
     * Updates the property in the server and returns the updated property
     * @param propertyName Property name (required)
     * @param body Property entry (required)
     * @return PropertyEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is updated successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the property. The JSON for the property may be incorrect, or the specified property name may not have been added to the server.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public PropertyEntry propertiesSetProperty(String propertyName, PropertyEntry body) throws ApiException {
        ApiResponse<PropertyEntry> localVarResp = propertiesSetPropertyWithHttpInfo(propertyName, body);
        return localVarResp.getData();
    }

    /**
     * Update Server Property
     * Updates the property in the server and returns the updated property
     * @param propertyName Property name (required)
     * @param body Property entry (required)
     * @return ApiResponse&lt;PropertyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is updated successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the property. The JSON for the property may be incorrect, or the specified property name may not have been added to the server.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyEntry> propertiesSetPropertyWithHttpInfo(String propertyName, PropertyEntry body) throws ApiException {
        okhttp3.Call localVarCall = propertiesSetPropertyValidateBeforeCall(propertyName, body, null);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Server Property (asynchronously)
     * Updates the property in the server and returns the updated property
     * @param propertyName Property name (required)
     * @param body Property entry (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property is updated successfully. Returns the property details and the links to get/edit the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the property. The JSON for the property may be incorrect, or the specified property name may not have been added to the server.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesSetPropertyAsync(String propertyName, PropertyEntry body, final ApiCallback<PropertyEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesSetPropertyValidateBeforeCall(propertyName, body, _callback);
        Type localVarReturnType = new TypeToken<PropertyEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
