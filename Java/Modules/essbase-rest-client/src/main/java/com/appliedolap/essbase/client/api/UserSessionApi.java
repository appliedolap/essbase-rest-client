/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.ResetPasswordBean;
import com.appliedolap.essbase.client.model.UserBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserSessionApi {
    private ApiClient localVarApiClient;

    public UserSessionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserSessionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for userSessionGetSession
     * @param token  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns logged in user information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get user information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSessionGetSessionCall(Boolean token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSessionGetSessionValidateBeforeCall(Boolean token, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userSessionGetSessionCall(token, _callback);
        return localVarCall;

    }

    /**
     * Get Session
     * Returns logged in user information.
     * @param token  (optional)
     * @return UserBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns logged in user information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get user information. </td><td>  -  </td></tr>
     </table>
     */
    public UserBean userSessionGetSession(Boolean token) throws ApiException {
        ApiResponse<UserBean> localVarResp = userSessionGetSessionWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Get Session
     * Returns logged in user information.
     * @param token  (optional)
     * @return ApiResponse&lt;UserBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns logged in user information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get user information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserBean> userSessionGetSessionWithHttpInfo(Boolean token) throws ApiException {
        okhttp3.Call localVarCall = userSessionGetSessionValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<UserBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Session (asynchronously)
     * Returns logged in user information.
     * @param token  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns logged in user information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fails to get user information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSessionGetSessionAsync(Boolean token, final ApiCallback<UserBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSessionGetSessionValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<UserBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSessionResetPassword
     * @param body Reset password details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset password is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reset password failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSessionResetPasswordCall(ResetPasswordBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/session/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSessionResetPasswordValidateBeforeCall(ResetPasswordBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userSessionResetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = userSessionResetPasswordCall(body, _callback);
        return localVarCall;

    }

    /**
     * Reset Password.
     * Reset the password.
     * @param body Reset password details. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset password is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reset password failed. </td><td>  -  </td></tr>
     </table>
     */
    public void userSessionResetPassword(ResetPasswordBean body) throws ApiException {
        userSessionResetPasswordWithHttpInfo(body);
    }

    /**
     * Reset Password.
     * Reset the password.
     * @param body Reset password details. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset password is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reset password failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userSessionResetPasswordWithHttpInfo(ResetPasswordBean body) throws ApiException {
        okhttp3.Call localVarCall = userSessionResetPasswordValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset Password. (asynchronously)
     * Reset the password.
     * @param body Reset password details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset password is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reset password failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSessionResetPasswordAsync(ResetPasswordBean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSessionResetPasswordValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSessionSignoff
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session deactivation is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Session deactivation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSessionSignoffCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSessionSignoffValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userSessionSignoffCall(_callback);
        return localVarCall;

    }

    /**
     * Logout Session
     * Deactivates current session.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session deactivation is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Session deactivation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public void userSessionSignoff() throws ApiException {
        userSessionSignoffWithHttpInfo();
    }

    /**
     * Logout Session
     * Deactivates current session.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session deactivation is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Session deactivation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userSessionSignoffWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userSessionSignoffValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Logout Session (asynchronously)
     * Deactivates current session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session deactivation is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Session deactivation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSessionSignoffAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSessionSignoffValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
