/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.ApplicationProvisionReportItem;
import com.appliedolap.essbase.client.model.ApplicationProvisionReportItemList;
import com.appliedolap.essbase.client.model.DatabaseProvisionReportItemList;
import com.appliedolap.essbase.client.model.MainProvisionReport;
import com.appliedolap.essbase.client.model.ProvisionReportItemList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupProvisioningReportApi {
    private ApiClient localVarApiClient;

    public GroupProvisioningReportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupProvisioningReportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for groupProvisioningReportGetFilters
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;p&gt;Group not found.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetFiltersCall(String application, String groupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/provisionReport/applications/{application}/filters"
            .replaceAll("\\{" + "application" + "\\}", localVarApiClient.escapeString(application.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupProvisioningReportGetFiltersValidateBeforeCall(String application, String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling groupProvisioningReportGetFilters(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupProvisioningReportGetFilters(Async)");
        }
        

        okhttp3.Call localVarCall = groupProvisioningReportGetFiltersCall(application, groupId, _callback);
        return localVarCall;

    }

    /**
     * Get Filters Provisioning Report
     * &lt;p&gt;Get filters provisioning report for specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt;
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @return DatabaseProvisionReportItemList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;p&gt;Group not found.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseProvisionReportItemList groupProvisioningReportGetFilters(String application, String groupId) throws ApiException {
        ApiResponse<DatabaseProvisionReportItemList> localVarResp = groupProvisioningReportGetFiltersWithHttpInfo(application, groupId);
        return localVarResp.getData();
    }

    /**
     * Get Filters Provisioning Report
     * &lt;p&gt;Get filters provisioning report for specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt;
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @return ApiResponse&lt;DatabaseProvisionReportItemList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;p&gt;Group not found.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseProvisionReportItemList> groupProvisioningReportGetFiltersWithHttpInfo(String application, String groupId) throws ApiException {
        okhttp3.Call localVarCall = groupProvisioningReportGetFiltersValidateBeforeCall(application, groupId, null);
        Type localVarReturnType = new TypeToken<DatabaseProvisionReportItemList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Filters Provisioning Report (asynchronously)
     * &lt;p&gt;Get filters provisioning report for specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt;
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;p&gt;Group not found.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetFiltersAsync(String application, String groupId, final ApiCallback<DatabaseProvisionReportItemList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupProvisioningReportGetFiltersValidateBeforeCall(application, groupId, _callback);
        Type localVarReturnType = new TypeToken<DatabaseProvisionReportItemList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupProvisioningReportGetFullReport
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetFullReportCall(String groupId, String expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/provisionReport"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupProvisioningReportGetFullReportValidateBeforeCall(String groupId, String expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupProvisioningReportGetFullReport(Async)");
        }
        

        okhttp3.Call localVarCall = groupProvisioningReportGetFullReportCall(groupId, expand, _callback);
        return localVarCall;

    }

    /**
     * Get Full Provisioning Report
     * &lt;p&gt;Get a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @return MainProvisionReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public MainProvisionReport groupProvisioningReportGetFullReport(String groupId, String expand) throws ApiException {
        ApiResponse<MainProvisionReport> localVarResp = groupProvisioningReportGetFullReportWithHttpInfo(groupId, expand);
        return localVarResp.getData();
    }

    /**
     * Get Full Provisioning Report
     * &lt;p&gt;Get a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;MainProvisionReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainProvisionReport> groupProvisioningReportGetFullReportWithHttpInfo(String groupId, String expand) throws ApiException {
        okhttp3.Call localVarCall = groupProvisioningReportGetFullReportValidateBeforeCall(groupId, expand, null);
        Type localVarReturnType = new TypeToken<MainProvisionReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Full Provisioning Report (asynchronously)
     * &lt;p&gt;Get a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetFullReportAsync(String groupId, String expand, final ApiCallback<MainProvisionReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupProvisioningReportGetFullReportValidateBeforeCall(groupId, expand, _callback);
        Type localVarReturnType = new TypeToken<MainProvisionReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupProvisioningReportGetReportForAllApplications
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report for applications returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetReportForAllApplicationsCall(String groupId, String expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/provisionReport/applications"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupProvisioningReportGetReportForAllApplicationsValidateBeforeCall(String groupId, String expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupProvisioningReportGetReportForAllApplications(Async)");
        }
        

        okhttp3.Call localVarCall = groupProvisioningReportGetReportForAllApplicationsCall(groupId, expand, _callback);
        return localVarCall;

    }

    /**
     * Get All Applications Provisioning Report
     * &lt;p&gt;Get a provisioning report for all applications. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt;
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @return ApplicationProvisionReportItemList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report for applications returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationProvisionReportItemList groupProvisioningReportGetReportForAllApplications(String groupId, String expand) throws ApiException {
        ApiResponse<ApplicationProvisionReportItemList> localVarResp = groupProvisioningReportGetReportForAllApplicationsWithHttpInfo(groupId, expand);
        return localVarResp.getData();
    }

    /**
     * Get All Applications Provisioning Report
     * &lt;p&gt;Get a provisioning report for all applications. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt;
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ApplicationProvisionReportItemList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report for applications returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationProvisionReportItemList> groupProvisioningReportGetReportForAllApplicationsWithHttpInfo(String groupId, String expand) throws ApiException {
        okhttp3.Call localVarCall = groupProvisioningReportGetReportForAllApplicationsValidateBeforeCall(groupId, expand, null);
        Type localVarReturnType = new TypeToken<ApplicationProvisionReportItemList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Applications Provisioning Report (asynchronously)
     * &lt;p&gt;Get a provisioning report for all applications. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt;
     * @param groupId Group ID (required)
     * @param expand &lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report for applications returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetReportForAllApplicationsAsync(String groupId, String expand, final ApiCallback<ApplicationProvisionReportItemList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupProvisioningReportGetReportForAllApplicationsValidateBeforeCall(groupId, expand, _callback);
        Type localVarReturnType = new TypeToken<ApplicationProvisionReportItemList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupProvisioningReportGetReportForApplication
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetReportForApplicationCall(String application, String groupId, String expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/provisionReport/applications/{application}"
            .replaceAll("\\{" + "application" + "\\}", localVarApiClient.escapeString(application.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupProvisioningReportGetReportForApplicationValidateBeforeCall(String application, String groupId, String expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling groupProvisioningReportGetReportForApplication(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupProvisioningReportGetReportForApplication(Async)");
        }
        

        okhttp3.Call localVarCall = groupProvisioningReportGetReportForApplicationCall(application, groupId, expand, _callback);
        return localVarCall;

    }

    /**
     * Get Application Provisioning Report
     * Get provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)
     * @return ApplicationProvisionReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationProvisionReportItem groupProvisioningReportGetReportForApplication(String application, String groupId, String expand) throws ApiException {
        ApiResponse<ApplicationProvisionReportItem> localVarResp = groupProvisioningReportGetReportForApplicationWithHttpInfo(application, groupId, expand);
        return localVarResp.getData();
    }

    /**
     * Get Application Provisioning Report
     * Get provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ApplicationProvisionReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationProvisionReportItem> groupProvisioningReportGetReportForApplicationWithHttpInfo(String application, String groupId, String expand) throws ApiException {
        okhttp3.Call localVarCall = groupProvisioningReportGetReportForApplicationValidateBeforeCall(application, groupId, expand, null);
        Type localVarReturnType = new TypeToken<ApplicationProvisionReportItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Application Provisioning Report (asynchronously)
     * Get provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID. (required)
     * @param expand &lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetReportForApplicationAsync(String application, String groupId, String expand, final ApiCallback<ApplicationProvisionReportItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupProvisioningReportGetReportForApplicationValidateBeforeCall(application, groupId, expand, _callback);
        Type localVarReturnType = new TypeToken<ApplicationProvisionReportItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupProvisioningReportGetRoles
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles provisioning report for specified application. Logged in user should have at least &#39;Application Manager&#39; role for specified application to invoke this API.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetRolesCall(String application, String groupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/provisionReport/applications/{application}/roles"
            .replaceAll("\\{" + "application" + "\\}", localVarApiClient.escapeString(application.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupProvisioningReportGetRolesValidateBeforeCall(String application, String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling groupProvisioningReportGetRoles(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupProvisioningReportGetRoles(Async)");
        }
        

        okhttp3.Call localVarCall = groupProvisioningReportGetRolesCall(application, groupId, _callback);
        return localVarCall;

    }

    /**
     * Get Application Roles Provisioning Report
     * Get roles provisioning report for specified application.
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @return ProvisionReportItemList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles provisioning report for specified application. Logged in user should have at least &#39;Application Manager&#39; role for specified application to invoke this API.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionReportItemList groupProvisioningReportGetRoles(String application, String groupId) throws ApiException {
        ApiResponse<ProvisionReportItemList> localVarResp = groupProvisioningReportGetRolesWithHttpInfo(application, groupId);
        return localVarResp.getData();
    }

    /**
     * Get Application Roles Provisioning Report
     * Get roles provisioning report for specified application.
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @return ApiResponse&lt;ProvisionReportItemList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles provisioning report for specified application. Logged in user should have at least &#39;Application Manager&#39; role for specified application to invoke this API.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionReportItemList> groupProvisioningReportGetRolesWithHttpInfo(String application, String groupId) throws ApiException {
        okhttp3.Call localVarCall = groupProvisioningReportGetRolesValidateBeforeCall(application, groupId, null);
        Type localVarReturnType = new TypeToken<ProvisionReportItemList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Application Roles Provisioning Report (asynchronously)
     * Get roles provisioning report for specified application.
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles provisioning report for specified application. Logged in user should have at least &#39;Application Manager&#39; role for specified application to invoke this API.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetRolesAsync(String application, String groupId, final ApiCallback<ProvisionReportItemList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupProvisioningReportGetRolesValidateBeforeCall(application, groupId, _callback);
        Type localVarReturnType = new TypeToken<ProvisionReportItemList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupProvisioningReportGetScripts
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetScriptsCall(String application, String groupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/provisionReport/applications/{application}/scripts"
            .replaceAll("\\{" + "application" + "\\}", localVarApiClient.escapeString(application.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupProvisioningReportGetScriptsValidateBeforeCall(String application, String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling groupProvisioningReportGetScripts(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupProvisioningReportGetScripts(Async)");
        }
        

        okhttp3.Call localVarCall = groupProvisioningReportGetScriptsCall(application, groupId, _callback);
        return localVarCall;

    }

    /**
     * Get Scripts Provisioning Report
     * &lt;p&gt;Get the scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt;
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @return DatabaseProvisionReportItemList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseProvisionReportItemList groupProvisioningReportGetScripts(String application, String groupId) throws ApiException {
        ApiResponse<DatabaseProvisionReportItemList> localVarResp = groupProvisioningReportGetScriptsWithHttpInfo(application, groupId);
        return localVarResp.getData();
    }

    /**
     * Get Scripts Provisioning Report
     * &lt;p&gt;Get the scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt;
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @return ApiResponse&lt;DatabaseProvisionReportItemList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseProvisionReportItemList> groupProvisioningReportGetScriptsWithHttpInfo(String application, String groupId) throws ApiException {
        okhttp3.Call localVarCall = groupProvisioningReportGetScriptsValidateBeforeCall(application, groupId, null);
        Type localVarReturnType = new TypeToken<DatabaseProvisionReportItemList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scripts Provisioning Report (asynchronously)
     * &lt;p&gt;Get the scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt;
     * @param application &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param groupId Group ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Provisioning report returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get provisioning report. The logged in user may not have the appropriate application role.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupProvisioningReportGetScriptsAsync(String application, String groupId, final ApiCallback<DatabaseProvisionReportItemList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupProvisioningReportGetScriptsValidateBeforeCall(application, groupId, _callback);
        Type localVarReturnType = new TypeToken<DatabaseProvisionReportItemList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
