/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.LocationAliasBean;
import com.appliedolap.essbase.client.model.LocationAliasList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationAliasesApi {
    private ApiClient localVarApiClient;

    public LocationAliasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationAliasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for locationAliasesCreate
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param body Location alias details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Location alias created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to create location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesCreateCall(String applicationName, String databaseName, LocationAliasBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/locationaliases"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationAliasesCreateValidateBeforeCall(String applicationName, String databaseName, LocationAliasBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling locationAliasesCreate(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling locationAliasesCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling locationAliasesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = locationAliasesCreateCall(applicationName, databaseName, body, _callback);
        return localVarCall;

    }

    /**
     * Create location alias
     * Creates new location alias in the given application and database
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param body Location alias details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Location alias created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to create location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void locationAliasesCreate(String applicationName, String databaseName, LocationAliasBean body) throws ApiException {
        locationAliasesCreateWithHttpInfo(applicationName, databaseName, body);
    }

    /**
     * Create location alias
     * Creates new location alias in the given application and database
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param body Location alias details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Location alias created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to create location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> locationAliasesCreateWithHttpInfo(String applicationName, String databaseName, LocationAliasBean body) throws ApiException {
        okhttp3.Call localVarCall = locationAliasesCreateValidateBeforeCall(applicationName, databaseName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create location alias (asynchronously)
     * Creates new location alias in the given application and database
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param body Location alias details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Location alias created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to create location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesCreateAsync(String applicationName, String databaseName, LocationAliasBean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationAliasesCreateValidateBeforeCall(applicationName, databaseName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationAliasesDelete
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to delete location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesDeleteCall(String applicationName, String databaseName, String aliasName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()))
            .replaceAll("\\{" + "aliasName" + "\\}", localVarApiClient.escapeString(aliasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationAliasesDeleteValidateBeforeCall(String applicationName, String databaseName, String aliasName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling locationAliasesDelete(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling locationAliasesDelete(Async)");
        }
        
        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling locationAliasesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = locationAliasesDeleteCall(applicationName, databaseName, aliasName, _callback);
        return localVarCall;

    }

    /**
     * Deletes location alias
     * Deletes the location alias with the given name from the application and database
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to delete location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void locationAliasesDelete(String applicationName, String databaseName, String aliasName) throws ApiException {
        locationAliasesDeleteWithHttpInfo(applicationName, databaseName, aliasName);
    }

    /**
     * Deletes location alias
     * Deletes the location alias with the given name from the application and database
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to delete location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> locationAliasesDeleteWithHttpInfo(String applicationName, String databaseName, String aliasName) throws ApiException {
        okhttp3.Call localVarCall = locationAliasesDeleteValidateBeforeCall(applicationName, databaseName, aliasName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes location alias (asynchronously)
     * Deletes the location alias with the given name from the application and database
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to delete location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesDeleteAsync(String applicationName, String databaseName, String aliasName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationAliasesDeleteValidateBeforeCall(applicationName, databaseName, aliasName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationAliasesGetLocationAlias
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesGetLocationAliasCall(String applicationName, String databaseName, String aliasName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()))
            .replaceAll("\\{" + "aliasName" + "\\}", localVarApiClient.escapeString(aliasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationAliasesGetLocationAliasValidateBeforeCall(String applicationName, String databaseName, String aliasName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling locationAliasesGetLocationAlias(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling locationAliasesGetLocationAlias(Async)");
        }
        
        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling locationAliasesGetLocationAlias(Async)");
        }
        

        okhttp3.Call localVarCall = locationAliasesGetLocationAliasCall(applicationName, databaseName, aliasName, _callback);
        return localVarCall;

    }

    /**
     * Get location alias details
     * Returns the details of the given location alias name
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @return LocationAliasBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public LocationAliasBean locationAliasesGetLocationAlias(String applicationName, String databaseName, String aliasName) throws ApiException {
        ApiResponse<LocationAliasBean> localVarResp = locationAliasesGetLocationAliasWithHttpInfo(applicationName, databaseName, aliasName);
        return localVarResp.getData();
    }

    /**
     * Get location alias details
     * Returns the details of the given location alias name
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @return ApiResponse&lt;LocationAliasBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationAliasBean> locationAliasesGetLocationAliasWithHttpInfo(String applicationName, String databaseName, String aliasName) throws ApiException {
        okhttp3.Call localVarCall = locationAliasesGetLocationAliasValidateBeforeCall(applicationName, databaseName, aliasName, null);
        Type localVarReturnType = new TypeToken<LocationAliasBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get location alias details (asynchronously)
     * Returns the details of the given location alias name
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesGetLocationAliasAsync(String applicationName, String databaseName, String aliasName, final ApiCallback<LocationAliasBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationAliasesGetLocationAliasValidateBeforeCall(applicationName, databaseName, aliasName, _callback);
        Type localVarReturnType = new TypeToken<LocationAliasBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationAliasesGetLocationAliases
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @param limit Number of location aliases to be returned (optional)
     * @param serverName Location alias target server name (optional)
     * @param applicationName2 Location alias target application name (optional)
     * @param databaseName2 Location alias target database name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesGetLocationAliasesCall(String applicationName, String databaseName, Integer offset, Integer limit, String serverName, String applicationName2, String databaseName2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/locationaliases"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (serverName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serverName", serverName));
        }

        if (applicationName2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationName", applicationName2));
        }

        if (databaseName2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseName", databaseName2));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationAliasesGetLocationAliasesValidateBeforeCall(String applicationName, String databaseName, Integer offset, Integer limit, String serverName, String applicationName2, String databaseName2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling locationAliasesGetLocationAliases(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling locationAliasesGetLocationAliases(Async)");
        }
        

        okhttp3.Call localVarCall = locationAliasesGetLocationAliasesCall(applicationName, databaseName, offset, limit, serverName, applicationName2, databaseName2, _callback);
        return localVarCall;

    }

    /**
     * Get location alias details
     * Get location alias details
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @param limit Number of location aliases to be returned (optional)
     * @param serverName Location alias target server name (optional)
     * @param applicationName2 Location alias target application name (optional)
     * @param databaseName2 Location alias target database name (optional)
     * @return LocationAliasList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public LocationAliasList locationAliasesGetLocationAliases(String applicationName, String databaseName, Integer offset, Integer limit, String serverName, String applicationName2, String databaseName2) throws ApiException {
        ApiResponse<LocationAliasList> localVarResp = locationAliasesGetLocationAliasesWithHttpInfo(applicationName, databaseName, offset, limit, serverName, applicationName2, databaseName2);
        return localVarResp.getData();
    }

    /**
     * Get location alias details
     * Get location alias details
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @param limit Number of location aliases to be returned (optional)
     * @param serverName Location alias target server name (optional)
     * @param applicationName2 Location alias target application name (optional)
     * @param databaseName2 Location alias target database name (optional)
     * @return ApiResponse&lt;LocationAliasList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationAliasList> locationAliasesGetLocationAliasesWithHttpInfo(String applicationName, String databaseName, Integer offset, Integer limit, String serverName, String applicationName2, String databaseName2) throws ApiException {
        okhttp3.Call localVarCall = locationAliasesGetLocationAliasesValidateBeforeCall(applicationName, databaseName, offset, limit, serverName, applicationName2, databaseName2, null);
        Type localVarReturnType = new TypeToken<LocationAliasList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get location alias details (asynchronously)
     * Get location alias details
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @param limit Number of location aliases to be returned (optional)
     * @param serverName Location alias target server name (optional)
     * @param applicationName2 Location alias target application name (optional)
     * @param databaseName2 Location alias target database name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns location alias details successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to get location alias details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesGetLocationAliasesAsync(String applicationName, String databaseName, Integer offset, Integer limit, String serverName, String applicationName2, String databaseName2, final ApiCallback<LocationAliasList> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationAliasesGetLocationAliasesValidateBeforeCall(applicationName, databaseName, offset, limit, serverName, applicationName2, databaseName2, _callback);
        Type localVarReturnType = new TypeToken<LocationAliasList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationAliasesUpdate
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param body Location alias details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to update location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesUpdateCall(String applicationName, String databaseName, String aliasName, LocationAliasBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()))
            .replaceAll("\\{" + "aliasName" + "\\}", localVarApiClient.escapeString(aliasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationAliasesUpdateValidateBeforeCall(String applicationName, String databaseName, String aliasName, LocationAliasBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling locationAliasesUpdate(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling locationAliasesUpdate(Async)");
        }
        
        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling locationAliasesUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling locationAliasesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = locationAliasesUpdateCall(applicationName, databaseName, aliasName, body, _callback);
        return localVarCall;

    }

    /**
     * Update location alias
     * Updates location alias with new application and database. Not suupported when location alias is defined across essbase instances
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param body Location alias details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to update location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void locationAliasesUpdate(String applicationName, String databaseName, String aliasName, LocationAliasBean body) throws ApiException {
        locationAliasesUpdateWithHttpInfo(applicationName, databaseName, aliasName, body);
    }

    /**
     * Update location alias
     * Updates location alias with new application and database. Not suupported when location alias is defined across essbase instances
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param body Location alias details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to update location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> locationAliasesUpdateWithHttpInfo(String applicationName, String databaseName, String aliasName, LocationAliasBean body) throws ApiException {
        okhttp3.Call localVarCall = locationAliasesUpdateValidateBeforeCall(applicationName, databaseName, aliasName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update location alias (asynchronously)
     * Updates location alias with new application and database. Not suupported when location alias is defined across essbase instances
     * @param applicationName Application name (required)
     * @param databaseName Database name (required)
     * @param aliasName Location alias name (required)
     * @param body Location alias details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated location alias successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to update location alias </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationAliasesUpdateAsync(String applicationName, String databaseName, String aliasName, LocationAliasBean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationAliasesUpdateValidateBeforeCall(applicationName, databaseName, aliasName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
