/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RuntimeStatistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-06-29T09:19:09.255-07:00[America/Los_Angeles]")
public class RuntimeStatistics {
  public static final String SERIALIZED_NAME_CACHE_HIT_RATIO = "cacheHitRatio";
  @SerializedName(SERIALIZED_NAME_CACHE_HIT_RATIO)
  private Double cacheHitRatio;

  public static final String SERIALIZED_NAME_CURRENT_CACHE_SIZE = "currentCacheSize";
  @SerializedName(SERIALIZED_NAME_CURRENT_CACHE_SIZE)
  private Double currentCacheSize;

  public static final String SERIALIZED_NAME_CURRENT_CACHE_SIZE_LIMIT = "currentCacheSizeLimit";
  @SerializedName(SERIALIZED_NAME_CURRENT_CACHE_SIZE_LIMIT)
  private Double currentCacheSizeLimit;

  public static final String SERIALIZED_NAME_PAGE_READS_SINCE_LAST_STARTUP = "pageReadsSinceLastStartup";
  @SerializedName(SERIALIZED_NAME_PAGE_READS_SINCE_LAST_STARTUP)
  private Double pageReadsSinceLastStartup;

  public static final String SERIALIZED_NAME_PAGE_WRITES_SINCE_LAST_STARTUP = "pageWritesSinceLastStartup";
  @SerializedName(SERIALIZED_NAME_PAGE_WRITES_SINCE_LAST_STARTUP)
  private Double pageWritesSinceLastStartup;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Double pageSize;

  public static final String SERIALIZED_NAME_DISK_SPACE_ALLOCATED_FOR_DATA = "diskSpaceAllocatedForData";
  @SerializedName(SERIALIZED_NAME_DISK_SPACE_ALLOCATED_FOR_DATA)
  private Double diskSpaceAllocatedForData;

  public static final String SERIALIZED_NAME_DISK_SPACE_USED_BY_DATA = "diskSpaceUsedByData";
  @SerializedName(SERIALIZED_NAME_DISK_SPACE_USED_BY_DATA)
  private Double diskSpaceUsedByData;

  public static final String SERIALIZED_NAME_TEMPORARY_DISK_SPACE_ALLOCATED = "temporaryDiskSpaceAllocated";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_DISK_SPACE_ALLOCATED)
  private Double temporaryDiskSpaceAllocated;

  public static final String SERIALIZED_NAME_TEMPORARY_DISK_SPACE_USED = "temporaryDiskSpaceUsed";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_DISK_SPACE_USED)
  private Double temporaryDiskSpaceUsed;

  public static final String SERIALIZED_NAME_HIT_RATIO_ON_INDEX_CACHE = "hitRatioOnIndexCache";
  @SerializedName(SERIALIZED_NAME_HIT_RATIO_ON_INDEX_CACHE)
  private Double hitRatioOnIndexCache;

  public static final String SERIALIZED_NAME_HIT_RATIO_ON_DATA_CACHE = "hitRatioOnDataCache";
  @SerializedName(SERIALIZED_NAME_HIT_RATIO_ON_DATA_CACHE)
  private Double hitRatioOnDataCache;

  public static final String SERIALIZED_NAME_NUMBER_OF_INDEX_PAGE_READS = "numberOfIndexPageReads";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_INDEX_PAGE_READS)
  private Double numberOfIndexPageReads;

  public static final String SERIALIZED_NAME_NUMBER_OF_INDEX_PAGE_WRITES = "numberOfIndexPageWrites";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_INDEX_PAGE_WRITES)
  private Double numberOfIndexPageWrites;

  public static final String SERIALIZED_NAME_NUMBER_OF_DATA_BLOCK_READS = "numberOfDataBlockReads";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DATA_BLOCK_READS)
  private Double numberOfDataBlockReads;

  public static final String SERIALIZED_NAME_NUMBER_OF_DATA_BLOCK_WRITES = "numberOfDataBlockWrites";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DATA_BLOCK_WRITES)
  private Double numberOfDataBlockWrites;

  public static final String SERIALIZED_NAME_HIT_RATIO_ON_DATA_FILE_CACHE = "hitRatioOnDataFileCache";
  @SerializedName(SERIALIZED_NAME_HIT_RATIO_ON_DATA_FILE_CACHE)
  private Double hitRatioOnDataFileCache;


  public RuntimeStatistics cacheHitRatio(Double cacheHitRatio) {
    
    this.cacheHitRatio = cacheHitRatio;
    return this;
  }

   /**
   * Get cacheHitRatio
   * @return cacheHitRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCacheHitRatio() {
    return cacheHitRatio;
  }


  public void setCacheHitRatio(Double cacheHitRatio) {
    this.cacheHitRatio = cacheHitRatio;
  }


  public RuntimeStatistics currentCacheSize(Double currentCacheSize) {
    
    this.currentCacheSize = currentCacheSize;
    return this;
  }

   /**
   * Get currentCacheSize
   * @return currentCacheSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCurrentCacheSize() {
    return currentCacheSize;
  }


  public void setCurrentCacheSize(Double currentCacheSize) {
    this.currentCacheSize = currentCacheSize;
  }


  public RuntimeStatistics currentCacheSizeLimit(Double currentCacheSizeLimit) {
    
    this.currentCacheSizeLimit = currentCacheSizeLimit;
    return this;
  }

   /**
   * Get currentCacheSizeLimit
   * @return currentCacheSizeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCurrentCacheSizeLimit() {
    return currentCacheSizeLimit;
  }


  public void setCurrentCacheSizeLimit(Double currentCacheSizeLimit) {
    this.currentCacheSizeLimit = currentCacheSizeLimit;
  }


  public RuntimeStatistics pageReadsSinceLastStartup(Double pageReadsSinceLastStartup) {
    
    this.pageReadsSinceLastStartup = pageReadsSinceLastStartup;
    return this;
  }

   /**
   * Get pageReadsSinceLastStartup
   * @return pageReadsSinceLastStartup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPageReadsSinceLastStartup() {
    return pageReadsSinceLastStartup;
  }


  public void setPageReadsSinceLastStartup(Double pageReadsSinceLastStartup) {
    this.pageReadsSinceLastStartup = pageReadsSinceLastStartup;
  }


  public RuntimeStatistics pageWritesSinceLastStartup(Double pageWritesSinceLastStartup) {
    
    this.pageWritesSinceLastStartup = pageWritesSinceLastStartup;
    return this;
  }

   /**
   * Get pageWritesSinceLastStartup
   * @return pageWritesSinceLastStartup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPageWritesSinceLastStartup() {
    return pageWritesSinceLastStartup;
  }


  public void setPageWritesSinceLastStartup(Double pageWritesSinceLastStartup) {
    this.pageWritesSinceLastStartup = pageWritesSinceLastStartup;
  }


  public RuntimeStatistics pageSize(Double pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPageSize() {
    return pageSize;
  }


  public void setPageSize(Double pageSize) {
    this.pageSize = pageSize;
  }


  public RuntimeStatistics diskSpaceAllocatedForData(Double diskSpaceAllocatedForData) {
    
    this.diskSpaceAllocatedForData = diskSpaceAllocatedForData;
    return this;
  }

   /**
   * Get diskSpaceAllocatedForData
   * @return diskSpaceAllocatedForData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDiskSpaceAllocatedForData() {
    return diskSpaceAllocatedForData;
  }


  public void setDiskSpaceAllocatedForData(Double diskSpaceAllocatedForData) {
    this.diskSpaceAllocatedForData = diskSpaceAllocatedForData;
  }


  public RuntimeStatistics diskSpaceUsedByData(Double diskSpaceUsedByData) {
    
    this.diskSpaceUsedByData = diskSpaceUsedByData;
    return this;
  }

   /**
   * Get diskSpaceUsedByData
   * @return diskSpaceUsedByData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDiskSpaceUsedByData() {
    return diskSpaceUsedByData;
  }


  public void setDiskSpaceUsedByData(Double diskSpaceUsedByData) {
    this.diskSpaceUsedByData = diskSpaceUsedByData;
  }


  public RuntimeStatistics temporaryDiskSpaceAllocated(Double temporaryDiskSpaceAllocated) {
    
    this.temporaryDiskSpaceAllocated = temporaryDiskSpaceAllocated;
    return this;
  }

   /**
   * Get temporaryDiskSpaceAllocated
   * @return temporaryDiskSpaceAllocated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTemporaryDiskSpaceAllocated() {
    return temporaryDiskSpaceAllocated;
  }


  public void setTemporaryDiskSpaceAllocated(Double temporaryDiskSpaceAllocated) {
    this.temporaryDiskSpaceAllocated = temporaryDiskSpaceAllocated;
  }


  public RuntimeStatistics temporaryDiskSpaceUsed(Double temporaryDiskSpaceUsed) {
    
    this.temporaryDiskSpaceUsed = temporaryDiskSpaceUsed;
    return this;
  }

   /**
   * Get temporaryDiskSpaceUsed
   * @return temporaryDiskSpaceUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTemporaryDiskSpaceUsed() {
    return temporaryDiskSpaceUsed;
  }


  public void setTemporaryDiskSpaceUsed(Double temporaryDiskSpaceUsed) {
    this.temporaryDiskSpaceUsed = temporaryDiskSpaceUsed;
  }


  public RuntimeStatistics hitRatioOnIndexCache(Double hitRatioOnIndexCache) {
    
    this.hitRatioOnIndexCache = hitRatioOnIndexCache;
    return this;
  }

   /**
   * Get hitRatioOnIndexCache
   * @return hitRatioOnIndexCache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getHitRatioOnIndexCache() {
    return hitRatioOnIndexCache;
  }


  public void setHitRatioOnIndexCache(Double hitRatioOnIndexCache) {
    this.hitRatioOnIndexCache = hitRatioOnIndexCache;
  }


  public RuntimeStatistics hitRatioOnDataCache(Double hitRatioOnDataCache) {
    
    this.hitRatioOnDataCache = hitRatioOnDataCache;
    return this;
  }

   /**
   * Get hitRatioOnDataCache
   * @return hitRatioOnDataCache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getHitRatioOnDataCache() {
    return hitRatioOnDataCache;
  }


  public void setHitRatioOnDataCache(Double hitRatioOnDataCache) {
    this.hitRatioOnDataCache = hitRatioOnDataCache;
  }


  public RuntimeStatistics numberOfIndexPageReads(Double numberOfIndexPageReads) {
    
    this.numberOfIndexPageReads = numberOfIndexPageReads;
    return this;
  }

   /**
   * Get numberOfIndexPageReads
   * @return numberOfIndexPageReads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getNumberOfIndexPageReads() {
    return numberOfIndexPageReads;
  }


  public void setNumberOfIndexPageReads(Double numberOfIndexPageReads) {
    this.numberOfIndexPageReads = numberOfIndexPageReads;
  }


  public RuntimeStatistics numberOfIndexPageWrites(Double numberOfIndexPageWrites) {
    
    this.numberOfIndexPageWrites = numberOfIndexPageWrites;
    return this;
  }

   /**
   * Get numberOfIndexPageWrites
   * @return numberOfIndexPageWrites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getNumberOfIndexPageWrites() {
    return numberOfIndexPageWrites;
  }


  public void setNumberOfIndexPageWrites(Double numberOfIndexPageWrites) {
    this.numberOfIndexPageWrites = numberOfIndexPageWrites;
  }


  public RuntimeStatistics numberOfDataBlockReads(Double numberOfDataBlockReads) {
    
    this.numberOfDataBlockReads = numberOfDataBlockReads;
    return this;
  }

   /**
   * Get numberOfDataBlockReads
   * @return numberOfDataBlockReads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getNumberOfDataBlockReads() {
    return numberOfDataBlockReads;
  }


  public void setNumberOfDataBlockReads(Double numberOfDataBlockReads) {
    this.numberOfDataBlockReads = numberOfDataBlockReads;
  }


  public RuntimeStatistics numberOfDataBlockWrites(Double numberOfDataBlockWrites) {
    
    this.numberOfDataBlockWrites = numberOfDataBlockWrites;
    return this;
  }

   /**
   * Get numberOfDataBlockWrites
   * @return numberOfDataBlockWrites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getNumberOfDataBlockWrites() {
    return numberOfDataBlockWrites;
  }


  public void setNumberOfDataBlockWrites(Double numberOfDataBlockWrites) {
    this.numberOfDataBlockWrites = numberOfDataBlockWrites;
  }


  public RuntimeStatistics hitRatioOnDataFileCache(Double hitRatioOnDataFileCache) {
    
    this.hitRatioOnDataFileCache = hitRatioOnDataFileCache;
    return this;
  }

   /**
   * Get hitRatioOnDataFileCache
   * @return hitRatioOnDataFileCache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getHitRatioOnDataFileCache() {
    return hitRatioOnDataFileCache;
  }


  public void setHitRatioOnDataFileCache(Double hitRatioOnDataFileCache) {
    this.hitRatioOnDataFileCache = hitRatioOnDataFileCache;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeStatistics runtimeStatistics = (RuntimeStatistics) o;
    return Objects.equals(this.cacheHitRatio, runtimeStatistics.cacheHitRatio) &&
        Objects.equals(this.currentCacheSize, runtimeStatistics.currentCacheSize) &&
        Objects.equals(this.currentCacheSizeLimit, runtimeStatistics.currentCacheSizeLimit) &&
        Objects.equals(this.pageReadsSinceLastStartup, runtimeStatistics.pageReadsSinceLastStartup) &&
        Objects.equals(this.pageWritesSinceLastStartup, runtimeStatistics.pageWritesSinceLastStartup) &&
        Objects.equals(this.pageSize, runtimeStatistics.pageSize) &&
        Objects.equals(this.diskSpaceAllocatedForData, runtimeStatistics.diskSpaceAllocatedForData) &&
        Objects.equals(this.diskSpaceUsedByData, runtimeStatistics.diskSpaceUsedByData) &&
        Objects.equals(this.temporaryDiskSpaceAllocated, runtimeStatistics.temporaryDiskSpaceAllocated) &&
        Objects.equals(this.temporaryDiskSpaceUsed, runtimeStatistics.temporaryDiskSpaceUsed) &&
        Objects.equals(this.hitRatioOnIndexCache, runtimeStatistics.hitRatioOnIndexCache) &&
        Objects.equals(this.hitRatioOnDataCache, runtimeStatistics.hitRatioOnDataCache) &&
        Objects.equals(this.numberOfIndexPageReads, runtimeStatistics.numberOfIndexPageReads) &&
        Objects.equals(this.numberOfIndexPageWrites, runtimeStatistics.numberOfIndexPageWrites) &&
        Objects.equals(this.numberOfDataBlockReads, runtimeStatistics.numberOfDataBlockReads) &&
        Objects.equals(this.numberOfDataBlockWrites, runtimeStatistics.numberOfDataBlockWrites) &&
        Objects.equals(this.hitRatioOnDataFileCache, runtimeStatistics.hitRatioOnDataFileCache);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheHitRatio, currentCacheSize, currentCacheSizeLimit, pageReadsSinceLastStartup, pageWritesSinceLastStartup, pageSize, diskSpaceAllocatedForData, diskSpaceUsedByData, temporaryDiskSpaceAllocated, temporaryDiskSpaceUsed, hitRatioOnIndexCache, hitRatioOnDataCache, numberOfIndexPageReads, numberOfIndexPageWrites, numberOfDataBlockReads, numberOfDataBlockWrites, hitRatioOnDataFileCache);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeStatistics {\n");
    sb.append("    cacheHitRatio: ").append(toIndentedString(cacheHitRatio)).append("\n");
    sb.append("    currentCacheSize: ").append(toIndentedString(currentCacheSize)).append("\n");
    sb.append("    currentCacheSizeLimit: ").append(toIndentedString(currentCacheSizeLimit)).append("\n");
    sb.append("    pageReadsSinceLastStartup: ").append(toIndentedString(pageReadsSinceLastStartup)).append("\n");
    sb.append("    pageWritesSinceLastStartup: ").append(toIndentedString(pageWritesSinceLastStartup)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    diskSpaceAllocatedForData: ").append(toIndentedString(diskSpaceAllocatedForData)).append("\n");
    sb.append("    diskSpaceUsedByData: ").append(toIndentedString(diskSpaceUsedByData)).append("\n");
    sb.append("    temporaryDiskSpaceAllocated: ").append(toIndentedString(temporaryDiskSpaceAllocated)).append("\n");
    sb.append("    temporaryDiskSpaceUsed: ").append(toIndentedString(temporaryDiskSpaceUsed)).append("\n");
    sb.append("    hitRatioOnIndexCache: ").append(toIndentedString(hitRatioOnIndexCache)).append("\n");
    sb.append("    hitRatioOnDataCache: ").append(toIndentedString(hitRatioOnDataCache)).append("\n");
    sb.append("    numberOfIndexPageReads: ").append(toIndentedString(numberOfIndexPageReads)).append("\n");
    sb.append("    numberOfIndexPageWrites: ").append(toIndentedString(numberOfIndexPageWrites)).append("\n");
    sb.append("    numberOfDataBlockReads: ").append(toIndentedString(numberOfDataBlockReads)).append("\n");
    sb.append("    numberOfDataBlockWrites: ").append(toIndentedString(numberOfDataBlockWrites)).append("\n");
    sb.append("    hitRatioOnDataFileCache: ").append(toIndentedString(hitRatioOnDataFileCache)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

