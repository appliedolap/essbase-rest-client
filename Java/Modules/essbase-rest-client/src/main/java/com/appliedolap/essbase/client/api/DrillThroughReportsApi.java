/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.DrillthroughBean;
import com.appliedolap.essbase.client.model.ReportList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DrillThroughReportsApi {
    private ApiClient localVarApiClient;

    public DrillThroughReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DrillThroughReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for drillThroughReportsCreate
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the drill through report. The application or database name may be incorrect, or the report may already exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsCreateCall(String applicationName, String databaseName, DrillthroughBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/reports"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call drillThroughReportsCreateValidateBeforeCall(String applicationName, String databaseName, DrillthroughBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling drillThroughReportsCreate(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling drillThroughReportsCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling drillThroughReportsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = drillThroughReportsCreateCall(applicationName, databaseName, body, _callback);
        return localVarCall;

    }

    /**
     * Create Drill Through Report
     * &lt;p&gt;Creates a drill through report in the specified application and database, and returns details about the report.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @return DrillthroughBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the drill through report. The application or database name may be incorrect, or the report may already exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public DrillthroughBean drillThroughReportsCreate(String applicationName, String databaseName, DrillthroughBean body) throws ApiException {
        ApiResponse<DrillthroughBean> localVarResp = drillThroughReportsCreateWithHttpInfo(applicationName, databaseName, body);
        return localVarResp.getData();
    }

    /**
     * Create Drill Through Report
     * &lt;p&gt;Creates a drill through report in the specified application and database, and returns details about the report.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @return ApiResponse&lt;DrillthroughBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the drill through report. The application or database name may be incorrect, or the report may already exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DrillthroughBean> drillThroughReportsCreateWithHttpInfo(String applicationName, String databaseName, DrillthroughBean body) throws ApiException {
        okhttp3.Call localVarCall = drillThroughReportsCreateValidateBeforeCall(applicationName, databaseName, body, null);
        Type localVarReturnType = new TypeToken<DrillthroughBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Drill Through Report (asynchronously)
     * &lt;p&gt;Creates a drill through report in the specified application and database, and returns details about the report.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to create the drill through report. The application or database name may be incorrect, or the report may already exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsCreateAsync(String applicationName, String databaseName, DrillthroughBean body, final ApiCallback<DrillthroughBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = drillThroughReportsCreateValidateBeforeCall(applicationName, databaseName, body, _callback);
        Type localVarReturnType = new TypeToken<DrillthroughBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for drillThroughReportsDelete
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete the drill through report. The report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsDeleteCall(String applicationName, String databaseName, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/reports/{name}"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call drillThroughReportsDeleteValidateBeforeCall(String applicationName, String databaseName, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling drillThroughReportsDelete(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling drillThroughReportsDelete(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling drillThroughReportsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = drillThroughReportsDeleteCall(applicationName, databaseName, name, _callback);
        return localVarCall;

    }

    /**
     * Delete Drill Through Report
     * &lt;p&gt;Deletes the specified drill through report from the specified application and database.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete the drill through report. The report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void drillThroughReportsDelete(String applicationName, String databaseName, String name) throws ApiException {
        drillThroughReportsDeleteWithHttpInfo(applicationName, databaseName, name);
    }

    /**
     * Delete Drill Through Report
     * &lt;p&gt;Deletes the specified drill through report from the specified application and database.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete the drill through report. The report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> drillThroughReportsDeleteWithHttpInfo(String applicationName, String databaseName, String name) throws ApiException {
        okhttp3.Call localVarCall = drillThroughReportsDeleteValidateBeforeCall(applicationName, databaseName, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Drill Through Report (asynchronously)
     * &lt;p&gt;Deletes the specified drill through report from the specified application and database.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to delete the drill through report. The report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsDeleteAsync(String applicationName, String databaseName, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = drillThroughReportsDeleteValidateBeforeCall(applicationName, databaseName, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for drillThroughReportsGetReport
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was retrieved successfully. Returns the links to get, edit, or delete the report.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the report. The application name, database name, or report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsGetReportCall(String applicationName, String databaseName, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/reports/{name}"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call drillThroughReportsGetReportValidateBeforeCall(String applicationName, String databaseName, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling drillThroughReportsGetReport(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling drillThroughReportsGetReport(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling drillThroughReportsGetReport(Async)");
        }
        

        okhttp3.Call localVarCall = drillThroughReportsGetReportCall(applicationName, databaseName, name, _callback);
        return localVarCall;

    }

    /**
     * Get Drill Through Report
     * &lt;p&gt;Returns the specified drill through report from the specified application and database.&lt;p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @return DrillthroughBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was retrieved successfully. Returns the links to get, edit, or delete the report.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the report. The application name, database name, or report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public DrillthroughBean drillThroughReportsGetReport(String applicationName, String databaseName, String name) throws ApiException {
        ApiResponse<DrillthroughBean> localVarResp = drillThroughReportsGetReportWithHttpInfo(applicationName, databaseName, name);
        return localVarResp.getData();
    }

    /**
     * Get Drill Through Report
     * &lt;p&gt;Returns the specified drill through report from the specified application and database.&lt;p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;DrillthroughBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was retrieved successfully. Returns the links to get, edit, or delete the report.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the report. The application name, database name, or report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DrillthroughBean> drillThroughReportsGetReportWithHttpInfo(String applicationName, String databaseName, String name) throws ApiException {
        okhttp3.Call localVarCall = drillThroughReportsGetReportValidateBeforeCall(applicationName, databaseName, name, null);
        Type localVarReturnType = new TypeToken<DrillthroughBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Drill Through Report (asynchronously)
     * &lt;p&gt;Returns the specified drill through report from the specified application and database.&lt;p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was retrieved successfully. Returns the links to get, edit, or delete the report.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the report. The application name, database name, or report name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsGetReportAsync(String applicationName, String databaseName, String name, final ApiCallback<DrillthroughBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = drillThroughReportsGetReportValidateBeforeCall(applicationName, databaseName, name, _callback);
        Type localVarReturnType = new TypeToken<DrillthroughBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for drillThroughReportsGetReports
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through reports were retrieved successfully. Returns the links to get, edit, or delete the reports.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the drill through reports. The application or database name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsGetReportsCall(String applicationName, String databaseName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/reports"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call drillThroughReportsGetReportsValidateBeforeCall(String applicationName, String databaseName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling drillThroughReportsGetReports(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling drillThroughReportsGetReports(Async)");
        }
        

        okhttp3.Call localVarCall = drillThroughReportsGetReportsCall(applicationName, databaseName, _callback);
        return localVarCall;

    }

    /**
     * Get Drill Through Reports
     * &lt;p&gt;Returns all the drill through reports from the specified application and database.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @return ReportList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through reports were retrieved successfully. Returns the links to get, edit, or delete the reports.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the drill through reports. The application or database name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ReportList drillThroughReportsGetReports(String applicationName, String databaseName) throws ApiException {
        ApiResponse<ReportList> localVarResp = drillThroughReportsGetReportsWithHttpInfo(applicationName, databaseName);
        return localVarResp.getData();
    }

    /**
     * Get Drill Through Reports
     * &lt;p&gt;Returns all the drill through reports from the specified application and database.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;ReportList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through reports were retrieved successfully. Returns the links to get, edit, or delete the reports.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the drill through reports. The application or database name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportList> drillThroughReportsGetReportsWithHttpInfo(String applicationName, String databaseName) throws ApiException {
        okhttp3.Call localVarCall = drillThroughReportsGetReportsValidateBeforeCall(applicationName, databaseName, null);
        Type localVarReturnType = new TypeToken<ReportList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Drill Through Reports (asynchronously)
     * &lt;p&gt;Returns all the drill through reports from the specified application and database.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through reports were retrieved successfully. Returns the links to get, edit, or delete the reports.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to get the drill through reports. The application or database name may be incorrect.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsGetReportsAsync(String applicationName, String databaseName, final ApiCallback<ReportList> _callback) throws ApiException {

        okhttp3.Call localVarCall = drillThroughReportsGetReportsValidateBeforeCall(applicationName, databaseName, _callback);
        Type localVarReturnType = new TypeToken<ReportList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for drillThroughReportsUpdateReport
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the report. The application name, database name, or report name may be incorrect, or the specified report name may not exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsUpdateReportCall(String applicationName, String databaseName, String name, DrillthroughBean body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationName}/databases/{databaseName}/reports/{name}"
            .replaceAll("\\{" + "applicationName" + "\\}", localVarApiClient.escapeString(applicationName.toString()))
            .replaceAll("\\{" + "databaseName" + "\\}", localVarApiClient.escapeString(databaseName.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call drillThroughReportsUpdateReportValidateBeforeCall(String applicationName, String databaseName, String name, DrillthroughBean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling drillThroughReportsUpdateReport(Async)");
        }
        
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling drillThroughReportsUpdateReport(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling drillThroughReportsUpdateReport(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling drillThroughReportsUpdateReport(Async)");
        }
        

        okhttp3.Call localVarCall = drillThroughReportsUpdateReportCall(applicationName, databaseName, name, body, _callback);
        return localVarCall;

    }

    /**
     * Update Drill Through Reoprt
     * &lt;p&gt;Updates the drill through report in the specified application and database, and returns details of the updated report.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @return DrillthroughBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the report. The application name, database name, or report name may be incorrect, or the specified report name may not exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public DrillthroughBean drillThroughReportsUpdateReport(String applicationName, String databaseName, String name, DrillthroughBean body) throws ApiException {
        ApiResponse<DrillthroughBean> localVarResp = drillThroughReportsUpdateReportWithHttpInfo(applicationName, databaseName, name, body);
        return localVarResp.getData();
    }

    /**
     * Update Drill Through Reoprt
     * &lt;p&gt;Updates the drill through report in the specified application and database, and returns details of the updated report.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @return ApiResponse&lt;DrillthroughBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the report. The application name, database name, or report name may be incorrect, or the specified report name may not exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DrillthroughBean> drillThroughReportsUpdateReportWithHttpInfo(String applicationName, String databaseName, String name, DrillthroughBean body) throws ApiException {
        okhttp3.Call localVarCall = drillThroughReportsUpdateReportValidateBeforeCall(applicationName, databaseName, name, body, null);
        Type localVarReturnType = new TypeToken<DrillthroughBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Drill Through Reoprt (asynchronously)
     * &lt;p&gt;Updates the drill through report in the specified application and database, and returns details of the updated report.&lt;/p&gt;
     * @param applicationName &lt;p&gt;Application name.&lt;/p&gt; (required)
     * @param databaseName &lt;p&gt;Database name.&lt;/p&gt; (required)
     * @param name &lt;p&gt;Drill through report name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Drill through report details.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The drill through report was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Failed to update the report. The application name, database name, or report name may be incorrect, or the specified report name may not exist.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> &lt;p&gt;&lt;strong&gt;Not Acceptable&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The media type isn&#39;t supported or wasn&#39;t specified.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drillThroughReportsUpdateReportAsync(String applicationName, String databaseName, String name, DrillthroughBean body, final ApiCallback<DrillthroughBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = drillThroughReportsUpdateReportValidateBeforeCall(applicationName, databaseName, name, body, _callback);
        Type localVarReturnType = new TypeToken<DrillthroughBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
