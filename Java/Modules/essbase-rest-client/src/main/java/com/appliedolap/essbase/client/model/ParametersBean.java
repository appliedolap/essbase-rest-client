/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.appliedolap.essbase.client.model.CompactDesignation;
import com.appliedolap.essbase.client.model.RTSV;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ParametersBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-01T18:22:09.429372-05:00[America/Indiana/Indianapolis]")
public class ParametersBean {
  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String file;

  public static final String SERIALIZED_NAME_ABORT_ON_ERROR = "abortOnError";
  @SerializedName(SERIALIZED_NAME_ABORT_ON_ERROR)
  private String abortOnError;

  public static final String SERIALIZED_NAME_RESTRUCTURE_OPTION = "restructureOption";
  @SerializedName(SERIALIZED_NAME_RESTRUCTURE_OPTION)
  private String restructureOption;

  public static final String SERIALIZED_NAME_FORCE_DIM_BUILD = "forceDimBuild";
  @SerializedName(SERIALIZED_NAME_FORCE_DIM_BUILD)
  private String forceDimBuild;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_OPTION = "option";
  @SerializedName(SERIALIZED_NAME_OPTION)
  private String option;

  public static final String SERIALIZED_NAME_LOADDATA = "loaddata";
  @SerializedName(SERIALIZED_NAME_LOADDATA)
  private String loaddata;

  public static final String SERIALIZED_NAME_USE_CONNECTION = "useConnection";
  @SerializedName(SERIALIZED_NAME_USE_CONNECTION)
  private String useConnection;

  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private String connection;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_CALC = "calc";
  @SerializedName(SERIALIZED_NAME_CALC)
  private String calc;

  public static final String SERIALIZED_NAME_BUILD_METHOD = "buildMethod";
  @SerializedName(SERIALIZED_NAME_BUILD_METHOD)
  private String buildMethod;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_ZIP_FILE_NAME = "zipFileName";
  @SerializedName(SERIALIZED_NAME_ZIP_FILE_NAME)
  private String zipFileName;

  public static final String SERIALIZED_NAME_SKIPDATA = "skipdata";
  @SerializedName(SERIALIZED_NAME_SKIPDATA)
  private String skipdata;

  public static final String SERIALIZED_NAME_THREADS = "threads";
  @SerializedName(SERIALIZED_NAME_THREADS)
  private String threads;

  public static final String SERIALIZED_NAME_OVERWRITE = "overwrite";
  @SerializedName(SERIALIZED_NAME_OVERWRITE)
  private String overwrite;

  public static final String SERIALIZED_NAME_LCM_IMPORT_FROM_STORAGE = "lcmImportFromStorage";
  @SerializedName(SERIALIZED_NAME_LCM_IMPORT_FROM_STORAGE)
  private String lcmImportFromStorage;

  public static final String SERIALIZED_NAME_ANALYZE_FILE_NAME = "analyzeFileName";
  @SerializedName(SERIALIZED_NAME_ANALYZE_FILE_NAME)
  private String analyzeFileName;

  public static final String SERIALIZED_NAME_ANALYZE_SHEET_NAME = "analyzeSheetName";
  @SerializedName(SERIALIZED_NAME_ANALYZE_SHEET_NAME)
  private String analyzeSheetName;

  public static final String SERIALIZED_NAME_DELETE_EXCEL_ON_SUCCESS = "deleteExcelOnSuccess";
  @SerializedName(SERIALIZED_NAME_DELETE_EXCEL_ON_SUCCESS)
  private String deleteExcelOnSuccess;

  public static final String SERIALIZED_NAME_CATALOG_EXCEL_PATH = "catalogExcelPath";
  @SerializedName(SERIALIZED_NAME_CATALOG_EXCEL_PATH)
  private String catalogExcelPath;

  public static final String SERIALIZED_NAME_IMPORT_EXCEL_FILE_NAME = "importExcelFileName";
  @SerializedName(SERIALIZED_NAME_IMPORT_EXCEL_FILE_NAME)
  private String importExcelFileName;

  public static final String SERIALIZED_NAME_RECREATE_APPLICATION = "recreateApplication";
  @SerializedName(SERIALIZED_NAME_RECREATE_APPLICATION)
  private String recreateApplication;

  public static final String SERIALIZED_NAME_CREATE_FILES = "createFiles";
  @SerializedName(SERIALIZED_NAME_CREATE_FILES)
  private String createFiles;

  public static final String SERIALIZED_NAME_EXECUTE_SCRIPT = "executeScript";
  @SerializedName(SERIALIZED_NAME_EXECUTE_SCRIPT)
  private String executeScript;

  public static final String SERIALIZED_NAME_BUILD_OPTION = "buildOption";
  @SerializedName(SERIALIZED_NAME_BUILD_OPTION)
  private String buildOption;

  public static final String SERIALIZED_NAME_COPY_TO_STORAGE = "copyToStorage";
  @SerializedName(SERIALIZED_NAME_COPY_TO_STORAGE)
  private String copyToStorage;

  public static final String SERIALIZED_NAME_FILESYSTEMCOPY = "filesystemcopy";
  @SerializedName(SERIALIZED_NAME_FILESYSTEMCOPY)
  private String filesystemcopy;

  public static final String SERIALIZED_NAME_DATA_LEVEL = "dataLevel";
  @SerializedName(SERIALIZED_NAME_DATA_LEVEL)
  private String dataLevel;

  public static final String SERIALIZED_NAME_COLUMN_FORMAT = "columnFormat";
  @SerializedName(SERIALIZED_NAME_COLUMN_FORMAT)
  private String columnFormat;

  public static final String SERIALIZED_NAME_TARGET_APPLICATION_NAME = "targetApplicationName";
  @SerializedName(SERIALIZED_NAME_TARGET_APPLICATION_NAME)
  private String targetApplicationName;

  public static final String SERIALIZED_NAME_PARTIAL_DATA_EXPRESSION = "partialDataExpression";
  @SerializedName(SERIALIZED_NAME_PARTIAL_DATA_EXPRESSION)
  private String partialDataExpression;

  public static final String SERIALIZED_NAME_INCLUDE_SERVER_LEVEL = "includeServerLevel";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SERVER_LEVEL)
  private String includeServerLevel;

  public static final String SERIALIZED_NAME_ENABLE_SANDBOXING = "enableSandboxing";
  @SerializedName(SERIALIZED_NAME_ENABLE_SANDBOXING)
  private String enableSandboxing;

  public static final String SERIALIZED_NAME_DB_TYPE = "dbType";
  @SerializedName(SERIALIZED_NAME_DB_TYPE)
  private String dbType;

  public static final String SERIALIZED_NAME_DIM_DESIGNATION_MODE = "dimDesignationMode";
  @SerializedName(SERIALIZED_NAME_DIM_DESIGNATION_MODE)
  private String dimDesignationMode;

  public static final String SERIALIZED_NAME_UNSTRUCTURED_ANALYSIS = "unstructuredAnalysis";
  @SerializedName(SERIALIZED_NAME_UNSTRUCTURED_ANALYSIS)
  private CompactDesignation unstructuredAnalysis;

  public static final String SERIALIZED_NAME_RATIO_TO_STOP = "ratioToStop";
  @SerializedName(SERIALIZED_NAME_RATIO_TO_STOP)
  private String ratioToStop;

  public static final String SERIALIZED_NAME_BASED_ON_QUERY_DATA = "basedOnQueryData";
  @SerializedName(SERIALIZED_NAME_BASED_ON_QUERY_DATA)
  private String basedOnQueryData;

  public static final String SERIALIZED_NAME_ENABLE_ALTERNATE_ROLLUPS = "enableAlternateRollups";
  @SerializedName(SERIALIZED_NAME_ENABLE_ALTERNATE_ROLLUPS)
  private String enableAlternateRollups;

  public static final String SERIALIZED_NAME_COMPRESS = "compress";
  @SerializedName(SERIALIZED_NAME_COMPRESS)
  private String compress;

  public static final String SERIALIZED_NAME_GENERATE_ARTIFACT_LIST = "generateArtifactList";
  @SerializedName(SERIALIZED_NAME_GENERATE_ARTIFACT_LIST)
  private String generateArtifactList;

  public static final String SERIALIZED_NAME_ARTIFACT_LIST = "artifactList";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_LIST)
  private String artifactList;

  public static final String SERIALIZED_NAME_VERBOSE = "verbose";
  @SerializedName(SERIALIZED_NAME_VERBOSE)
  private String verbose;

  public static final String SERIALIZED_NAME_DISASTER_RECOVERY = "disasterRecovery";
  @SerializedName(SERIALIZED_NAME_DISASTER_RECOVERY)
  private String disasterRecovery;

  public static final String SERIALIZED_NAME_FORCE = "force";
  @SerializedName(SERIALIZED_NAME_FORCE)
  private String force;

  public static final String SERIALIZED_NAME_BACKUP_TYPE = "backupType";
  @SerializedName(SERIALIZED_NAME_BACKUP_TYPE)
  private String backupType;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_MAX_PARALLEL = "maxParallel";
  @SerializedName(SERIALIZED_NAME_MAX_PARALLEL)
  private String maxParallel;

  public static final String SERIALIZED_NAME_SELECTED_DIMENSIONS = "selectedDimensions";
  @SerializedName(SERIALIZED_NAME_SELECTED_DIMENSIONS)
  private List<String> selectedDimensions = null;

  public static final String SERIALIZED_NAME_RTSV = "rtsv";
  @SerializedName(SERIALIZED_NAME_RTSV)
  private List<RTSV> rtsv = null;

  public static final String SERIALIZED_NAME_BUFFER_ID = "bufferId";
  @SerializedName(SERIALIZED_NAME_BUFFER_ID)
  private Integer bufferId;

  public static final String SERIALIZED_NAME_BUFFER_IDS = "bufferIds";
  @SerializedName(SERIALIZED_NAME_BUFFER_IDS)
  private List<Integer> bufferIds = null;

  public static final String SERIALIZED_NAME_COMMIT_OPTION = "commitOption";
  @SerializedName(SERIALIZED_NAME_COMMIT_OPTION)
  private String commitOption;

  public static final String SERIALIZED_NAME_ACTION_TYPE = "actionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private String actionType;

  public static final String SERIALIZED_NAME_TERM_OPTION = "termOption";
  @SerializedName(SERIALIZED_NAME_TERM_OPTION)
  private String termOption;

  public static final String SERIALIZED_NAME_DISCOVER_DIMENSION_TABLES = "discoverDimensionTables";
  @SerializedName(SERIALIZED_NAME_DISCOVER_DIMENSION_TABLES)
  private String discoverDimensionTables;

  public static final String SERIALIZED_NAME_EXPORT_DYNAMIC_BLOCKS = "exportDynamicBlocks";
  @SerializedName(SERIALIZED_NAME_EXPORT_DYNAMIC_BLOCKS)
  private String exportDynamicBlocks;


  public ParametersBean rule(String rule) {
    
    this.rule = rule;
    return this;
  }

   /**
   * Get rule
   * @return rule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRule() {
    return rule;
  }


  public void setRule(String rule) {
    this.rule = rule;
  }


  public ParametersBean file(String file) {
    
    this.file = file;
    return this;
  }

   /**
   * Get file
   * @return file
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFile() {
    return file;
  }


  public void setFile(String file) {
    this.file = file;
  }


  public ParametersBean abortOnError(String abortOnError) {
    
    this.abortOnError = abortOnError;
    return this;
  }

   /**
   * Get abortOnError
   * @return abortOnError
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAbortOnError() {
    return abortOnError;
  }


  public void setAbortOnError(String abortOnError) {
    this.abortOnError = abortOnError;
  }


  public ParametersBean restructureOption(String restructureOption) {
    
    this.restructureOption = restructureOption;
    return this;
  }

   /**
   * Get restructureOption
   * @return restructureOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRestructureOption() {
    return restructureOption;
  }


  public void setRestructureOption(String restructureOption) {
    this.restructureOption = restructureOption;
  }


  public ParametersBean forceDimBuild(String forceDimBuild) {
    
    this.forceDimBuild = forceDimBuild;
    return this;
  }

   /**
   * Get forceDimBuild
   * @return forceDimBuild
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getForceDimBuild() {
    return forceDimBuild;
  }


  public void setForceDimBuild(String forceDimBuild) {
    this.forceDimBuild = forceDimBuild;
  }


  public ParametersBean script(String script) {
    
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScript() {
    return script;
  }


  public void setScript(String script) {
    this.script = script;
  }


  public ParametersBean option(String option) {
    
    this.option = option;
    return this;
  }

   /**
   * Get option
   * @return option
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOption() {
    return option;
  }


  public void setOption(String option) {
    this.option = option;
  }


  public ParametersBean loaddata(String loaddata) {
    
    this.loaddata = loaddata;
    return this;
  }

   /**
   * Get loaddata
   * @return loaddata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoaddata() {
    return loaddata;
  }


  public void setLoaddata(String loaddata) {
    this.loaddata = loaddata;
  }


  public ParametersBean useConnection(String useConnection) {
    
    this.useConnection = useConnection;
    return this;
  }

   /**
   * Get useConnection
   * @return useConnection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUseConnection() {
    return useConnection;
  }


  public void setUseConnection(String useConnection) {
    this.useConnection = useConnection;
  }


  public ParametersBean connection(String connection) {
    
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConnection() {
    return connection;
  }


  public void setConnection(String connection) {
    this.connection = connection;
  }


  public ParametersBean user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public ParametersBean password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public ParametersBean calc(String calc) {
    
    this.calc = calc;
    return this;
  }

   /**
   * Get calc
   * @return calc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCalc() {
    return calc;
  }


  public void setCalc(String calc) {
    this.calc = calc;
  }


  public ParametersBean buildMethod(String buildMethod) {
    
    this.buildMethod = buildMethod;
    return this;
  }

   /**
   * Get buildMethod
   * @return buildMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBuildMethod() {
    return buildMethod;
  }


  public void setBuildMethod(String buildMethod) {
    this.buildMethod = buildMethod;
  }


  public ParametersBean data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public ParametersBean zipFileName(String zipFileName) {
    
    this.zipFileName = zipFileName;
    return this;
  }

   /**
   * Get zipFileName
   * @return zipFileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getZipFileName() {
    return zipFileName;
  }


  public void setZipFileName(String zipFileName) {
    this.zipFileName = zipFileName;
  }


  public ParametersBean skipdata(String skipdata) {
    
    this.skipdata = skipdata;
    return this;
  }

   /**
   * Get skipdata
   * @return skipdata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSkipdata() {
    return skipdata;
  }


  public void setSkipdata(String skipdata) {
    this.skipdata = skipdata;
  }


  public ParametersBean threads(String threads) {
    
    this.threads = threads;
    return this;
  }

   /**
   * Get threads
   * @return threads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreads() {
    return threads;
  }


  public void setThreads(String threads) {
    this.threads = threads;
  }


  public ParametersBean overwrite(String overwrite) {
    
    this.overwrite = overwrite;
    return this;
  }

   /**
   * Get overwrite
   * @return overwrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOverwrite() {
    return overwrite;
  }


  public void setOverwrite(String overwrite) {
    this.overwrite = overwrite;
  }


  public ParametersBean lcmImportFromStorage(String lcmImportFromStorage) {
    
    this.lcmImportFromStorage = lcmImportFromStorage;
    return this;
  }

   /**
   * Get lcmImportFromStorage
   * @return lcmImportFromStorage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLcmImportFromStorage() {
    return lcmImportFromStorage;
  }


  public void setLcmImportFromStorage(String lcmImportFromStorage) {
    this.lcmImportFromStorage = lcmImportFromStorage;
  }


  public ParametersBean analyzeFileName(String analyzeFileName) {
    
    this.analyzeFileName = analyzeFileName;
    return this;
  }

   /**
   * Get analyzeFileName
   * @return analyzeFileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAnalyzeFileName() {
    return analyzeFileName;
  }


  public void setAnalyzeFileName(String analyzeFileName) {
    this.analyzeFileName = analyzeFileName;
  }


  public ParametersBean analyzeSheetName(String analyzeSheetName) {
    
    this.analyzeSheetName = analyzeSheetName;
    return this;
  }

   /**
   * Get analyzeSheetName
   * @return analyzeSheetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAnalyzeSheetName() {
    return analyzeSheetName;
  }


  public void setAnalyzeSheetName(String analyzeSheetName) {
    this.analyzeSheetName = analyzeSheetName;
  }


  public ParametersBean deleteExcelOnSuccess(String deleteExcelOnSuccess) {
    
    this.deleteExcelOnSuccess = deleteExcelOnSuccess;
    return this;
  }

   /**
   * Get deleteExcelOnSuccess
   * @return deleteExcelOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeleteExcelOnSuccess() {
    return deleteExcelOnSuccess;
  }


  public void setDeleteExcelOnSuccess(String deleteExcelOnSuccess) {
    this.deleteExcelOnSuccess = deleteExcelOnSuccess;
  }


  public ParametersBean catalogExcelPath(String catalogExcelPath) {
    
    this.catalogExcelPath = catalogExcelPath;
    return this;
  }

   /**
   * Get catalogExcelPath
   * @return catalogExcelPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCatalogExcelPath() {
    return catalogExcelPath;
  }


  public void setCatalogExcelPath(String catalogExcelPath) {
    this.catalogExcelPath = catalogExcelPath;
  }


  public ParametersBean importExcelFileName(String importExcelFileName) {
    
    this.importExcelFileName = importExcelFileName;
    return this;
  }

   /**
   * Get importExcelFileName
   * @return importExcelFileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImportExcelFileName() {
    return importExcelFileName;
  }


  public void setImportExcelFileName(String importExcelFileName) {
    this.importExcelFileName = importExcelFileName;
  }


  public ParametersBean recreateApplication(String recreateApplication) {
    
    this.recreateApplication = recreateApplication;
    return this;
  }

   /**
   * Get recreateApplication
   * @return recreateApplication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecreateApplication() {
    return recreateApplication;
  }


  public void setRecreateApplication(String recreateApplication) {
    this.recreateApplication = recreateApplication;
  }


  public ParametersBean createFiles(String createFiles) {
    
    this.createFiles = createFiles;
    return this;
  }

   /**
   * Get createFiles
   * @return createFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreateFiles() {
    return createFiles;
  }


  public void setCreateFiles(String createFiles) {
    this.createFiles = createFiles;
  }


  public ParametersBean executeScript(String executeScript) {
    
    this.executeScript = executeScript;
    return this;
  }

   /**
   * Get executeScript
   * @return executeScript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExecuteScript() {
    return executeScript;
  }


  public void setExecuteScript(String executeScript) {
    this.executeScript = executeScript;
  }


  public ParametersBean buildOption(String buildOption) {
    
    this.buildOption = buildOption;
    return this;
  }

   /**
   * Get buildOption
   * @return buildOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBuildOption() {
    return buildOption;
  }


  public void setBuildOption(String buildOption) {
    this.buildOption = buildOption;
  }


  public ParametersBean copyToStorage(String copyToStorage) {
    
    this.copyToStorage = copyToStorage;
    return this;
  }

   /**
   * Get copyToStorage
   * @return copyToStorage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCopyToStorage() {
    return copyToStorage;
  }


  public void setCopyToStorage(String copyToStorage) {
    this.copyToStorage = copyToStorage;
  }


  public ParametersBean filesystemcopy(String filesystemcopy) {
    
    this.filesystemcopy = filesystemcopy;
    return this;
  }

   /**
   * Get filesystemcopy
   * @return filesystemcopy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFilesystemcopy() {
    return filesystemcopy;
  }


  public void setFilesystemcopy(String filesystemcopy) {
    this.filesystemcopy = filesystemcopy;
  }


  public ParametersBean dataLevel(String dataLevel) {
    
    this.dataLevel = dataLevel;
    return this;
  }

   /**
   * Get dataLevel
   * @return dataLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataLevel() {
    return dataLevel;
  }


  public void setDataLevel(String dataLevel) {
    this.dataLevel = dataLevel;
  }


  public ParametersBean columnFormat(String columnFormat) {
    
    this.columnFormat = columnFormat;
    return this;
  }

   /**
   * Get columnFormat
   * @return columnFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColumnFormat() {
    return columnFormat;
  }


  public void setColumnFormat(String columnFormat) {
    this.columnFormat = columnFormat;
  }


  public ParametersBean targetApplicationName(String targetApplicationName) {
    
    this.targetApplicationName = targetApplicationName;
    return this;
  }

   /**
   * Get targetApplicationName
   * @return targetApplicationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTargetApplicationName() {
    return targetApplicationName;
  }


  public void setTargetApplicationName(String targetApplicationName) {
    this.targetApplicationName = targetApplicationName;
  }


  public ParametersBean partialDataExpression(String partialDataExpression) {
    
    this.partialDataExpression = partialDataExpression;
    return this;
  }

   /**
   * Get partialDataExpression
   * @return partialDataExpression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPartialDataExpression() {
    return partialDataExpression;
  }


  public void setPartialDataExpression(String partialDataExpression) {
    this.partialDataExpression = partialDataExpression;
  }


  public ParametersBean includeServerLevel(String includeServerLevel) {
    
    this.includeServerLevel = includeServerLevel;
    return this;
  }

   /**
   * Get includeServerLevel
   * @return includeServerLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIncludeServerLevel() {
    return includeServerLevel;
  }


  public void setIncludeServerLevel(String includeServerLevel) {
    this.includeServerLevel = includeServerLevel;
  }


  public ParametersBean enableSandboxing(String enableSandboxing) {
    
    this.enableSandboxing = enableSandboxing;
    return this;
  }

   /**
   * Get enableSandboxing
   * @return enableSandboxing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEnableSandboxing() {
    return enableSandboxing;
  }


  public void setEnableSandboxing(String enableSandboxing) {
    this.enableSandboxing = enableSandboxing;
  }


  public ParametersBean dbType(String dbType) {
    
    this.dbType = dbType;
    return this;
  }

   /**
   * Get dbType
   * @return dbType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDbType() {
    return dbType;
  }


  public void setDbType(String dbType) {
    this.dbType = dbType;
  }


  public ParametersBean dimDesignationMode(String dimDesignationMode) {
    
    this.dimDesignationMode = dimDesignationMode;
    return this;
  }

   /**
   * Get dimDesignationMode
   * @return dimDesignationMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDimDesignationMode() {
    return dimDesignationMode;
  }


  public void setDimDesignationMode(String dimDesignationMode) {
    this.dimDesignationMode = dimDesignationMode;
  }


  public ParametersBean unstructuredAnalysis(CompactDesignation unstructuredAnalysis) {
    
    this.unstructuredAnalysis = unstructuredAnalysis;
    return this;
  }

   /**
   * Get unstructuredAnalysis
   * @return unstructuredAnalysis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompactDesignation getUnstructuredAnalysis() {
    return unstructuredAnalysis;
  }


  public void setUnstructuredAnalysis(CompactDesignation unstructuredAnalysis) {
    this.unstructuredAnalysis = unstructuredAnalysis;
  }


  public ParametersBean ratioToStop(String ratioToStop) {
    
    this.ratioToStop = ratioToStop;
    return this;
  }

   /**
   * Get ratioToStop
   * @return ratioToStop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRatioToStop() {
    return ratioToStop;
  }


  public void setRatioToStop(String ratioToStop) {
    this.ratioToStop = ratioToStop;
  }


  public ParametersBean basedOnQueryData(String basedOnQueryData) {
    
    this.basedOnQueryData = basedOnQueryData;
    return this;
  }

   /**
   * Get basedOnQueryData
   * @return basedOnQueryData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBasedOnQueryData() {
    return basedOnQueryData;
  }


  public void setBasedOnQueryData(String basedOnQueryData) {
    this.basedOnQueryData = basedOnQueryData;
  }


  public ParametersBean enableAlternateRollups(String enableAlternateRollups) {
    
    this.enableAlternateRollups = enableAlternateRollups;
    return this;
  }

   /**
   * Get enableAlternateRollups
   * @return enableAlternateRollups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEnableAlternateRollups() {
    return enableAlternateRollups;
  }


  public void setEnableAlternateRollups(String enableAlternateRollups) {
    this.enableAlternateRollups = enableAlternateRollups;
  }


  public ParametersBean compress(String compress) {
    
    this.compress = compress;
    return this;
  }

   /**
   * Get compress
   * @return compress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompress() {
    return compress;
  }


  public void setCompress(String compress) {
    this.compress = compress;
  }


  public ParametersBean generateArtifactList(String generateArtifactList) {
    
    this.generateArtifactList = generateArtifactList;
    return this;
  }

   /**
   * Get generateArtifactList
   * @return generateArtifactList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGenerateArtifactList() {
    return generateArtifactList;
  }


  public void setGenerateArtifactList(String generateArtifactList) {
    this.generateArtifactList = generateArtifactList;
  }


  public ParametersBean artifactList(String artifactList) {
    
    this.artifactList = artifactList;
    return this;
  }

   /**
   * Get artifactList
   * @return artifactList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getArtifactList() {
    return artifactList;
  }


  public void setArtifactList(String artifactList) {
    this.artifactList = artifactList;
  }


  public ParametersBean verbose(String verbose) {
    
    this.verbose = verbose;
    return this;
  }

   /**
   * Get verbose
   * @return verbose
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVerbose() {
    return verbose;
  }


  public void setVerbose(String verbose) {
    this.verbose = verbose;
  }


  public ParametersBean disasterRecovery(String disasterRecovery) {
    
    this.disasterRecovery = disasterRecovery;
    return this;
  }

   /**
   * Get disasterRecovery
   * @return disasterRecovery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisasterRecovery() {
    return disasterRecovery;
  }


  public void setDisasterRecovery(String disasterRecovery) {
    this.disasterRecovery = disasterRecovery;
  }


  public ParametersBean force(String force) {
    
    this.force = force;
    return this;
  }

   /**
   * Get force
   * @return force
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getForce() {
    return force;
  }


  public void setForce(String force) {
    this.force = force;
  }


  public ParametersBean backupType(String backupType) {
    
    this.backupType = backupType;
    return this;
  }

   /**
   * Get backupType
   * @return backupType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackupType() {
    return backupType;
  }


  public void setBackupType(String backupType) {
    this.backupType = backupType;
  }


  public ParametersBean appId(String appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * Get appId
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }


  public ParametersBean timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public ParametersBean maxParallel(String maxParallel) {
    
    this.maxParallel = maxParallel;
    return this;
  }

   /**
   * Get maxParallel
   * @return maxParallel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMaxParallel() {
    return maxParallel;
  }


  public void setMaxParallel(String maxParallel) {
    this.maxParallel = maxParallel;
  }


  public ParametersBean selectedDimensions(List<String> selectedDimensions) {
    
    this.selectedDimensions = selectedDimensions;
    return this;
  }

  public ParametersBean addSelectedDimensionsItem(String selectedDimensionsItem) {
    if (this.selectedDimensions == null) {
      this.selectedDimensions = new ArrayList<String>();
    }
    this.selectedDimensions.add(selectedDimensionsItem);
    return this;
  }

   /**
   * Get selectedDimensions
   * @return selectedDimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSelectedDimensions() {
    return selectedDimensions;
  }


  public void setSelectedDimensions(List<String> selectedDimensions) {
    this.selectedDimensions = selectedDimensions;
  }


  public ParametersBean rtsv(List<RTSV> rtsv) {
    
    this.rtsv = rtsv;
    return this;
  }

  public ParametersBean addRtsvItem(RTSV rtsvItem) {
    if (this.rtsv == null) {
      this.rtsv = new ArrayList<RTSV>();
    }
    this.rtsv.add(rtsvItem);
    return this;
  }

   /**
   * Get rtsv
   * @return rtsv
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RTSV> getRtsv() {
    return rtsv;
  }


  public void setRtsv(List<RTSV> rtsv) {
    this.rtsv = rtsv;
  }


  public ParametersBean bufferId(Integer bufferId) {
    
    this.bufferId = bufferId;
    return this;
  }

   /**
   * Get bufferId
   * @return bufferId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBufferId() {
    return bufferId;
  }


  public void setBufferId(Integer bufferId) {
    this.bufferId = bufferId;
  }


  public ParametersBean bufferIds(List<Integer> bufferIds) {
    
    this.bufferIds = bufferIds;
    return this;
  }

  public ParametersBean addBufferIdsItem(Integer bufferIdsItem) {
    if (this.bufferIds == null) {
      this.bufferIds = new ArrayList<Integer>();
    }
    this.bufferIds.add(bufferIdsItem);
    return this;
  }

   /**
   * Get bufferIds
   * @return bufferIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getBufferIds() {
    return bufferIds;
  }


  public void setBufferIds(List<Integer> bufferIds) {
    this.bufferIds = bufferIds;
  }


  public ParametersBean commitOption(String commitOption) {
    
    this.commitOption = commitOption;
    return this;
  }

   /**
   * Get commitOption
   * @return commitOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCommitOption() {
    return commitOption;
  }


  public void setCommitOption(String commitOption) {
    this.commitOption = commitOption;
  }


  public ParametersBean actionType(String actionType) {
    
    this.actionType = actionType;
    return this;
  }

   /**
   * Get actionType
   * @return actionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getActionType() {
    return actionType;
  }


  public void setActionType(String actionType) {
    this.actionType = actionType;
  }


  public ParametersBean termOption(String termOption) {
    
    this.termOption = termOption;
    return this;
  }

   /**
   * Get termOption
   * @return termOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTermOption() {
    return termOption;
  }


  public void setTermOption(String termOption) {
    this.termOption = termOption;
  }


  public ParametersBean discoverDimensionTables(String discoverDimensionTables) {
    
    this.discoverDimensionTables = discoverDimensionTables;
    return this;
  }

   /**
   * Get discoverDimensionTables
   * @return discoverDimensionTables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDiscoverDimensionTables() {
    return discoverDimensionTables;
  }


  public void setDiscoverDimensionTables(String discoverDimensionTables) {
    this.discoverDimensionTables = discoverDimensionTables;
  }


  public ParametersBean exportDynamicBlocks(String exportDynamicBlocks) {
    
    this.exportDynamicBlocks = exportDynamicBlocks;
    return this;
  }

   /**
   * Get exportDynamicBlocks
   * @return exportDynamicBlocks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExportDynamicBlocks() {
    return exportDynamicBlocks;
  }


  public void setExportDynamicBlocks(String exportDynamicBlocks) {
    this.exportDynamicBlocks = exportDynamicBlocks;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParametersBean parametersBean = (ParametersBean) o;
    return Objects.equals(this.rule, parametersBean.rule) &&
        Objects.equals(this.file, parametersBean.file) &&
        Objects.equals(this.abortOnError, parametersBean.abortOnError) &&
        Objects.equals(this.restructureOption, parametersBean.restructureOption) &&
        Objects.equals(this.forceDimBuild, parametersBean.forceDimBuild) &&
        Objects.equals(this.script, parametersBean.script) &&
        Objects.equals(this.option, parametersBean.option) &&
        Objects.equals(this.loaddata, parametersBean.loaddata) &&
        Objects.equals(this.useConnection, parametersBean.useConnection) &&
        Objects.equals(this.connection, parametersBean.connection) &&
        Objects.equals(this.user, parametersBean.user) &&
        Objects.equals(this.password, parametersBean.password) &&
        Objects.equals(this.calc, parametersBean.calc) &&
        Objects.equals(this.buildMethod, parametersBean.buildMethod) &&
        Objects.equals(this.data, parametersBean.data) &&
        Objects.equals(this.zipFileName, parametersBean.zipFileName) &&
        Objects.equals(this.skipdata, parametersBean.skipdata) &&
        Objects.equals(this.threads, parametersBean.threads) &&
        Objects.equals(this.overwrite, parametersBean.overwrite) &&
        Objects.equals(this.lcmImportFromStorage, parametersBean.lcmImportFromStorage) &&
        Objects.equals(this.analyzeFileName, parametersBean.analyzeFileName) &&
        Objects.equals(this.analyzeSheetName, parametersBean.analyzeSheetName) &&
        Objects.equals(this.deleteExcelOnSuccess, parametersBean.deleteExcelOnSuccess) &&
        Objects.equals(this.catalogExcelPath, parametersBean.catalogExcelPath) &&
        Objects.equals(this.importExcelFileName, parametersBean.importExcelFileName) &&
        Objects.equals(this.recreateApplication, parametersBean.recreateApplication) &&
        Objects.equals(this.createFiles, parametersBean.createFiles) &&
        Objects.equals(this.executeScript, parametersBean.executeScript) &&
        Objects.equals(this.buildOption, parametersBean.buildOption) &&
        Objects.equals(this.copyToStorage, parametersBean.copyToStorage) &&
        Objects.equals(this.filesystemcopy, parametersBean.filesystemcopy) &&
        Objects.equals(this.dataLevel, parametersBean.dataLevel) &&
        Objects.equals(this.columnFormat, parametersBean.columnFormat) &&
        Objects.equals(this.targetApplicationName, parametersBean.targetApplicationName) &&
        Objects.equals(this.partialDataExpression, parametersBean.partialDataExpression) &&
        Objects.equals(this.includeServerLevel, parametersBean.includeServerLevel) &&
        Objects.equals(this.enableSandboxing, parametersBean.enableSandboxing) &&
        Objects.equals(this.dbType, parametersBean.dbType) &&
        Objects.equals(this.dimDesignationMode, parametersBean.dimDesignationMode) &&
        Objects.equals(this.unstructuredAnalysis, parametersBean.unstructuredAnalysis) &&
        Objects.equals(this.ratioToStop, parametersBean.ratioToStop) &&
        Objects.equals(this.basedOnQueryData, parametersBean.basedOnQueryData) &&
        Objects.equals(this.enableAlternateRollups, parametersBean.enableAlternateRollups) &&
        Objects.equals(this.compress, parametersBean.compress) &&
        Objects.equals(this.generateArtifactList, parametersBean.generateArtifactList) &&
        Objects.equals(this.artifactList, parametersBean.artifactList) &&
        Objects.equals(this.verbose, parametersBean.verbose) &&
        Objects.equals(this.disasterRecovery, parametersBean.disasterRecovery) &&
        Objects.equals(this.force, parametersBean.force) &&
        Objects.equals(this.backupType, parametersBean.backupType) &&
        Objects.equals(this.appId, parametersBean.appId) &&
        Objects.equals(this.timestamp, parametersBean.timestamp) &&
        Objects.equals(this.maxParallel, parametersBean.maxParallel) &&
        Objects.equals(this.selectedDimensions, parametersBean.selectedDimensions) &&
        Objects.equals(this.rtsv, parametersBean.rtsv) &&
        Objects.equals(this.bufferId, parametersBean.bufferId) &&
        Objects.equals(this.bufferIds, parametersBean.bufferIds) &&
        Objects.equals(this.commitOption, parametersBean.commitOption) &&
        Objects.equals(this.actionType, parametersBean.actionType) &&
        Objects.equals(this.termOption, parametersBean.termOption) &&
        Objects.equals(this.discoverDimensionTables, parametersBean.discoverDimensionTables) &&
        Objects.equals(this.exportDynamicBlocks, parametersBean.exportDynamicBlocks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rule, file, abortOnError, restructureOption, forceDimBuild, script, option, loaddata, useConnection, connection, user, password, calc, buildMethod, data, zipFileName, skipdata, threads, overwrite, lcmImportFromStorage, analyzeFileName, analyzeSheetName, deleteExcelOnSuccess, catalogExcelPath, importExcelFileName, recreateApplication, createFiles, executeScript, buildOption, copyToStorage, filesystemcopy, dataLevel, columnFormat, targetApplicationName, partialDataExpression, includeServerLevel, enableSandboxing, dbType, dimDesignationMode, unstructuredAnalysis, ratioToStop, basedOnQueryData, enableAlternateRollups, compress, generateArtifactList, artifactList, verbose, disasterRecovery, force, backupType, appId, timestamp, maxParallel, selectedDimensions, rtsv, bufferId, bufferIds, commitOption, actionType, termOption, discoverDimensionTables, exportDynamicBlocks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParametersBean {\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    abortOnError: ").append(toIndentedString(abortOnError)).append("\n");
    sb.append("    restructureOption: ").append(toIndentedString(restructureOption)).append("\n");
    sb.append("    forceDimBuild: ").append(toIndentedString(forceDimBuild)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    option: ").append(toIndentedString(option)).append("\n");
    sb.append("    loaddata: ").append(toIndentedString(loaddata)).append("\n");
    sb.append("    useConnection: ").append(toIndentedString(useConnection)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    calc: ").append(toIndentedString(calc)).append("\n");
    sb.append("    buildMethod: ").append(toIndentedString(buildMethod)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    zipFileName: ").append(toIndentedString(zipFileName)).append("\n");
    sb.append("    skipdata: ").append(toIndentedString(skipdata)).append("\n");
    sb.append("    threads: ").append(toIndentedString(threads)).append("\n");
    sb.append("    overwrite: ").append(toIndentedString(overwrite)).append("\n");
    sb.append("    lcmImportFromStorage: ").append(toIndentedString(lcmImportFromStorage)).append("\n");
    sb.append("    analyzeFileName: ").append(toIndentedString(analyzeFileName)).append("\n");
    sb.append("    analyzeSheetName: ").append(toIndentedString(analyzeSheetName)).append("\n");
    sb.append("    deleteExcelOnSuccess: ").append(toIndentedString(deleteExcelOnSuccess)).append("\n");
    sb.append("    catalogExcelPath: ").append(toIndentedString(catalogExcelPath)).append("\n");
    sb.append("    importExcelFileName: ").append(toIndentedString(importExcelFileName)).append("\n");
    sb.append("    recreateApplication: ").append(toIndentedString(recreateApplication)).append("\n");
    sb.append("    createFiles: ").append(toIndentedString(createFiles)).append("\n");
    sb.append("    executeScript: ").append(toIndentedString(executeScript)).append("\n");
    sb.append("    buildOption: ").append(toIndentedString(buildOption)).append("\n");
    sb.append("    copyToStorage: ").append(toIndentedString(copyToStorage)).append("\n");
    sb.append("    filesystemcopy: ").append(toIndentedString(filesystemcopy)).append("\n");
    sb.append("    dataLevel: ").append(toIndentedString(dataLevel)).append("\n");
    sb.append("    columnFormat: ").append(toIndentedString(columnFormat)).append("\n");
    sb.append("    targetApplicationName: ").append(toIndentedString(targetApplicationName)).append("\n");
    sb.append("    partialDataExpression: ").append(toIndentedString(partialDataExpression)).append("\n");
    sb.append("    includeServerLevel: ").append(toIndentedString(includeServerLevel)).append("\n");
    sb.append("    enableSandboxing: ").append(toIndentedString(enableSandboxing)).append("\n");
    sb.append("    dbType: ").append(toIndentedString(dbType)).append("\n");
    sb.append("    dimDesignationMode: ").append(toIndentedString(dimDesignationMode)).append("\n");
    sb.append("    unstructuredAnalysis: ").append(toIndentedString(unstructuredAnalysis)).append("\n");
    sb.append("    ratioToStop: ").append(toIndentedString(ratioToStop)).append("\n");
    sb.append("    basedOnQueryData: ").append(toIndentedString(basedOnQueryData)).append("\n");
    sb.append("    enableAlternateRollups: ").append(toIndentedString(enableAlternateRollups)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    generateArtifactList: ").append(toIndentedString(generateArtifactList)).append("\n");
    sb.append("    artifactList: ").append(toIndentedString(artifactList)).append("\n");
    sb.append("    verbose: ").append(toIndentedString(verbose)).append("\n");
    sb.append("    disasterRecovery: ").append(toIndentedString(disasterRecovery)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    maxParallel: ").append(toIndentedString(maxParallel)).append("\n");
    sb.append("    selectedDimensions: ").append(toIndentedString(selectedDimensions)).append("\n");
    sb.append("    rtsv: ").append(toIndentedString(rtsv)).append("\n");
    sb.append("    bufferId: ").append(toIndentedString(bufferId)).append("\n");
    sb.append("    bufferIds: ").append(toIndentedString(bufferIds)).append("\n");
    sb.append("    commitOption: ").append(toIndentedString(commitOption)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    termOption: ").append(toIndentedString(termOption)).append("\n");
    sb.append("    discoverDimensionTables: ").append(toIndentedString(discoverDimensionTables)).append("\n");
    sb.append("    exportDynamicBlocks: ").append(toIndentedString(exportDynamicBlocks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

