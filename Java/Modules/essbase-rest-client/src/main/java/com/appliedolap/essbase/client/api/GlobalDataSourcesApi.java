/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.Datasource;
import com.appliedolap.essbase.client.model.DatasourceQueryInfo;
import com.appliedolap.essbase.client.model.DatasourcesList;
import com.appliedolap.essbase.client.model.ResultBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalDataSourcesApi {
    private ApiClient localVarApiClient;

    public GlobalDataSourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalDataSourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for globalDatasourcesCreateDatasource
     * @param body &lt;p&gt;Data source details.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to create data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesCreateDatasourceCall(Datasource body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datasources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesCreateDatasourceValidateBeforeCall(Datasource body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = globalDatasourcesCreateDatasourceCall(body, _callback);
        return localVarCall;

    }

    /**
     * Create Global Data Source
     * &lt;p&gt;Creates a global-level data source based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of data sources. Other required inputs differ based on the type of data source.&lt;/p&gt;
     * @param body &lt;p&gt;Data source details.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to create data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void globalDatasourcesCreateDatasource(Datasource body) throws ApiException {
        globalDatasourcesCreateDatasourceWithHttpInfo(body);
    }

    /**
     * Create Global Data Source
     * &lt;p&gt;Creates a global-level data source based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of data sources. Other required inputs differ based on the type of data source.&lt;/p&gt;
     * @param body &lt;p&gt;Data source details.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to create data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalDatasourcesCreateDatasourceWithHttpInfo(Datasource body) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesCreateDatasourceValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Global Data Source (asynchronously)
     * &lt;p&gt;Creates a global-level data source based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of data sources. Other required inputs differ based on the type of data source.&lt;/p&gt;
     * @param body &lt;p&gt;Data source details.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source created successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to create data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesCreateDatasourceAsync(Datasource body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesCreateDatasourceValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDatasourcesDeleteDatasource
     * @param datasourceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to delete data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesDeleteDatasourceCall(String datasourceName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasources/{datasourceName}"
            .replaceAll("\\{" + "datasourceName" + "\\}", localVarApiClient.escapeString(datasourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesDeleteDatasourceValidateBeforeCall(String datasourceName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceName' is set
        if (datasourceName == null) {
            throw new ApiException("Missing the required parameter 'datasourceName' when calling globalDatasourcesDeleteDatasource(Async)");
        }
        

        okhttp3.Call localVarCall = globalDatasourcesDeleteDatasourceCall(datasourceName, _callback);
        return localVarCall;

    }

    /**
     * Delete Global Data Source
     * &lt;p&gt;Deletes the named global-level data source.&lt;/p&gt;
     * @param datasourceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to delete data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void globalDatasourcesDeleteDatasource(String datasourceName) throws ApiException {
        globalDatasourcesDeleteDatasourceWithHttpInfo(datasourceName);
    }

    /**
     * Delete Global Data Source
     * &lt;p&gt;Deletes the named global-level data source.&lt;/p&gt;
     * @param datasourceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to delete data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalDatasourcesDeleteDatasourceWithHttpInfo(String datasourceName) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesDeleteDatasourceValidateBeforeCall(datasourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Global Data Source (asynchronously)
     * &lt;p&gt;Deletes the named global-level data source.&lt;/p&gt;
     * @param datasourceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &lt;p&gt;&lt;strong&gt;No Content&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was deleted successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to delete data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesDeleteDatasourceAsync(String datasourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesDeleteDatasourceValidateBeforeCall(datasourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDatasourcesGetData
     * @param streamId &lt;p&gt;Stream id.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDataCall(String streamId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasources/query/data/{streamId}"
            .replaceAll("\\{" + "streamId" + "\\}", localVarApiClient.escapeString(streamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesGetDataValidateBeforeCall(String streamId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling globalDatasourcesGetData(Async)");
        }
        

        okhttp3.Call localVarCall = globalDatasourcesGetDataCall(streamId, _callback);
        return localVarCall;

    }

    /**
     * Get Streamed Data Source Results
     * &lt;p&gt;Returns results from a global-level data source associated with the specified stream id.&lt;/p&gt;
     * @param streamId &lt;p&gt;Stream id.&lt;/p&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void globalDatasourcesGetData(String streamId) throws ApiException {
        globalDatasourcesGetDataWithHttpInfo(streamId);
    }

    /**
     * Get Streamed Data Source Results
     * &lt;p&gt;Returns results from a global-level data source associated with the specified stream id.&lt;/p&gt;
     * @param streamId &lt;p&gt;Stream id.&lt;/p&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalDatasourcesGetDataWithHttpInfo(String streamId) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesGetDataValidateBeforeCall(streamId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Streamed Data Source Results (asynchronously)
     * &lt;p&gt;Returns results from a global-level data source associated with the specified stream id.&lt;/p&gt;
     * @param streamId &lt;p&gt;Stream id.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDataAsync(String streamId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesGetDataValidateBeforeCall(streamId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDatasourcesGetDataStream
     * @param includeHeaders &lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDataStreamCall(Boolean includeHeaders, DatasourceQueryInfo body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datasources/query/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeHeaders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHeaders", includeHeaders));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesGetDataStreamValidateBeforeCall(Boolean includeHeaders, DatasourceQueryInfo body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = globalDatasourcesGetDataStreamCall(includeHeaders, body, _callback);
        return localVarCall;

    }

    /**
     * Get Streamed Data Source Results
     * &lt;p&gt;Returns results in stream from a global-level data source.&lt;/p&gt;
     * @param includeHeaders &lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void globalDatasourcesGetDataStream(Boolean includeHeaders, DatasourceQueryInfo body) throws ApiException {
        globalDatasourcesGetDataStreamWithHttpInfo(includeHeaders, body);
    }

    /**
     * Get Streamed Data Source Results
     * &lt;p&gt;Returns results in stream from a global-level data source.&lt;/p&gt;
     * @param includeHeaders &lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalDatasourcesGetDataStreamWithHttpInfo(Boolean includeHeaders, DatasourceQueryInfo body) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesGetDataStreamValidateBeforeCall(includeHeaders, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Streamed Data Source Results (asynchronously)
     * &lt;p&gt;Returns results in stream from a global-level data source.&lt;/p&gt;
     * @param includeHeaders &lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Results fetched successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to stream results.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDataStreamAsync(Boolean includeHeaders, DatasourceQueryInfo body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesGetDataStreamValidateBeforeCall(includeHeaders, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDatasourcesGetDatasourceDetails
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data source details.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDatasourceDetailsCall(String datasouceName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasources/{datasouceName}"
            .replaceAll("\\{" + "datasouceName" + "\\}", localVarApiClient.escapeString(datasouceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesGetDatasourceDetailsValidateBeforeCall(String datasouceName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasouceName' is set
        if (datasouceName == null) {
            throw new ApiException("Missing the required parameter 'datasouceName' when calling globalDatasourcesGetDatasourceDetails(Async)");
        }
        

        okhttp3.Call localVarCall = globalDatasourcesGetDatasourceDetailsCall(datasouceName, _callback);
        return localVarCall;

    }

    /**
     * Get Global Data Source
     * &lt;p&gt;Returns details about the specified global data source.&lt;/p&gt;
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @return Datasource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data source details.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public Datasource globalDatasourcesGetDatasourceDetails(String datasouceName) throws ApiException {
        ApiResponse<Datasource> localVarResp = globalDatasourcesGetDatasourceDetailsWithHttpInfo(datasouceName);
        return localVarResp.getData();
    }

    /**
     * Get Global Data Source
     * &lt;p&gt;Returns details about the specified global data source.&lt;/p&gt;
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @return ApiResponse&lt;Datasource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data source details.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Datasource> globalDatasourcesGetDatasourceDetailsWithHttpInfo(String datasouceName) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesGetDatasourceDetailsValidateBeforeCall(datasouceName, null);
        Type localVarReturnType = new TypeToken<Datasource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Global Data Source (asynchronously)
     * &lt;p&gt;Returns details about the specified global data source.&lt;/p&gt;
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source details returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data source details.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDatasourceDetailsAsync(String datasouceName, final ApiCallback<Datasource> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesGetDatasourceDetailsValidateBeforeCall(datasouceName, _callback);
        Type localVarReturnType = new TypeToken<Datasource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDatasourcesGetDatasources
     * @param offset &lt;p&gt;Number of data sources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of data sources to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of data sources returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data sources.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDatasourcesCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesGetDatasourcesValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = globalDatasourcesGetDatasourcesCall(offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Get Global Data Sources
     * &lt;p&gt;Returns a list of global-level data sources, including details such as name, description, connection, and type.&lt;/p&gt;
     * @param offset &lt;p&gt;Number of data sources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of data sources to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @return DatasourcesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of data sources returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data sources.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public DatasourcesList globalDatasourcesGetDatasources(Integer offset, Integer limit) throws ApiException {
        ApiResponse<DatasourcesList> localVarResp = globalDatasourcesGetDatasourcesWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get Global Data Sources
     * &lt;p&gt;Returns a list of global-level data sources, including details such as name, description, connection, and type.&lt;/p&gt;
     * @param offset &lt;p&gt;Number of data sources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of data sources to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @return ApiResponse&lt;DatasourcesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of data sources returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data sources.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasourcesList> globalDatasourcesGetDatasourcesWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesGetDatasourcesValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<DatasourcesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Global Data Sources (asynchronously)
     * &lt;p&gt;Returns a list of global-level data sources, including details such as name, description, connection, and type.&lt;/p&gt;
     * @param offset &lt;p&gt;Number of data sources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)
     * @param limit &lt;p&gt;Maximum number of data sources to return. Default is 50.&lt;/p&gt; (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;List of data sources returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get data sources.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetDatasourcesAsync(Integer offset, Integer limit, final ApiCallback<DatasourcesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesGetDatasourcesValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<DatasourcesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDatasourcesGetResults
     * @param pageSize &lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Streaming information returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get streaming information.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetResultsCall(Integer pageSize, DatasourceQueryInfo body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datasources/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesGetResultsValidateBeforeCall(Integer pageSize, DatasourceQueryInfo body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = globalDatasourcesGetResultsCall(pageSize, body, _callback);
        return localVarCall;

    }

    /**
     * Stream Data Source Results
     * &lt;p&gt;Returns column headers of the data source, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
     * @param pageSize &lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @return ResultBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Streaming information returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get streaming information.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ResultBean globalDatasourcesGetResults(Integer pageSize, DatasourceQueryInfo body) throws ApiException {
        ApiResponse<ResultBean> localVarResp = globalDatasourcesGetResultsWithHttpInfo(pageSize, body);
        return localVarResp.getData();
    }

    /**
     * Stream Data Source Results
     * &lt;p&gt;Returns column headers of the data source, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
     * @param pageSize &lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ResultBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Streaming information returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get streaming information.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultBean> globalDatasourcesGetResultsWithHttpInfo(Integer pageSize, DatasourceQueryInfo body) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesGetResultsValidateBeforeCall(pageSize, body, null);
        Type localVarReturnType = new TypeToken<ResultBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream Data Source Results (asynchronously)
     * &lt;p&gt;Returns column headers of the data source, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
     * @param pageSize &lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)
     * @param body &lt;p&gt;Query information.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Streaming information returned successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to get streaming information.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;p&gt;Internal Server Error.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesGetResultsAsync(Integer pageSize, DatasourceQueryInfo body, final ApiCallback<ResultBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesGetResultsValidateBeforeCall(pageSize, body, _callback);
        Type localVarReturnType = new TypeToken<ResultBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDatasourcesUpdateDatasource
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Updated data source details.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to update the data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesUpdateDatasourceCall(String datasouceName, Datasource body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datasources/{datasouceName}"
            .replaceAll("\\{" + "datasouceName" + "\\}", localVarApiClient.escapeString(datasouceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDatasourcesUpdateDatasourceValidateBeforeCall(String datasouceName, Datasource body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasouceName' is set
        if (datasouceName == null) {
            throw new ApiException("Missing the required parameter 'datasouceName' when calling globalDatasourcesUpdateDatasource(Async)");
        }
        

        okhttp3.Call localVarCall = globalDatasourcesUpdateDatasourceCall(datasouceName, body, _callback);
        return localVarCall;

    }

    /**
     * Update Global Data Source
     * &lt;p&gt;Update the named global-level data source. If the update is successful, returns details about the updated data source. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of data sources. Other required inputs differ based on the type of the data source.&lt;/p&gt;
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Updated data source details.&lt;/p&gt; (optional)
     * @return Datasource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to update the data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public Datasource globalDatasourcesUpdateDatasource(String datasouceName, Datasource body) throws ApiException {
        ApiResponse<Datasource> localVarResp = globalDatasourcesUpdateDatasourceWithHttpInfo(datasouceName, body);
        return localVarResp.getData();
    }

    /**
     * Update Global Data Source
     * &lt;p&gt;Update the named global-level data source. If the update is successful, returns details about the updated data source. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of data sources. Other required inputs differ based on the type of the data source.&lt;/p&gt;
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Updated data source details.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Datasource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to update the data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Datasource> globalDatasourcesUpdateDatasourceWithHttpInfo(String datasouceName, Datasource body) throws ApiException {
        okhttp3.Call localVarCall = globalDatasourcesUpdateDatasourceValidateBeforeCall(datasouceName, body, null);
        Type localVarReturnType = new TypeToken<Datasource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Global Data Source (asynchronously)
     * &lt;p&gt;Update the named global-level data source. If the update is successful, returns details about the updated data source. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of data sources. Other required inputs differ based on the type of the data source.&lt;/p&gt;
     * @param datasouceName &lt;p&gt;Data source name.&lt;/p&gt; (required)
     * @param body &lt;p&gt;Updated data source details.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;p&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Data source was updated successfully.&lt;/p&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;p&gt;&lt;strong&gt;Bad Request&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Failed to update the data source.&lt;/p&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDatasourcesUpdateDatasourceAsync(String datasouceName, Datasource body, final ApiCallback<Datasource> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDatasourcesUpdateDatasourceValidateBeforeCall(datasouceName, body, _callback);
        Type localVarReturnType = new TypeToken<Datasource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
