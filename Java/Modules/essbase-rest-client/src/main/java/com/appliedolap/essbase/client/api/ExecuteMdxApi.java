/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.api;

import com.appliedolap.essbase.client.ApiCallback;
import com.appliedolap.essbase.client.ApiClient;
import com.appliedolap.essbase.client.ApiException;
import com.appliedolap.essbase.client.ApiResponse;
import com.appliedolap.essbase.client.Configuration;
import com.appliedolap.essbase.client.Pair;
import com.appliedolap.essbase.client.ProgressRequestBody;
import com.appliedolap.essbase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.appliedolap.essbase.client.model.MDXInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExecuteMdxApi {
    private ApiClient localVarApiClient;

    public ExecuteMdxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExecuteMdxApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for mDXExecuteMDX
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param format Result Format (optional, default to JSON)
     * @param body Query and Preferences (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mDXExecuteMDXCall(String application, String database, String format, MDXInput body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{application}/databases/{database}/mdx"
            .replaceAll("\\{" + "application" + "\\}", localVarApiClient.escapeString(application.toString()))
            .replaceAll("\\{" + "database" + "\\}", localVarApiClient.escapeString(database.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/octet-stream", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mDXExecuteMDXValidateBeforeCall(String application, String database, String format, MDXInput body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling mDXExecuteMDX(Async)");
        }
        
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling mDXExecuteMDX(Async)");
        }
        

        okhttp3.Call localVarCall = mDXExecuteMDXCall(application, database, format, body, _callback);
        return localVarCall;

    }

    /**
     * Gets the mdx response in various formats.
     * Gets the mdx response in various formats like JSON,HTML,EXCEL and CSV
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param format Result Format (optional, default to JSON)
     * @param body Query and Preferences (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Object mDXExecuteMDX(String application, String database, String format, MDXInput body) throws ApiException {
        ApiResponse<Object> localVarResp = mDXExecuteMDXWithHttpInfo(application, database, format, body);
        return localVarResp.getData();
    }

    /**
     * Gets the mdx response in various formats.
     * Gets the mdx response in various formats like JSON,HTML,EXCEL and CSV
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param format Result Format (optional, default to JSON)
     * @param body Query and Preferences (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> mDXExecuteMDXWithHttpInfo(String application, String database, String format, MDXInput body) throws ApiException {
        okhttp3.Call localVarCall = mDXExecuteMDXValidateBeforeCall(application, database, format, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the mdx response in various formats. (asynchronously)
     * Gets the mdx response in various formats like JSON,HTML,EXCEL and CSV
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param format Result Format (optional, default to JSON)
     * @param body Query and Preferences (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mDXExecuteMDXAsync(String application, String database, String format, MDXInput body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = mDXExecuteMDXValidateBeforeCall(application, database, format, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mDXExecutenq
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param name Name (required)
     * @param format Result Format (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mDXExecutenqCall(String application, String database, String name, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{application}/databases/{database}/mdx/{name}"
            .replaceAll("\\{" + "application" + "\\}", localVarApiClient.escapeString(application.toString()))
            .replaceAll("\\{" + "database" + "\\}", localVarApiClient.escapeString(database.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mDXExecutenqValidateBeforeCall(String application, String database, String name, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling mDXExecutenq(Async)");
        }
        
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling mDXExecutenq(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling mDXExecutenq(Async)");
        }
        

        okhttp3.Call localVarCall = mDXExecutenqCall(application, database, name, format, _callback);
        return localVarCall;

    }

    /**
     * Gets the named mdx result in various formats.
     * GGets the named mdx result in various formats. like JSON,HTML,EXCEL and CSV
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param name Name (required)
     * @param format Result Format (optional, default to JSON)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Object mDXExecutenq(String application, String database, String name, String format) throws ApiException {
        ApiResponse<Object> localVarResp = mDXExecutenqWithHttpInfo(application, database, name, format);
        return localVarResp.getData();
    }

    /**
     * Gets the named mdx result in various formats.
     * GGets the named mdx result in various formats. like JSON,HTML,EXCEL and CSV
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param name Name (required)
     * @param format Result Format (optional, default to JSON)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> mDXExecutenqWithHttpInfo(String application, String database, String name, String format) throws ApiException {
        okhttp3.Call localVarCall = mDXExecutenqValidateBeforeCall(application, database, name, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the named mdx result in various formats. (asynchronously)
     * GGets the named mdx result in various formats. like JSON,HTML,EXCEL and CSV
     * @param application Application Name (required)
     * @param database Cube Name (required)
     * @param name Name (required)
     * @param format Result Format (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mostly OK. As this is streaming api, it may fail with 200 as well. Check for errorMessage tag in the response for any errros </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to get the data in required format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mDXExecutenqAsync(String application, String database, String name, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = mDXExecutenqValidateBeforeCall(application, database, name, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
