/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TransactionSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-09-15T10:08:15.807377400-05:00[America/Chicago]")
public class TransactionSettings {
  public static final String SERIALIZED_NAME_COMMITTED_ACCESS = "committedAccess";
  @SerializedName(SERIALIZED_NAME_COMMITTED_ACCESS)
  private Boolean committedAccess;

  public static final String SERIALIZED_NAME_CONCURRENCY_WAIT_SECONDS = "concurrencyWaitSeconds";
  @SerializedName(SERIALIZED_NAME_CONCURRENCY_WAIT_SECONDS)
  private Integer concurrencyWaitSeconds;

  public static final String SERIALIZED_NAME_CONCURRENCY_PRE_IMAGE_ACCESS = "concurrencyPreImageAccess";
  @SerializedName(SERIALIZED_NAME_CONCURRENCY_PRE_IMAGE_ACCESS)
  private Boolean concurrencyPreImageAccess;

  public static final String SERIALIZED_NAME_COMMIT_BLOCKS = "commitBlocks";
  @SerializedName(SERIALIZED_NAME_COMMIT_BLOCKS)
  private Long commitBlocks;

  public static final String SERIALIZED_NAME_COMMIT_ROWS = "commitRows";
  @SerializedName(SERIALIZED_NAME_COMMIT_ROWS)
  private Long commitRows;


  public TransactionSettings committedAccess(Boolean committedAccess) {
    
    this.committedAccess = committedAccess;
    return this;
  }

   /**
   * Get committedAccess
   * @return committedAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCommittedAccess() {
    return committedAccess;
  }


  public void setCommittedAccess(Boolean committedAccess) {
    this.committedAccess = committedAccess;
  }


  public TransactionSettings concurrencyWaitSeconds(Integer concurrencyWaitSeconds) {
    
    this.concurrencyWaitSeconds = concurrencyWaitSeconds;
    return this;
  }

   /**
   * Get concurrencyWaitSeconds
   * @return concurrencyWaitSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getConcurrencyWaitSeconds() {
    return concurrencyWaitSeconds;
  }


  public void setConcurrencyWaitSeconds(Integer concurrencyWaitSeconds) {
    this.concurrencyWaitSeconds = concurrencyWaitSeconds;
  }


  public TransactionSettings concurrencyPreImageAccess(Boolean concurrencyPreImageAccess) {
    
    this.concurrencyPreImageAccess = concurrencyPreImageAccess;
    return this;
  }

   /**
   * Get concurrencyPreImageAccess
   * @return concurrencyPreImageAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getConcurrencyPreImageAccess() {
    return concurrencyPreImageAccess;
  }


  public void setConcurrencyPreImageAccess(Boolean concurrencyPreImageAccess) {
    this.concurrencyPreImageAccess = concurrencyPreImageAccess;
  }


  public TransactionSettings commitBlocks(Long commitBlocks) {
    
    this.commitBlocks = commitBlocks;
    return this;
  }

   /**
   * Get commitBlocks
   * @return commitBlocks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getCommitBlocks() {
    return commitBlocks;
  }


  public void setCommitBlocks(Long commitBlocks) {
    this.commitBlocks = commitBlocks;
  }


  public TransactionSettings commitRows(Long commitRows) {
    
    this.commitRows = commitRows;
    return this;
  }

   /**
   * Get commitRows
   * @return commitRows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getCommitRows() {
    return commitRows;
  }


  public void setCommitRows(Long commitRows) {
    this.commitRows = commitRows;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSettings transactionSettings = (TransactionSettings) o;
    return Objects.equals(this.committedAccess, transactionSettings.committedAccess) &&
        Objects.equals(this.concurrencyWaitSeconds, transactionSettings.concurrencyWaitSeconds) &&
        Objects.equals(this.concurrencyPreImageAccess, transactionSettings.concurrencyPreImageAccess) &&
        Objects.equals(this.commitBlocks, transactionSettings.commitBlocks) &&
        Objects.equals(this.commitRows, transactionSettings.commitRows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(committedAccess, concurrencyWaitSeconds, concurrencyPreImageAccess, commitBlocks, commitRows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSettings {\n");
    sb.append("    committedAccess: ").append(toIndentedString(committedAccess)).append("\n");
    sb.append("    concurrencyWaitSeconds: ").append(toIndentedString(concurrencyWaitSeconds)).append("\n");
    sb.append("    concurrencyPreImageAccess: ").append(toIndentedString(concurrencyPreImageAccess)).append("\n");
    sb.append("    commitBlocks: ").append(toIndentedString(commitBlocks)).append("\n");
    sb.append("    commitRows: ").append(toIndentedString(commitRows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

