/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.appliedolap.essbase.client.model.ColumnMappingInfo;
import com.appliedolap.essbase.client.model.Link;
import com.appliedolap.essbase.client.model.RunTimeParametersInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * DrillthroughBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-01T18:22:09.429372-05:00[America/Indiana/Indianapolis]")
public class DrillthroughBean {
  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = null;

  public static final String SERIALIZED_NAME_DATA_SOURCE_NAME = "dataSourceName";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_NAME)
  private String dataSourceName;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_COLUMN_MAPPING = "columnMapping";
  @SerializedName(SERIALIZED_NAME_COLUMN_MAPPING)
  private Map<String, ColumnMappingInfo> columnMapping = null;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns = null;

  public static final String SERIALIZED_NAME_DRILLABLE_REGIONS = "drillableRegions";
  @SerializedName(SERIALIZED_NAME_DRILLABLE_REGIONS)
  private List<String> drillableRegions = null;

  public static final String SERIALIZED_NAME_PARAMETER_MAPPING = "parameterMapping";
  @SerializedName(SERIALIZED_NAME_PARAMETER_MAPPING)
  private Map<String, RunTimeParametersInfo> parameterMapping = null;

  public static final String SERIALIZED_NAME_USE_TEMP_TABLES = "useTempTables";
  @SerializedName(SERIALIZED_NAME_USE_TEMP_TABLES)
  private Boolean useTempTables;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;


  public DrillthroughBean links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public DrillthroughBean addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<Link>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }


  public DrillthroughBean dataSourceName(String dataSourceName) {
    
    this.dataSourceName = dataSourceName;
    return this;
  }

   /**
   * Get dataSourceName
   * @return dataSourceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataSourceName() {
    return dataSourceName;
  }


  public void setDataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
  }


  public DrillthroughBean url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public DrillthroughBean columnMapping(Map<String, ColumnMappingInfo> columnMapping) {
    
    this.columnMapping = columnMapping;
    return this;
  }

  public DrillthroughBean putColumnMappingItem(String key, ColumnMappingInfo columnMappingItem) {
    if (this.columnMapping == null) {
      this.columnMapping = new HashMap<String, ColumnMappingInfo>();
    }
    this.columnMapping.put(key, columnMappingItem);
    return this;
  }

   /**
   * Get columnMapping
   * @return columnMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, ColumnMappingInfo> getColumnMapping() {
    return columnMapping;
  }


  public void setColumnMapping(Map<String, ColumnMappingInfo> columnMapping) {
    this.columnMapping = columnMapping;
  }


  public DrillthroughBean columns(List<String> columns) {
    
    this.columns = columns;
    return this;
  }

  public DrillthroughBean addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<String>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getColumns() {
    return columns;
  }


  public void setColumns(List<String> columns) {
    this.columns = columns;
  }


  public DrillthroughBean drillableRegions(List<String> drillableRegions) {
    
    this.drillableRegions = drillableRegions;
    return this;
  }

  public DrillthroughBean addDrillableRegionsItem(String drillableRegionsItem) {
    if (this.drillableRegions == null) {
      this.drillableRegions = new ArrayList<String>();
    }
    this.drillableRegions.add(drillableRegionsItem);
    return this;
  }

   /**
   * Get drillableRegions
   * @return drillableRegions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDrillableRegions() {
    return drillableRegions;
  }


  public void setDrillableRegions(List<String> drillableRegions) {
    this.drillableRegions = drillableRegions;
  }


  public DrillthroughBean parameterMapping(Map<String, RunTimeParametersInfo> parameterMapping) {
    
    this.parameterMapping = parameterMapping;
    return this;
  }

  public DrillthroughBean putParameterMappingItem(String key, RunTimeParametersInfo parameterMappingItem) {
    if (this.parameterMapping == null) {
      this.parameterMapping = new HashMap<String, RunTimeParametersInfo>();
    }
    this.parameterMapping.put(key, parameterMappingItem);
    return this;
  }

   /**
   * Get parameterMapping
   * @return parameterMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, RunTimeParametersInfo> getParameterMapping() {
    return parameterMapping;
  }


  public void setParameterMapping(Map<String, RunTimeParametersInfo> parameterMapping) {
    this.parameterMapping = parameterMapping;
  }


  public DrillthroughBean useTempTables(Boolean useTempTables) {
    
    this.useTempTables = useTempTables;
    return this;
  }

   /**
   * Get useTempTables
   * @return useTempTables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUseTempTables() {
    return useTempTables;
  }


  public void setUseTempTables(Boolean useTempTables) {
    this.useTempTables = useTempTables;
  }


  public DrillthroughBean type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public DrillthroughBean name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrillthroughBean drillthroughBean = (DrillthroughBean) o;
    return Objects.equals(this.links, drillthroughBean.links) &&
        Objects.equals(this.dataSourceName, drillthroughBean.dataSourceName) &&
        Objects.equals(this.url, drillthroughBean.url) &&
        Objects.equals(this.columnMapping, drillthroughBean.columnMapping) &&
        Objects.equals(this.columns, drillthroughBean.columns) &&
        Objects.equals(this.drillableRegions, drillthroughBean.drillableRegions) &&
        Objects.equals(this.parameterMapping, drillthroughBean.parameterMapping) &&
        Objects.equals(this.useTempTables, drillthroughBean.useTempTables) &&
        Objects.equals(this.type, drillthroughBean.type) &&
        Objects.equals(this.name, drillthroughBean.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, dataSourceName, url, columnMapping, columns, drillableRegions, parameterMapping, useTempTables, type, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrillthroughBean {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    dataSourceName: ").append(toIndentedString(dataSourceName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    columnMapping: ").append(toIndentedString(columnMapping)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    drillableRegions: ").append(toIndentedString(drillableRegions)).append("\n");
    sb.append("    parameterMapping: ").append(toIndentedString(parameterMapping)).append("\n");
    sb.append("    useTempTables: ").append(toIndentedString(useTempTables)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

