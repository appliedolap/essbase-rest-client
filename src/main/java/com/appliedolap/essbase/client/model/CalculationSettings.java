/*
 * sometitle
 * The REST API for Essbase provides an automation framework for managing Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.appliedolap.essbase.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CalculationSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-01T18:22:09.429372-05:00[America/Indiana/Indianapolis]")
public class CalculationSettings {
  public static final String SERIALIZED_NAME_AGGREGATE_MISSING_VALUES = "aggregateMissingValues";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_MISSING_VALUES)
  private Boolean aggregateMissingValues;

  public static final String SERIALIZED_NAME_CREATE_BLOCKS_ON_EQUATIONS = "createBlocksOnEquations";
  @SerializedName(SERIALIZED_NAME_CREATE_BLOCKS_ON_EQUATIONS)
  private Boolean createBlocksOnEquations;

  public static final String SERIALIZED_NAME_TWO_PASS_CALCULATION = "twoPassCalculation";
  @SerializedName(SERIALIZED_NAME_TWO_PASS_CALCULATION)
  private Boolean twoPassCalculation;


  public CalculationSettings aggregateMissingValues(Boolean aggregateMissingValues) {
    
    this.aggregateMissingValues = aggregateMissingValues;
    return this;
  }

   /**
   * Get aggregateMissingValues
   * @return aggregateMissingValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAggregateMissingValues() {
    return aggregateMissingValues;
  }


  public void setAggregateMissingValues(Boolean aggregateMissingValues) {
    this.aggregateMissingValues = aggregateMissingValues;
  }


  public CalculationSettings createBlocksOnEquations(Boolean createBlocksOnEquations) {
    
    this.createBlocksOnEquations = createBlocksOnEquations;
    return this;
  }

   /**
   * Get createBlocksOnEquations
   * @return createBlocksOnEquations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCreateBlocksOnEquations() {
    return createBlocksOnEquations;
  }


  public void setCreateBlocksOnEquations(Boolean createBlocksOnEquations) {
    this.createBlocksOnEquations = createBlocksOnEquations;
  }


  public CalculationSettings twoPassCalculation(Boolean twoPassCalculation) {
    
    this.twoPassCalculation = twoPassCalculation;
    return this;
  }

   /**
   * Get twoPassCalculation
   * @return twoPassCalculation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTwoPassCalculation() {
    return twoPassCalculation;
  }


  public void setTwoPassCalculation(Boolean twoPassCalculation) {
    this.twoPassCalculation = twoPassCalculation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculationSettings calculationSettings = (CalculationSettings) o;
    return Objects.equals(this.aggregateMissingValues, calculationSettings.aggregateMissingValues) &&
        Objects.equals(this.createBlocksOnEquations, calculationSettings.createBlocksOnEquations) &&
        Objects.equals(this.twoPassCalculation, calculationSettings.twoPassCalculation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateMissingValues, createBlocksOnEquations, twoPassCalculation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculationSettings {\n");
    sb.append("    aggregateMissingValues: ").append(toIndentedString(aggregateMissingValues)).append("\n");
    sb.append("    createBlocksOnEquations: ").append(toIndentedString(createBlocksOnEquations)).append("\n");
    sb.append("    twoPassCalculation: ").append(toIndentedString(twoPassCalculation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

